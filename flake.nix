{
  inputs = {
    # Should be updated from flake-pins: <https://github.com/akirak/flake-pins>
    utils.url = "github:numtide/flake-utils";
    pre-commit-hooks.url = "github:cachix/pre-commit-hooks.nix";
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-22.11";
    stable.url = "github:NixOS/nixpkgs/nixos-22.11";
    unstable.url = "github:NixOS/nixpkgs/nixos-unstable";

    nix-darwin = {
      url = "github:LnL7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    flake-utils-plus.url = "github:gytis-ivaskevicius/flake-utils-plus";
    nix-filter.url = "github:numtide/nix-filter";

    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-hardware.url = "github:NixOS/nixos-hardware";
    cachix-deploy-flake = {
      url = "github:cachix/cachix-deploy-flake";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.disko.follows = "disko";
      inputs.darwin.follows = "nix-darwin";
    };

    homelab = {
      url = "github:akirak/homelab";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.unstable.follows = "unstable";
    };

    flake-pins = {
      url = "github:akirak/flake-pins";
      flake = false;
    };

    # NixOS modules
    impermanence.url = "github:nix-community/impermanence";
    # nixos-hardware.url = "github:nixos/nixos-hardware";
    # agenix.url = "github:ryantm/agenix";
    # agenix.inputs.nixpkgs.follows = "latest";

    nix-index-database.url = "github:Mic92/nix-index-database";
    nix-index-database.inputs.nixpkgs.follows = "nixpkgs";

    # Emacs
    emacs-overlay.url = "github:nix-community/emacs-overlay";
    org-babel.url = "github:emacs-twist/org-babel";
    twist.url = "github:emacs-twist/twist.nix";
    melpa = {
      url = "github:akirak/melpa/akirak";
      flake = false;
    };
    gnu-elpa = {
      url = "git+https://git.savannah.gnu.org/git/emacs/elpa.git?ref=main";
      flake = false;
    };
    epkgs = {
      url = "github:emacsmirror/epkgs";
      flake = false;
    };

    # pre-commit
    flake-no-path = {
      url = "github:akirak/flake-no-path";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.flake-utils.follows = "utils";
      inputs.pre-commit-hooks.follows = "pre-commit-hooks";
    };
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils-plus,
    utils,
    impermanence,
    ...
  } @ inputs: let
    mkApp = utils.lib.mkApp;
    homeProfiles = import ./home {inherit (nixpkgs) lib;};

    emacsOverlay = import ./emacs/overlay.nix {
      inherit inputs;
      emacsPackageForSystem = system:
        (import inputs.flake-pins).packages.${system}.emacs-pgtk;
    };
  in
    flake-utils-plus.lib.mkFlake {
      inherit self inputs;

      supportedSystems = ["x86_64-linux"];

      channelsConfig = {
        allowBroken = false;
        allowUnfreePredicate = pkg:
          builtins.elem (nixpkgs.lib.getName pkg) [
            # Explicitly select unfree packages.
            "wpsoffice"
            "steam-run"
            "steam-original"
            "symbola"
            "vscode"
          ];
      };

      sharedOverlays = [
        (import ./pkgs/overlay.nix)
        inputs.flake-no-path.overlay
        emacsOverlay
      ];

      # Nixpkgs flake reference to be used in the configuration.
      # Autogenerated from `inputs` by default.
      hostDefaults = {
        system = "x86_64-linux";
        channelName = "unstable";

        extraArgs = {
          # nixos/profiles/core.nix requires self parameter
          inherit self;
        };

        # Default modules to be passed to all hosts.
        modules = [
          impermanence.nixosModules.impermanence
          ./nixos/profiles/defaults.nix
        ];
      };

      #############
      ### hosts ###
      #############

      hosts.li = {
        system = "x86_64-linux";
        channelName = "unstable";
        extraArgs = rec {
          homeUser = "akirakomamura";
        };

        modules = [
          inputs.homelab.nixosModules.hmProfile
          ./sites/li/nixos/home.nix

          {
            imports = [
              ./sites/li/nixos/boot.nix
              ./sites/li/nixos/hardware.nix
              ./sites/li/nixos/xserver.nix
              ./sites/li/nixos/filesystems.nix
              ./sites/li/nixos/zfs.nix
              ./sites/li/nixos/rpool2
              ./sites/li/nixos/default-user.nix
            ];

            networking.hostName = "li";
            # Needed for the ZFS pool.
            networking.hostId = "8425e349";

            networking.firewall = {
              enable = true;
            };

            networking.useDHCP = false;
            # networking.interfaces.enp0s31f6.useDHCP = true;
            # networking.interfaces.wlp2s0.useDHCP = true;
            networking.networkmanager.enable = true;
            # systemd.services.NetworkManager-wait-online.enable = true;

            services.journald.extraConfig = ''
              SystemMaxFiles=5
            '';

            # virtualisation.virtualbox.host = {
            #   enable = true;
            # };

            system.stateVersion = "22.11";
          }

          ./nixos/desktop.nix
          # ./nixos/xmonad.nix
          ./nixos/river.nix

          ./nixos/profiles/postgresql.nix

          # Optional toy environment for experimenting with services
          # ./nixos/toy.nix

          # ./nixos/frontend.nix
          # ./nixos/development.nix
          # ./nixos/profiles/docker.nix
          ./nixos/profiles/tailscale.nix
          # ./nixos/profiles/fcitx.nix

          # ./nixos/profiles/android.nix
        ];
      };

      #############################
      ### flake outputs builder ###
      #############################

      outputsBuilder = channels: let
        inherit (channels.nixpkgs) emacs-config emacsSandboxed;
      in {
        packages = {
          tryout-emacs = emacsSandboxed {
            name = "tryout-emacs";
            nativeCompileAheadDefault = false;
            automaticNativeCompile = false;
            enableOpinionatedSettings = false;
            extraFeatures = [];
            protectHome = false;
            shareNet = false;
            inheritPath = false;
          };

          inherit (channels.nixpkgs) readability-cli;

          inherit emacs-config;
          inherit (channels.nixpkgs) emacs-root;

          test-emacs-config = channels.nixpkgs.callPackage ./emacs/tests {};

          update-elisp = channels.nixpkgs.writeShellScriptBin "update-elisp" ''
            nix flake lock --update-input melpa --update-input gnu-elpa
            cd emacs/lock
            bash ./update.bash "$@"
          '';

          wordnet-sqlite = channels.nixpkgs.wordnet-sqlite;

          update-elisp-lock = channels.nixpkgs.writeShellApplication {
            name = "update-elisp-lock";
            runtimeInputs = [
              channels.nixpkgs.deno
            ];
            text = ''
              cd emacs/lock
              deno run --allow-read --allow-run ${scripts/update-elisp-lock.ts}
            '';
          };
        };

        apps = emacs-config.makeApps {
          lockDirName = "emacs/lock";
        };

        # Set up a pre-commit hook by running `nix develop`.
        devShells = {
          default = channels.nixpkgs.mkShell {
            inherit
              (inputs.pre-commit-hooks.lib.${channels.nixpkgs.system}.run {
                src = ./.;
                hooks = import ./hooks.nix {
                  pkgs = channels.nixpkgs;
                  emacsBinaryPackage = "emacs-config.emacs";
                };
              })
              shellHook
              ;
          };

          # Add global devShells for scaffolding new projects

          pnpm = channels.nixpkgs.mkShell {
            buildInputs = [
              channels.unstable.nodejs_latest
              channels.unstable.nodePackages.pnpm
            ];
          };

          yarn = channels.nixpkgs.mkShell {
            buildInputs = [
              channels.unstable.nodejs
              channels.unstable.yarn
            ];
          };

          npm = channels.nixpkgs.mkShell {
            buildInputs = [
              channels.unstable.nodejs_latest
            ];
          };

          elixir = channels.nixpkgs.mkShell {
            buildInputs = [
              channels.unstable.elixir
            ];
          };
        };
      };

      #########################################################
      ### All other properties are passed down to the flake ###
      #########################################################

      # checks.x86_64-linux.someCheck = pkgs.hello;
      # packages.x86_64-linux.somePackage = pkgs.hello;

      overlay =
        nixpkgs.lib.composeExtensions
        (import ./pkgs/overlay.nix)
        emacsOverlay;
    };
}
