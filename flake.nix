{
  inputs = {
    utils.url = "github:numtide/flake-utils";
    flake-utils-plus.url = "github:gytis-ivaskevicius/flake-utils-plus/v1.3.1";

    home-manager.url = "github:nix-community/home-manager";

    # Emacs
    emacs-overlay.url = "github:nix-community/emacs-overlay";
    org-babel.url = "github:akirak/nix-org-babel";
    twist.url = "github:akirak/emacs-twist";
    melpa = {
      url = "github:melpa/melpa";
      flake = false;
    };
    gnu-elpa = {
      url = "git+https://git.savannah.gnu.org/git/emacs/elpa.git?ref=main";
      flake = false;
    };
    epkgs = {
      url = "github:emacsmirror/epkgs";
      flake = false;
    };
    emacs = {
      url = "github:emacs-mirror/emacs";
      flake = false;
    };

    # pre-commit
    pre-commit-hooks = {
      url = "github:cachix/pre-commit-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.flake-utils.follows = "utils";
    };
    flake-no-path = {
      url = "github:akirak/flake-no-path";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.flake-utils.follows = "utils";
      inputs.pre-commit-hooks.follows = "pre-commit-hooks";
    };
  };

  outputs =
    { self
    , nixpkgs
    , flake-utils-plus
    , utils
    , home-manager
    , ...
    } @ inputs:
    let
      inherit (builtins) removeAttrs;
      mkApp = utils.lib.mkApp;
      # pkgs = self.pkgs.x86_64-linux.nixpkgs;
    in
    flake-utils-plus.lib.mkFlake {
      inherit self inputs;

      supportedSystems = [ "x86_64-linux" ];

      channelsConfig = {
        allowBroken = false;
      };

      sharedOverlays = [
        inputs.emacs-overlay.overlay
        inputs.org-babel.overlay
        inputs.twist.overlay
        (import ./pkgs/overlay.nix)
        (import ./emacs/overlay.nix {
          inherit (inputs) twist org-babel;
          inherit (inputs) gnu-elpa melpa epkgs emacs;
        })
      ];

      # Nixpkgs flake reference to be used in the configuration.
      # Autogenerated from `inputs` by default.
      # channels.<name> = {}

      hostsDefaults = {
        system = "x86_64-linux";

        # Default modules to be passed to all hosts.
        modules = [
          ./nixos/modules/defaults.nix
        ];

        # channelName = "unstable";
      };

      #############
      ### hosts ###
      #############

      hosts.container = {
        extraArgs = {
          home = import ./hm/home.nix;
        };

        modules =
          [
            {
              boot.isContainer = true;
              networking.useDHCP = false;
              networking.firewall.allowedTCPPorts = [ ];

              services.openssh = {
                enable = true;
              };
            }
            home-manager.nixosModules.home-manager
            ./nixos/modules/default-user.nix
          ];
      };

      #############################
      ### flake outputs builder ###
      #############################

      outputsBuilder = channels:
        let
          inherit (channels.nixpkgs) system;
          inherit (channels.nixpkgs) emacsConfigurations;
          emacs-full = emacsConfigurations.full;
          emacs-basic = emacsConfigurations.basic;
          emacs-compat = emacsConfigurations.compat;

          emacsSandbox = channels.nixpkgs.callPackage ./sandbox/emacs.nix { };

          useThemeFrom = themePackage: themeName: [
            "--eval"
            "(when init-file-user (require '${themePackage}) (load-theme '${themeName} t))"
          ];
        in
        {
          packages = {
            inherit (channels.nixpkgs) github-linguist;

            inherit emacs-full;
            # Add more variants of the full profile later
            emacs = emacsSandbox emacs-basic {
              emacsArguments = useThemeFrom "doom-themes" "doom-rouge";
            };
            emacs-compat = emacsSandbox emacs-compat {
              emacsArguments = useThemeFrom "doom-themes" "doom-one";
            };
            emacs-beancount = emacsSandbox emacsConfigurations.beancount {
              emacsArguments = useThemeFrom "doom-opera-light";
              userEmacsDirectory = "$HOME/beancount/emacs-var";
              extraBubblewrapOptions = [
                "--bind"
                "$HOME/beancount"
                "$HOME/beancount"
                "--bind-try"
                "$HOME/Downloads"
                "$HOME/Downloads"
              ];
            };
          }
          //
          nixpkgs.lib.getAttrs [ "lock" "update" ] (emacs-full.admin "emacs/lock");

          # Set up a pre-commit hook by running `nix develop`.
          devShell = channels.nixpkgs.mkShell {
            inherit (inputs.pre-commit-hooks.lib.${system}.run {
              src = ./.;
              hooks = import ./hooks.nix {
                pkgs = channels.nixpkgs;
                emacs = emacs-full.emacs;
                flake-no-path = inputs.flake-no-path.packages.${system}.flake-no-path;
                emacsBinaryPackage = "emacs-full.emacs";
              };
            }) shellHook;
          };
        };

      #########################################################
      ### All other properties are passed down to the flake ###
      #########################################################

      # checks.x86_64-linux.someCheck = pkgs.hello;
      # packages.x86_64-linux.somePackage = pkgs.hello;
      overlay = import ./pkgs/overlay.nix;
      # abc = 132;
    };
}
