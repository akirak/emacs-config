* Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; no-byte-compile: t; -*-
  (require 'use-package)
  
  ;; Disable package.el
  (setq use-package-ensure-function #'ignore)
#+end_src

:CONTENTS:
- [[#performance][Performance]]
- [[#emacs][emacs]]
- [[#themes][Themes]]
- [[#helper-packages][Helper packages]]
- [[#org-mode][org-mode]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#profiling][profiling]]
:END:
** Performance                                                    :packages:
*** benchmark-init                               :profiling:initialization:
#+begin_src emacs-lisp
  (use-package benchmark-init
    :ensure t
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
  
  (use-package benchmark-init-modes
    :ensure benchmark-init
    :commands
    (benchmark-init/show-durations-tabulated
     benchmark-init/show-durations-tree))
#+end_src
*** Measuring init time                                    :initialization:
Display initialization time concisely at startup:

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collections"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
*** gcmh                                                      :performance:
#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :config
    (gcmh-mode t))
#+end_src
** emacs
#+begin_src emacs-lisp
(use-package emacs
  :init

  ;; Add an indicator if mutiple strings are read
  (advice-add #'completing-read-multiple
              :filter-args
              (defun crm-indicator (args)
                (cons (concat "[CRM] " (car args)) (cdr args))))

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  :custom
  (register-preview-delay 0))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration
*** Default font
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/base-face-family-alist
    '((default . "Cascadia Code"))
    "Alist of font families for faces."
    :type '(alist :key-type symbol
                  :value-type string)
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face . ,family) value)
                 (if (member family families)
                     (set-face-attribute face nil :family family)
                   (message "Font family %s is not installed" family)))))))
#+end_src
** Themes
No theme is set by default in this configuration.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(eval-after-load 'doom-themes (load-theme 'doom-tomorrow-night t))"
#+end_src
*** doom-themes                                                     :theme:
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t)
#+end_src
*** poet-theme                                                      :theme:
#+begin_src emacs-lisp
  (use-package poet-theme
    :ensure t)
#+end_src
** Helper packages
*** general                                                   :keybindings:
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    ;; Define a prefix key for major/minor mode-specific commands.
    (defconst akirak/mode-prefix-key "C-,"
      "Prefix key for mode-specific commands.")
    (general-create-definer akirak/bind-mode :prefix akirak/mode-prefix-key)

    ;; Use ~<C-return>~ for starting a REPL session
    (general-create-definer akirak/bind-mode-repl
      :prefix "<C-return>"))
#+end_src

Here I have defined some /definers/ for my keybinding conventions.
They are shorthands but allow changing keys later.
*** which-key                                       :usability:keybindings:
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode t)
    (which-key-setup-side-window-bottom))
#+end_src
** org-mode                                                       :packages:
** Packages                                                       :packages:
** Notes
:PROPERTIES:
:TOC:      :depth 2
:END:
*** profiling
#+BEGIN: org-ql :query "tags: profiling" :columns (heading)
| Heading        |
|----------------|
| [[benchmark-init][benchmark-init]] |
#+END:
** Footer                                                         :noexport:
# Local Variables:
# mode: org-make-toc
# no-byte-compile: t
# End:
