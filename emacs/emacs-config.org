* A Progressive Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#typography-settings][Typography settings]]
- [[#org][Org]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
  - [[#grep][Grep]]
  - [[#sh-emulation-keybindings][Sh-emulation keybindings]]
:END:
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :auto-insert
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :auto-insert (&rest entries)
     "Add ENTRIES to `auto-insert-alist'."
     `(with-eval-after-load 'autoinsert
        (dolist (entry (reverse ',entries))
          (add-to-list 'auto-insert-alist entry)))))
#+end_src
*** :compilation-error
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :compilation-error (&rest alist)
      "Add entries to the compilation error regexp alist."
      `(with-eval-after-load 'compile
         (dolist (entry (quote ,alist))
           (if (stringp (car entry))
               (add-to-list 'compilation-error-regexp-alist entry)
             (add-to-list 'compilation-error-regexp-alist (car entry))
             (add-to-list 'compilation-error-regexp-alist-alist entry))))))
#+end_src
*** :defer
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:19]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
      "Call a function at N seconds after init."
      `(add-hook 'after-init-hook
                 (lambda ()
                   (run-with-timer ,seconds nil
                                   ,(or func (setup-get 'hook)))))))
#+end_src
*** :embark
:PROPERTIES:
:CREATED_TIME: [2022-04-24 Sun 17:26]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :embark (map interactive &rest bindings)
     "Proxy or bind embark bindings."
     :indent 2
     `(with-eval-after-load 'embark
        ,@(cl-loop for (key cmd . _) in bindings
                   collect `(define-key ,map (kbd ,key)
                                        ,(if interactive
                                             `(defun ,(intern (format "_embark-%s_%s"
                                                                      interactive cmd))
                                                  (arg)
                                                (interactive ,interactive)
                                                (,cmd arg))
                                           `(quote ,cmd)))))))
#+end_src
*** :huan
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 21:38]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :huan (&rest entries)
     "Add ENTRIES to `huan-mode-symbols-alist' for the mode."
     :indent 0
     `(with-eval-after-load 'huan
        (let ((mode ',(setup-get 'mode))
              (entries ',entries))
          (if-let (cell (assq mode huan-mode-symbols-alist))
              (let ((sym (make-symbol "entries")))
                (set sym (cdr cell))
                (dolist (ent (reverse entries))
                  (add-to-list sym ent))
                (setcdr cell (symbol-value sym)))
            (push (cons mode entries)
                  huan-mode-symbols-alist))))))
#+end_src
*** :mode-repl
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:41]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :mode-repl (repl-fn)
      "Add an entry to `rtog/mode-repl-alist'."
      `(progn
         (with-eval-after-load 'repl-toggle
           (push (cons ',(setup-get 'mode) ',repl-fn)
                 rtog/mode-repl-alist))
         (add-hook ',(setup-get 'hook)
                   #'repl-toggle-mode))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
*** :reformatters
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :reformatters (&rest entries)
     "Define reformatters."
     (let ((feature (setup-get 'feature)))
       (macroexp-progn
        (mapcar (pcase-lambda (`(,name . ,args))
                  `(eval-after-load ',feature
                     (defun ,(intern (concat "akirak/reformatter-define-"
                                             (symbol-name name))) ()
                       (reformatter-define ,name ,@args))))
                entries)))))
#+end_src
*** :repeat
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 23:54]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :repeat (keymap &rest commands)
     "Set the repeat map of commands."
     :indent 1
     (dolist (cmd commands)
       (put cmd 'repeat-map keymap))))
#+end_src
*** :set
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 11:30]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))
#+end_src
*** :status
By default, settings inside =:status= clauses are not loaded.

#+begin_src emacs-lisp
  (defvar akirak/enabled-status-tags nil)

  (eval-when-compile
    (define-setup-macro :status (tag &rest progn)
      "Conditionally expand the macro."
      :indent 1
      (when (or (eq t akirak/enabled-status-tags)
                (memq tag akirak/enabled-status-tags))
        (macroexp-progn progn))))
#+end_src
** Performance                                             :packages:
# Note: Some of these should be loaded as early as possible.
*** COMMENT benchmark-init                            :profiling:initialization:ARCHIVE:
#+begin_quote
Benchmarks Emacs require and load calls
#+end_quote

#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                               :performance:
#+begin_quote
the Garbage Collector Magic Hack
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:set gcmh-verbose debug-on-error))
#+end_src
** Custom conventions
*** Prefix for mode-specific commands
#+begin_src emacs-lisp
  (defcustom akirak/mode-prefix-key "C-,"
    "Prefix for mode-specific keybindings."
    :type 'string)
#+end_src
*** <f12> as a prefix for miscellaneous commands
I use =<f12>= as a prefix for miscellaneous keybindings on the global map.

#+begin_src emacs-lisp
  (with-eval-after-load 'which-key
    (pcase-dolist (`(,key . ,description)
                   '(("c" . "capture")
                     ("c f" . "frame")
                     ("c s" . "screenshot")
                     ("c r" . "record screen")
                     ("e" . "emacs")
                     ("o" . "org")
                     ("S" . "secrets")))
      (which-key-add-keymap-based-replacements
        global-map (concat "<f12> " key) description)))
#+end_src
*** Key translation map
#+begin_src emacs-lisp
  (setup key-translation-map
    (:status opinionated
      (global-set-key (kbd "M-r") nil)
      (define-key key-translation-map (kbd "M-r") (kbd "C-x r"))

      (define-key key-translation-map (kbd "C-9") (kbd "C-x x"))

      ;; Chromebook don't have physical function keys. They substitute
      ;; Search + num for function keys, but Search + 1 is hard to press,
      ;; especially when Search and Ctrl are swapped.
      ;; This is quite annoying, so I will use M-` as <f1>.
      (define-key key-translation-map (kbd "M-`") (kbd "<f1>"))))
#+end_src
*** Window management
#+begin_src emacs-lisp
  (defcustom akirak/display-popup-window-function #'pop-to-buffer
    "Function used to display popup windows."
    :type 'function)
#+end_src
** Macro packages                                          :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
*** el-patch                                                 :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-03-09 Wed 15:26]
:END:
#+begin_quote
Future-proof your Elisp
#+end_quote

#+begin_src emacs-lisp
(setup (:package el-patch))
#+end_src
*** COMMENT fullframe                              :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:06]
:END:
#+begin_quote
Generalized automatic execution in a single frame
#+end_quote

#+begin_src emacs-lisp
(setup (:package fullframe))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/fullframe][~tomterl/fullframe - sourcehut git]].
** Built-ins
:PROPERTIES:
:SORTING_TYPE: a
:END:
# Note: These should never fail.
*** abbrev
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 21:19]
:END:

#+begin_src emacs-lisp
  (setup abbrev
    (:set save-abbrevs nil)
    (:hook-into prog-mode text-mode minibuffer-setup)
    (:global "C-M-/" #'expand-abbrev)
    (:when-loaded
      (define-abbrev-table 'global-abbrev-table
        '(("jjb" "" akirak-insert-basename)
          ("jjB" "" akirak-insert-basename-pascalcased)
          ("jjp" "" akirak-insert-project-name)
          ("jjP" "" akirak-insert-project-name-pascalcased)
          ("jlisp" "" akirak-insert-from-lisp)
          ("jdate" "" akirak-insert-iso8601-date)
          ("jcal" "" akirak-insert-iso8601-read-date)
          ("jname" "" akirak-insert-user-full-name)
          ("jmail" "" akirak-insert-user-mail-address)
          ("jorgclock" "" akirak-insert-org-clock-heading)
          ;; Acronyms
          ("wip" "WIP")
          ;; Common mistypes
          ("ort" "org")))))
#+end_src
*** autoinsert                                           :expansion:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 17:47]
:END:

#+begin_src emacs-lisp
  (setup autoinsert
    (:set auto-insert 'other
          auto-insert-query nil)
    (:with-mode auto-insert-mode
      (:hook-into after-init-hook)))
#+end_src
*** autorevert                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup autorevert
    (:set auto-revert-avoid-polling t)
    (:with-mode global-auto-revert-mode
      (:hook-into after-init-hook)))
#+end_src
*** bindings
:PROPERTIES:
:CREATED_TIME: [2022-09-09 Fri 12:22]
:END:

#+begin_src emacs-lisp
  (setup bindings
    ;; Exclude global-mode-string from mode-line-misc-info.
    ;; See the settings for mini-modeline.
    (:set mode-line-misc-info nil))
#+end_src
*** bookmark
:PROPERTIES:
:CREATED_TIME: [2022-05-14 Sat 09:53]
:END:

#+begin_src emacs-lisp
  (setup bookmark
    (defun akirak/delete-bookmark-to-here ()
      "Delete a bookmark record to the current location, if any"
      (interactive)
      (bookmark-maybe-load-default-file)
      (cl-flet
          ((remk
             (record)
             (thread-last
               (cdr record)
               (seq-filter (pcase-lambda (`(,key . ,alist))
                             (memq key '(filename
                                         handler
                                         front-context-string))))
               (seq-sort-by (lambda (record)
                              (symbol-name (car record)))
                            #'string<))))
        (let ((this (bookmark-make-record)))
          (when-let (record (seq-find (lambda (record)
                                        (equal (remk record) (remk this)))
                                      bookmark-alist))
            ;; TODO This seem to be ineffective on bookmarks created using org-bookmark-heading.
            (bookmark--remove-fringe-mark
             (bookmark-get-bookmark (car record) 'noerror))
            (bookmark-delete (car record))
            (message "Deleted \"%s\"" (car record)))))))
#+end_src
*** browse-url
:PROPERTIES:
:CREATED_TIME: [2022-04-06 Wed 17:15]
:ID:       02a91209-86f8-412b-98f3-19a56e481df0
:END:

#+begin_src emacs-lisp
  (setup browse-url
    (:status personal
      (:set browse-url-browser-function #'akirak-browse-url-external-browser
            browse-url-secondary-browser-function #'akirak-browse-url-external-browser)))
#+end_src
*** buffer.c                                     :formatting:visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:
#+begin_src emacs-lisp
  (setup buffer
    (:set buffer-file-coding-system 'utf-8
          fill-column 80
          indicate-empty-lines t
          ;; In some major modes, you should turn on truncate-lines.
          ;; They should be configured alongside individual modes.
          truncate-lines nil))
#+end_src
**** Line spacing
#+begin_src emacs-lisp
  ;; buffer.c
  (setup line-spacing
    (:with-mode (org-mode markdown-mode)
      (:local-set line-spacing 0.5))
    (:with-mode (Help-mode helpful-mode Info-mode)
      (:local-set line-spacing 0.3))
    (:with-mode (eww-mode)
      (:local-set line-spacing 0.35))
    (:with-mode (nov-mode)
      (:local-set line-spacing 0.4)))
#+end_src
**** Tab width
#+begin_src emacs-lisp
  (setup tab-width
    (:set tab-width 2)
    (:with-mode (makefile-mode)
      (:local-set tab-width 4))
    (:with-mode (js-mode typescript-mode sh-mode python-mode)
      (:local-set tab-width 2)))
#+end_src
*** calc
:PROPERTIES:
:CREATED_TIME: [2022-07-03 Sun 15:16]
:END:

#+begin_src emacs-lisp
  (setup calc
    (:global "C-c q c" #'calc))
#+end_src
*** calendar
:PROPERTIES:
:CREATED_TIME: [2022-08-12 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup calendar
    (add-to-list 'display-buffer-alist
                 '((major-mode . calendar-mode)
                   (display-buffer-in-side-window))))
#+end_src
*** callproc.c                                             :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup callproc
    (:only-if (eq system-type 'windows-nt))
    (:set shell-file-name (executable-find "bash")))
#+end_src
*** compile                                                :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup compile
    (:set compilation-ask-about-save nil
          compilation-save-buffers-predicate #'save-some-buffers-root
          compilation-auto-jump-to-first-error nil
          compilation-scroll-output t
          compilation-environment '("TERM=xterm-256color"))

    (:global "<f9>" #'recompile)

    ;; This code has been stolen from somewhere. I don't remember where, but the
    ;; same code can be found in many repositories on GitHub.
    (add-hook 'compilation-start-hook #'akirak/xterm-color-compilation-start)
    (defun akirak/xterm-color-compilation-start (proc)
      ;; We need to differentiate between compilation-mode buffers
      ;; and running as part of comint (which at this point we assume
      ;; has been configured separately for xterm-color)
      (when (eq (process-filter proc) 'compilation-filter)
        ;; This is a process associated with a compilation-mode buffer.
        ;; We may call `xterm-color-filter' before its own filter function.
        (set-process-filter
         proc
         (lambda (proc string)
           (funcall 'compilation-filter proc
                    (xterm-color-filter string)))))))
#+end_src
*** custom
:PROPERTIES:
:CREATED_TIME: [2022-09-12 Mon 15:13]
:END:
The following variable defines variables that can be saved to =custom-file=:

#+begin_src emacs-lisp
  (defconst akirak/custom-variable-whitelist
    '(auth-sources    ; Can be machine-dependent
      org-agenda-span ; Can be dependent on the work context
      ;; Work context
      user-full-name
      user-mail-address
      ;; Dynamic
      safe-local-variable-values))
#+end_src

The other variables must not be saved, and they should be put in configuration:

#+begin_src emacs-lisp
(setup custom
    (:status personal
      ;; Don't allow saving a variable that is not included in the whitelist
      (advice-add 'custom-variable-mark-to-save
                  :before
                  (defun akirak/customize-save-variable-check (widget)
                    (unless (memq (widget-value widget)
                                  akirak/custom-variable-whitelist)
                      (error "Variable %s should not be saved to custom-file"
                             (widget-value widget)))))))
#+end_src
*** desktop
#+begin_src emacs-lisp
  (setup desktop
    (:when-loaded
      ;; Use `desktop-after-read-hook' to display a dashboard.
      (add-hook 'desktop-globals-to-save 'desktop-after-read-hook)))
#+end_src
*** dired                                                    :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:47]
:END:

#+begin_src emacs-lisp
  (setup dired
    (:set dired-recursive-copies 'always
          dired-recursive-deletes 'top)
    (:mode-repl akirak-vterm-for-dir)

    (:bind "h" #'dired-up-directory)
    (:unbind "C-x M-o"))
#+end_src
*** ediff-wind                                                :diff:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup ediff-wind
    (:set ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
*** eldoc                                         :help:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:08]
:END:

#+begin_src emacs-lisp
  (setup eldoc
    (:with-hook turn-on-eldoc-mode
      (:hook-into emacs-lisp-mode))

    (:set eldoc-documentation-strategy 'eldoc-documentation-compose)
    (:global "C-c e" #'eldoc-doc-buffer))
#+end_src
*** elec-pair                      :prog_mode:text_mode:parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup elec-pair
    (:with-mode electric-pair-mode
      (:hook-into after-init-hook)))
#+end_src

While the mode is generally useful, the exception is =lispy-mode=, which overrides =self-insert-command= and conflicts with the features of the package.
*** electric                                            :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

The built-in =electric= package provides the following modes:

- [ ] =electric-indent-mode= :: Use major-mode specific indentation functions instead?
- [ ] =electric-layout-mode= :: It may be useful in some programming modes
- [ ] =electric-quote-mode= :: Maybe I'll turn it on in some specific projects

#+begin_src emacs-lisp
  (setup electric)
#+end_src
*** elisp-mode                             :Emacs__Lisp:major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 17:55]
:END:

#+begin_src emacs-lisp
  (setup elisp-mode
    (:with-mode emacs-lisp-mode
      (:huan
        ("eval-after-load" "with-eval-after-load")
        ("add-hook" "remove-hook")
        ("advice-add" "advice-remove"))
      (:hook outline-minor-mode)
      (:local-set imenu-generic-expression
                  (append lisp-imenu-generic-expression
                          `(("Misc"
                             ,(rx bol "("
                                  (or (and "c" (not (any "l")))
                                      (any "ab" "d-z"))
                                  (* (any "-" alnum))
                                  "-"
                                  "def" (+ (not (any space)))
                                  (+ (any blank))
                                  (group (+ (not (any space control "\n()")))))
                             1)
                            ("Config"
                             "^(\\(?:setup\\|use-package\\)[[:blank:]]+\\_<\\([^[:space:]]+\\)"
                             1))))
      (:compilation-error
       ;; Emacs checkdoc/byte-compile, GHC, etc.
       ;; path:line:col: error:
       (emacs-lisp "\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*\\(?:Error\\|error\\):"
                   1 2 3 (4 . 4))))

    (:auto-insert
     ("-tests?\\.el\\'" . (> ";;; -*- lexical-binding: t -*-\n\n"
                             "(require 'buttercup)\n"
                             "(require '" (replace-regexp-in-string
                                           "-tests?\\'" ""
                                           (file-name-base (buffer-file-name)))
                             ")\n\n"
                             _ "\n\n"
                             "(provide '" (file-name-base (buffer-file-name)) ")\n"))
     ("\\.el\\'" . (> ";;; "
                      (file-name-nondirectory (or buffer-file-name (buffer-name)))
                      " --- " _
                      " -*- lexical-binding: t -*-\n"
                      "\n\n\n"
                      "(provide '"
                      (file-name-base (or buffer-file-name (buffer-name)))
                      ")\n"
                      ";;; "
                      (file-name-nondirectory (or buffer-file-name (buffer-name)))
                      " ends here"))
     ("/recipes/.+\\'" . (> "(" (file-name-nondirectory (buffer-file-name))
                            " :fetcher github :repo \"" _ "\")")))

    (defun akirak/eval-buffer-or-load-file ()
      (interactive)
      (when (eq major-mode 'emacs-lisp-mode)
        (if buffer-file-name
            (load-file buffer-file-name)
          (eval-buffer)))))
#+end_src
*** executable
:PROPERTIES:
:CREATED_TIME: [2022-07-09 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup executable
    (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))
#+end_src
*** fileio.c                                                 :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fileio
    (:set delete-by-moving-to-trash t))
#+end_src
*** filelock.c                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup filelock
    ;; lock files will kill `npm start'
    (:set create-lockfiles nil))
#+end_src
*** files                                                    :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup files
    (:set backup-by-copying t
          backup-directory-alist
          `(("." . ,(locate-user-emacs-file "backup/")))
          delete-old-versions t
          version-control t
          view-read-only t
          auto-mode-case-fold nil)

    (:status opinionated
      (:global "<f5>" #'revert-buffer)))
#+end_src

- Use =akirak-files-ensure-abbrev-list= to update =directory-abbrev-alist=. (see [[*akirak][akirak]]).

*** find-func
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:18]
:END:

#+begin_src emacs-lisp
  (setup find-func
    (:global "C-x M-l" #'find-library))
#+end_src
*** flymake                                            :development:
:PROPERTIES:
:CREATED_TIME: [2022-03-19 Sat 16:33]
:END:

#+begin_src emacs-lisp
  (setup flymake
    (:bind "M-g M-n" #'flymake-goto-next-error
           "M-g M-p" #'flymake-goto-prev-error))
#+end_src
*** flyspell
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup flyspell
    (:nixpkgs "hunspell")
    (:hook-into markdown-mode
                ;; For org-mode, set up hooks in .dir-locals.el of individual
                ;; projects
                git-commit-mode-hook)
    (:unbind "C-," "C-." "C-;" "C-M-i" "C-c $"))
#+end_src
*** fns.c and xfns.c                                            :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fns
    (:set use-dialog-box nil))

  (setup xfns
    (:set x-gtk-use-system-tooltips nil))
#+end_src
*** frame                                                   :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup frame
    (blink-cursor-mode -1)
    (set-frame-parameter nil 'alpha '(98 . 96))
    ;; suspend-frame is annoying, so I will disable it
    (:global "C-z" #'ignore))
#+end_src
*** help
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup help
    (define-key help-map (kbd "C-h") nil))
#+end_src
*** hl-line                                                 :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup hl-line
    (:with-mode hl-line-mode
      (:hook-into prog-mode-hook
                  text-mode-hook)))
#+end_src
*** image
:PROPERTIES:
:CREATED_TIME: [2022-04-27 Wed 07:16]
:END:

#+begin_src emacs-lisp
  (setup image
    (:nixpkgs "graphicsmagick")
    (:set image-use-external-converter t))
#+end_src
*** indent
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:08]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:set tab-always-indent 'complete)

    ;; Unbind `tab-to-tab-stop'
    (:global "M-i" nil))
#+end_src
*** indent.c                                            :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:set indent-tabs-mode nil)

    (defun akirak/turn-on-indent-tabs-mode ()
      (interactive)
      (setq indent-tabs-mode 1))

    (dolist (mode-hook '(makefile-mode-hook))
      (add-hook mode-hook 'akirak/turn-on-indent-tabs-mode)))
#+end_src
*** js-jsx-mode
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 23:14]
:END:

#+begin_src emacs-lisp
  (setup js-jsx-mode
    (:file-match "\\.jsx\\'")

    (:hook (defun akirak/setup-js-jsx-mode ()
             (require 'sgml-mode)))

    (:with-feature js
      (:bind "C-c C-e" #'akirak-sgml-close-tag)))
#+end_src
*** js-mode
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 23:43]
:END:

#+begin_src emacs-lisp
  (setup js-mode
    (:file-match "\\.c?js\\'")
    (:set js-indent-level 2))
#+end_src
*** keymap.c                                           :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-03-19 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup keymap.c
    (:status opinionated
      (:with-map minibuffer-local-map
        (:bind "C-u" #'backward-kill-sentence
               "C-w" #'backward-kill-word))))
#+end_src
*** menu-bar
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:22]
:END:

#+begin_src emacs-lisp
  (setup menu-bar
    (:status opinionated
      (:with-map ctl-x-map
        ;; I don't need kill-buffer when I have consult-buffer
        (:bind "k" #'kill-this-buffer))
      (:global "<f12> <f12>" #'toggle-debug-on-error)))
#+end_src
*** minibuf.c                                           :minibuffer:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:06]
:END:

Use the recommended settings for vertico.

#+begin_src emacs-lisp
  (setup minibuf.c
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

*** minibuffer                              :minibuffer:keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:05]
:END:

#+begin_src emacs-lisp
  (setup minibuffer
    (:set completion-category-defaults nil
          completion-category-overrides
          '((file (styles partial-completion))
            (url (styles substring))))

    (define-key minibuffer-mode-map
                "~"
                (defun akirak/minibuffer-tilde ()
                  "During `find-file', replace the minibuffer input with the home directory."
                  (interactive)
                  (if minibuffer-completing-file-name
                      (progn
                        (delete-region (minibuffer-prompt-end) (point-max))
                        (goto-char (point-max))
                        (insert "~/"))
                    (insert "~"))))
    (define-key minibuffer-mode-map
                "/"
                (defun akirak/minibuffer-slash ()
                  "During `find-file', replace the minibuffer input with the root directory."
                  (interactive)
                  (if (and minibuffer-completing-file-name
                           (eq ?/ (char-after (1- (point)))))
                      (progn
                        (delete-region (minibuffer-prompt-end) (point-max))
                        (goto-char (point-max))
                        (insert "/"))
                    (insert "/")))))
#+end_src
*** mule
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    (set-language-environment "UTF-8"))
#+end_src
*** outline                                                :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup outline
    (:with-mode outline-minor-mode
      (:status opinionated
        (:bind "M-RET" #'outline-insert-heading))))
#+end_src
*** paragraphs                                                :text:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paragraphs
    (:set sentence-end-double-space nil))
#+end_src
*** paren                                              :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paren
    (:with-mode show-paren-mode
      (:hook-into after-init-hook)))
#+end_src
*** pixel-scroll
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 17:27]
:END:

#+begin_src emacs-lisp
  (setup pixel-scroll
    (:only-if (version<= "29" emacs-version)
              (:with-mode pixel-scroll-precision-mode
                ;; TODO: Find a better way to hook the minor mode
                (:hook-into find-file-hook
                            eww-mode-hook
                            help-mode-hook))))
#+end_src
*** process.c                                              :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup process
    ;; Expand read-process-output-max for lsp-mode
    (:set read-process-output-max (* 1024 1024)))
#+end_src
*** profiler                                       :Emacs:profiling:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 07:49]
:END:

#+begin_src emacs-lisp
  (setup profiler
    (defun akirak/profiler-toggle ()
      (interactive)
      (require 'profiler)
      (if (profiler-running-p)
          (progn
            (profiler-report)
            (profiler-stop)
            (profiler-reset))
        (call-interactively #'profiler-start)))

    (:status opinionated
      (:global "<f12> e p" akirak/profiler-toggle)))
#+end_src
*** project
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 17:00]
:END:
#+begin_quote
Operations on the current project
#+end_quote

#+begin_src emacs-lisp
  (setup (:package project)
    (:status opinionated
      (:when-loaded
        (:with-map ctl-x-map
          ;; Don't use c-x p for the prefix map.
          (:unbind "p")
          ;; Rebind the key
          (:bind "p" #'akirak-consult-project-file)))))
#+end_src
**** akirak-project
#+begin_src emacs-lisp
  (setup akirak-project
    (run-with-idle-timer 180 nil #'akirak-project-rescan)

    (with-eval-after-load "bindings"
      (define-key ctl-x-x-map "p" #'akirak-project-switch-to-recent-buffer)
      (define-key ctl-x-x-map "o" #'akirak-project-switch-between-impl-and-test)
      (define-key ctl-x-x-map "C" #'akirak-project-find-css)
      (define-key ctl-x-x-map "T" #'akirak-project-find-test)
      (define-key ctl-x-x-map "S" #'akirak-project-find-stories))

    (with-eval-after-load 'embark
      (define-key embark-file-map (kbd "+") #'akirak-project-init)))
#+end_src
*** prolog                                      :major__mode:Prolog:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:33]
:END:

#+begin_src emacs-lisp
  (setup prolog
    (:file-match "\\.pl\\'"))
#+end_src
*** re-builder                                              :regexp:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 21:01]
:END:

#+begin_src emacs-lisp
  (setup re-builder
    (:set reb-re-syntax 'rx)

    (advice-add 'reb-empty-regexp
                :override
                (lambda ()
                  (cond ((reb-lisp-syntax-p) (el-patch-swap "'()" "`(and bol)"))
                        (t "")))))
#+end_src
*** recentf                                          :history:files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup recentf
    (:hook-into after-init-hook)
    (:set recentf-max-saved-items 1000
          recentf-auto-cleanup 'never))
#+end_src
*** register
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:05]
:END:

#+begin_src emacs-lisp
  (setup register
    ;; Show the register preview immediately
    (:set register-preview-delay 0))
#+end_src
*** repeat
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 23:53]
:END:

#+begin_src emacs-lisp
  (setup repeat
    (:hook-into after-init-hook)
    (:set repeat-echo-function #'ignore))
#+end_src
*** savehist                                               :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:08]
:END:

#+begin_src emacs-lisp
  (setup savehist
    (:hook-into after-init-hook))
#+end_src

This is a recommended setting for use with vertico. See https://github.com/minad/vertico#configuration.
*** saveplace                                              :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup saveplace
    (:with-mode save-place-mode
      (:hook-into after-init-hook)))
#+end_src
*** sgml-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 21:08]
:END:

#+begin_src emacs-lisp
  (setup sgml-mode
    (:with-map html-mode-map
      ;; I don't use facemenu commands, so save M-o
      (:unbind "M-o"))

    (:with-map sgml-mode-map
      (:bind "C-j" #'newline-and-indent
             [remap sgml-close-tag] #'akirak-sgml-close-tag))

    (defun akirak-sgml-close-tag ()
      (interactive)
      (let ((tag (car (save-excursion
                        (sgml-get-context)))))
        (when (and tag (sgml-tag-p tag))
          (if (and (> (point) (sgml-tag-start tag))
                   (< (point) (sgml-tag-end tag)))
              (progn
                (goto-char (sgml-tag-end tag))
                (save-excursion
                  (sgml-close-tag)))
            (sgml-close-tag))))))
#+end_src
*** shr
:PROPERTIES:
:CREATED_TIME: [2022-04-05 Tue 23:13]
:END:

#+begin_src emacs-lisp
  (setup shr
    (:set shr-bullet " ‣ "))
#+end_src
*** simple                                      :formatting:writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup simple
    (:set suggest-key-bindings nil)

    (:global [remap count-words-region] #'akirak/count-words-dwim
             [remap delete-horizontal-space] #'cycle-spacing
             [remap upcase-word] #'upcase-dwim
             [remap downcase-word] #'downcase-dwim
             [remap capitalize-word] #'capitalize-dwim)

    (defun akirak/count-words-dwim ()
      (interactive)
      (save-restriction
        (when (derived-mode-p 'org-mode)
          (narrow-to-region (save-excursion
                              (org-back-to-heading)
                              (org-end-of-meta-data t)
                              (point))
                            (save-excursion
                              (org-end-of-subtree)
                              (when (looking-at (rx bol))
                                (end-of-line 0))
                              (point))))
        (call-interactively #'count-words)))

    (:status opinionated
      (:global "C-w"
               (defun akirak/kill-region-or-backward-kill-word (&optional arg)
                 "If a region is active, run `kill-region'. Otherwise, run `backward-kill-word'."
                 (interactive "p")
                 (if (region-active-p)
                     (kill-region (region-beginning) (region-end))
                   (backward-kill-word arg)))
               ;; In place of zap-to-char
               "M-z" #'zap-up-to-char)
      (:with-mode prog-mode
        (:bind "C-a"
               (defun akirak/back-to-indentation-or-bol ()
                 (interactive)
                 (if (or (looking-at "^")
                         (string-match-p (rx (not (any space)))
                                         (buffer-substring-no-properties
                                          (line-beginning-position)
                                          (point))))
                     (back-to-indentation)
                   (beginning-of-line)))))))
#+end_src
*** startup
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 19:45]
:END:
#+begin_src emacs-lisp
  (setup startup
    (:set inihibit-startup-screen t
          initial-buffer-choice t
          initial-scratch-message nil
          initial-major-mode 'fundamental-mode))
#+end_src

=*scratch*= buffer is shown at startup.
You can set =initial-buffer-choice= to a function or a buffer name depending on the context.
**** Initialization time
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collection(s)"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
*** subr                                                        :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup subr
    (fset 'yes-or-no-p 'y-or-n-p)

    (:status opinionated
      ;; (:global "C-h" 'backward-delete-char)
      ))
#+end_src

=C-h= is one of the sh-emulation bindings.
*** tab-bar
:PROPERTIES:
:CREATED_TIME: [2022-09-13 Tue 17:28]
:END:

#+begin_src emacs-lisp
  (setup tab-bar
    (:global "<C-right>" #'tab-next
             "<C-left>" #'tab-previous
             "<C-up>" #'tab-bar-new-tab
             "<C-down>" #'tab-bar-close-tab
             "C-<f2>" #'tab-bar-rename-tab))
#+end_src
*** tempo
:PROPERTIES:
:CREATED_TIME: [2022-08-09 Tue 23:30]
:END:

#+begin_src emacs-lisp
  (setup tempo
    (advice-add 'tempo-insert-prompt-compat
                :before
                (defun akirak/tempo-bind-tab (&rest _args)
                  (local-set-key [tab] #'akirak/tempo-forward-mark)))

    (defun akirak/tempo-forward-mark ()
      (interactive)
      (unless (tempo-forward-mark)
        (local-unset-key [tab]))))
#+end_src
*** terminal.c                                                  :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup terminal
    (:set ring-bell-function 'ignore))
#+end_src
*** tooltip                                                     :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup tooltip
    (tooltip-mode -1))
#+end_src
*** transient
:PROPERTIES:
:CREATED_TIME: [2022-04-26 Tue 08:51]
:END:
#+begin_quote
Transient commands
#+end_quote

#+begin_src emacs-lisp
  (setup (:package transient))
#+end_src

Because transient is developed by the maintainer of magit, it is better to update them together.
Thus I will explicitly install this package rather than using the built-in version.
*** vc-hooks                                                    :VC:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup vc-hooks
    (:set vc-follow-symlinks t
          vc-make-backup-files t))
#+end_src
*** view                                                :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup view
    (:set view-inhibit-help-message t)

    (:with-map view-mode-map
      (:bind
       [remap scroll-up-command] #'View-scroll-half-page-forward
       [remap scroll-down-command] #'View-scroll-half-page-backward)))
#+end_src
*** which-func
:PROPERTIES:
:CREATED_TIME: [2022-09-09 Fri 12:28]
:END:

#+begin_src emacs-lisp
  (setup which-func
    (:with-mode which-function-mode
      (:hook-into prog-mode-hook
                  conf-mode-hook)))
#+end_src
*** whitespace                                   :visual:formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup whitespace
    (:set whitespace-style
          '(face trailing missing-newline-at-eof tab-mark))
    (:hook-into prog-mode
                text-mode
                conf-mode
                sgml-mode)

    (:status theme
      (:set whitespace-trailing
            '(((t (:underline (:color "firebrick"
                                      :style wave
                                      :position nil))))))))
#+end_src
*** COMMENT windmove                                       :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 20:16]
:END:

#+begin_src emacs-lisp
  (setup windmove
    (:status opinionated
      (add-hook 'after-init-hook
                (defun akirak/setup-windmove ()
                  (windmove-default-keybindings 'control)))

      ;; extra keybindings
      ;; See also windswap
      (:global "C-c [" #'windmove-left
               "C-c ]" #'windmove-right)))
#+end_src
*** window                                              :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup window
    (:set recenter-positions '(top middle bottom))

    (defun akirak/scroll-half-height (&optional window)
      (/ (1- (window-height (or window (selected-window)))) 2))

    (let ((modes '(help-mode
                   helpful-mode
                   devdocs-mode
                   ghelp-page-mode)))
      (add-to-list 'display-buffer-alist
                   `((or ,@(mapcar (lambda (mode) (cons 'major-mode mode))
                                   modes))
                     display-buffer-reuse-mode-window
                     mode ,@modes)
                   t))

    (:global
     "C-x c" #'akirak-window-raise-below-window
     ;; TODO: scroll-other-window and scroll-other-window-down
     [remap scroll-up-command]
     (defun akirak/scroll-half-page-forward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-up arg)
         (scroll-up (akirak/scroll-half-height))))
     [remap scroll-down-command]
     (defun akirak/scroll-half-page-backward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-down arg)
         (scroll-down (akirak/scroll-half-height))))))
#+end_src
*** winner                                         :history:windows:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup winner
    (:hook-into after-init-hook)

    (:status opinionated
      (:with-map ctl-x-map
        (:bind "," #'winner-undo
               "." #'winner-redo))
      (:repeat ctl-x-map
        winner-undo)))
#+end_src
*** woman
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:16]
:END:

#+begin_src emacs-lisp
  (setup woman
    (:global "<f1> M-m" #'woman))
#+end_src
*** xdisp.c
:PROPERTIES:
:CREATED_TIME: [2022-01-09 Sun 23:22]
:END:

#+begin_src emacs-lisp
  (setup xdisp
    ;; I have never encountered a situation where I need to deal with R-L
    ;; direction so far
    (:set bidi-inhibit-bpa t
          bidi-display-reordering 'left-to-right
          bidi-paragraph-direction 'left-to-right))
#+end_src
** Typography settings                                       :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.

No theme is set by default.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(when init-file-user (require 'doom-themes) (load-theme 'doom-tomorrow-night t))"
#+end_src
*** Font families
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/font-family-alist
    '((default "Cascadia Code")
      (fixed-pitch "Cascadia Code")
      (variable-pitch "Inter")
      (kana "Source Han Sans HC" :fontset t)
      (han "Source Han Sans HC" :fontset t))
    "Alist of font families for faces."
    :type '(repeat (list symbol
                         string
                         (plist :inline t
                                :options
                                (((const :fontset)
                                  (choice (const :tag "Default" t)
                                          (string :tag "Name of a fontset")))))))
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face ,family . ,plist) value)
                 (if (member family families)
                     (if-let (fontset (plist-get plist :fontset))
                         (set-fontset-font (if (stringp fontset)
                                               fontset
                                             "fontset-default")
                                           face family)
                       (set-face-attribute face nil :family family))
                   (message "Font family %s is not installed" family)
                   (delq (assq face value) value)
                   (set symbol value)))))))

  (eval-after-load 'outline
    (defun akirak/set-outline-families ()
      (when-let (family (cadr (assq 'variable-pitch akirak/font-family-alist)))
        (dolist (x '(outline-1
                     outline-2
                     outline-3
                     outline-4
                     outline-5
                     outline-6
                     outline-7
                     outline-8))
          (set-face-attribute x nil :family family)))))

  (eval-after-load 'org
    (defun akirak/set-org-faces ()
      (set-face-attribute 'org-tag nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-todo nil :inherit 'fixed-pitch)))
#+end_src
*** Font size and line spacing
Override font heights for certain faces.

I think it would be better to create my own theme, but I don't have enough time for it.

#+begin_src emacs-lisp
  (defcustom akirak/font-height 107
    "Default height of the font."
    :group 'akirak
    :type 'integer
    :set (lambda (sym value)
           (set sym value)
           (set-face-attribute 'default nil :height value)))

  ;; In Emacs 29.1, the default height of `variable-pitch-text' is 1.1, but it
  ;; should be the same as other text, especially in a mixed pitch environment.
  (set-face-attribute 'variable-pitch-text nil :height 1.0)

  ;; (eval-after-load 'outline
  ;;   (defun akirak/apply-outline-font-heights ()
  ;;     (set-face-attribute 'outline-1 nil :height 1.54)
  ;;     (set-face-attribute 'outline-2 nil :height 1.41)
  ;;     (set-face-attribute 'outline-3 nil :height 1.3)
  ;;     (set-face-attribute 'outline-4 nil :height 1.19)
  ;;     (set-face-attribute 'outline-5 nil :height 1.1)
  ;;     (set-face-attribute 'outline-6 nil :height 1.07)
  ;;     (set-face-attribute 'outline-7 nil :height 1.03)
  ;;     (set-face-attribute 'outline-8 nil :height 1.0)))

  (eval-after-load 'shr
    (defun akirak/apply-shr-font-heights ()
      (set-face-attribute 'shr-text nil :height 1.15)
      (set-face-attribute 'shr-h1 nil :height 1.54)
      (set-face-attribute 'shr-h2 nil :height 1.45)
      (set-face-attribute 'shr-h3 nil :height 1.4)
      (set-face-attribute 'shr-h4 nil :height 1.33)
      (set-face-attribute 'shr-h5 nil :height 1.2)
      (set-face-attribute 'shr-h6 nil :height 1.2)))

  (eval-after-load 'org
    (defun akirak/apply-org-font-heights ()
      (set-face-attribute 'org-tag nil :height (ceiling (* 1.05 akirak/font-height)))))
#+end_src
*** Other outline styles (e.g. colors)
#+begin_src emacs-lisp
  (with-eval-after-load 'shr
    ;; Inherit styles from org headings.
    ;; The result is dependent on the theme.
    (pcase-dolist (`(,face . ,parent)
                   '((shr-h1 . org-level-1)
                     (shr-h2 . org-level-2)
                     (shr-h3 . org-level-3)
                     (shr-h4 . org-level-4)
                     (shr-h5 . org-level-5)
                     (shr-h6 . org-level-6)))
      (set-face-attribute face nil :inherit parent)))
#+end_src
*** Width and wrap
#+begin_src emacs-lisp
  (setq akirak/default-body-width 86)
#+end_src
** Org                                                     :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
Embrace Org as a common document format for Emacs.
*** citar                                             :bibliography:
:PROPERTIES:
:CREATED_TIME: [2022-02-23 Wed 23:59]
:END:
#+begin_quote
Citation-related commands for org, latex, markdown
#+end_quote

#+begin_src emacs-lisp
(setup (:package citar))
#+end_src
*** doct                                                   :capture:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:08]
:END:
#+begin_quote
DOCT: Declarative Org capture templates
[[https://github.com/progfolio/doct]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package doct))
#+end_src
*** ob-mermaid
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 13:53]
:END:
#+begin_quote
org-babel support for mermaid evaluation
[[https://github.com/arnm/ob-mermaid]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package ob-mermaid))
#+end_src
*** ob-restclient
:PROPERTIES:
:CREATED_TIME: [2022-06-14 Tue 18:27]
:END:
#+begin_quote
org-babel functions for restclient-mode
#+end_quote

#+begin_src emacs-lisp
(setup (:package ob-restclient))
#+end_src
*** org
#+begin_quote
Outline-based notes management and organizer
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org)
    (:with-mode org-mode
      (:set org-log-done 'time
            org-log-into-drawer t
            org-startup-folded 'content
            ;; If necessary, set up startup indent in individual files
            org-startup-indented nil
            org-startup-truncated nil
            org-enforce-todo-dependencies t
            org-use-speed-commands t
            ;; Enlarge for olivetti-mode
            org-tags-column -80
            org-track-ordered-property-with-tag t
            org-extend-today-until 5
            ;; https://yiufung.net/post/org-mode-hidden-gems-pt1/
            org-cycle-separator-lines 0
            org-blank-before-new-entry '((heading . nil)
                                         (plain-list-item . auto))
            org-imenu-depth 6
            ;; Prevent an annoying behaviour probably due to org's bug.
            org-link-search-must-match-exact-headline t
            org-catch-invisible-edits 'show-and-error
            ;; Prevent from saving org-refile and org-capture locations to bookmarks
            org-bookmark-names-plist nil)

      (advice-add #'org-insert-heading-respect-content
                  :around #'akirak-org-ad-around-insert-heading)
      (advice-add #'org-insert-todo-heading-respect-content
                  :around #'akirak-org-ad-around-insert-heading)
      (advice-add 'org-meta-return
                  :around #'akirak-org-meta-return-split-block-advice)
      (:hook #'akirak-org-protected-mode)

      (:global "C-c o" #'org-open-at-point-global)

      (:when-loaded
        (add-to-list 'display-buffer-alist
                     '("\\*Org Select\\*"
                       (display-buffer-in-side-window
                        '((side . bottom))))
                     t)
        (setq org-structure-template-alist
              (seq-sort-by #'car #'string-collate-lessp
                           (cl-remove-duplicates
                            (append '(("d" . "definition")
                                      ("t" . "toc"))
                                    org-structure-template-alist)
                            :key #'car
                            :test #'equal)))

        (require 'el-patch)
        (el-patch-defun org-add-log-note (&optional _purpose)
          "Pop up a window for taking a note, and add this note later."
          (remove-hook 'post-command-hook 'org-add-log-note)
          (setq org-log-setup nil)
          (setq org-log-note-window-configuration (current-window-configuration))
          (el-patch-remove (delete-other-windows))
          (move-marker org-log-note-return-to (point))
          (pop-to-buffer-same-window (marker-buffer org-log-note-marker))
          (goto-char org-log-note-marker)
          (org-switch-to-buffer-other-window "*Org Note*")
          (erase-buffer)
          (if (memq org-log-note-how '(time state))
              (org-store-log-note)
            (let ((org-inhibit-startup t)) (org-mode))
            (insert (format "# Insert note for %s.
  # Finish with C-c C-c, or cancel with C-c C-k.\n\n"
                            (cl-case org-log-note-purpose
                              (clock-out "stopped clock")
                              (done "closed todo item")
                              (reschedule "rescheduling")
                              (delschedule "no longer scheduled")
                              (redeadline "changing deadline")
                              (deldeadline "removing deadline")
                              (refile "refiling")
                              (note "this entry")
                              (state
                               (format "state change from \"%s\" to \"%s\""
                                       (or org-log-note-previous-state "")
                                       (or org-log-note-state "")))
                              (t (error "This should not happen")))))
            (when org-log-note-extra (insert org-log-note-extra))
            (setq-local org-finish-function 'org-store-log-note)
            (run-hooks 'org-log-buffer-setup-hook))))))
#+end_src
**** org-modules
#+begin_src emacs-lisp
  (setq org-modules
        '(org-id
          org-clock
          org-crypt
          ;; Exporters
          ox-gfm
          ;; Built-in link types I need
          ol-info
          ol-eww
          ;; Ensure the library is used when creating a bookmark
          org-bookmark-heading
          ;; See fanyi
          ol-fanyi
          ))
#+end_src
**** Completion
#+begin_src emacs-lisp
  (setup org-mode
    ;; When `org-tag-persistent-alist' is non-nil,
    ;; `org-current-tag-alist' is set, and tags from
    ;; `org-get-buffer-tags' are unavailable in completion.
    ;;
    ;; To provide non-persistent tags, enable this option to
    ;; feed tags from all agenda files.
    ;;
    ;; This will be safe, since I use categories instead of
    ;; tags to identify work projects.
    (:set org-complete-tags-always-offer-all-agenda-tags t)

    ;; https://emacs.stackexchange.com/questions/21171/company-mode-completion-for-org-keywords
    (:hook (defun akirak-org-add-completion-at-point ()
             (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point
                       nil t))))
#+end_src
**** Display settings
#+begin_src emacs-lisp
  (setup org
    ;; Based on https://lepisma.xyz/2017/10/28/ricing-org-mode/
    (:set org-ellipsis " ⌄ "
          org-pretty-entities t
          org-hide-emphasis-markers nil
          org-hide-leading-stars nil
          org-fontify-whole-heading-line t
          org-fontify-done-headline nil
          org-fontify-quote-and-verse-blocks t)

    (:when-loaded
      ;; This evaluation is a bit slow, so defer it to the library load time.
      org-image-actual-width (ignore-errors
                               (* 80 (/ (frame-text-width)
                                        (frame-width))))))
#+end_src
**** Keybindings
#+begin_src emacs-lisp
  (setup org
    (:with-mode org-mode
      (:status opinionated
        (:set org-special-ctrl-a/e t
              org-M-RET-may-split-line nil)

        (:hook #'akirak-org-eldoc-setup)

        (:global "M-g h" #'akirak-org-avy-heading
                 "<S-menu>" #'akirak-org-clocked-entry-or-agenda)

        (:unbind "C-'"
                 ;; I don't use any of these bindings and want to use them for other purposes
                 "C-c ["
                 "C-c ]")
        (:bind akirak/mode-prefix-key (lookup-key org-mode-map (kbd "C-c C-x"))
               "<" #'akirak-org-angle-open
               "[" #'akirak-org-square-open
               "*" #'akirak-org-bold
               "/" #'akirak-org-italic
               "_" #'akirak-org-underlined
               "=" #'akirak-org-verbatim
               "~" #'akirak-org-code
               "+" #'akirak-org-strike-through
               "C-c b" #'akirak-org-select-region-dwim
               "C-c C-x h" #'org-edit-headline
               "C-c C-x t" #'akirak-org-table-create-or-edit
               "C-c C-x y" #'akirak-org-yank-into-new-block
               "C-c C-x ' c" #'akirak-org-avy-clone-subtree
               "C-c C-x ' r" #'avy-org-refile-as-child
               "C-c C-x C-w" #'org-cut-subtree
               ;; M-up/down/left/right is unavailable on Chromebooks, so I need
               ;; alternative bindings for commands bound on those keys.
               "M-n" #'org-metadown
               "M-p" #'org-metaup
               "M-H" #'org-shiftmetaleft
               "M-L" #'org-shiftmetaright
               "M-g a" (defun akirak/org-goto-beginnning-of-content ()
                         (interactive)
                         (org-back-to-heading)
                         (org-end-of-meta-data t)
                         (when (org-at-heading-p)
                           (org-open-line 1)))
               "M-g e" (defun akirak/org-goto-before-next-heading ()
                         (interactive)
                         (org-next-visible-heading 1)
                         (re-search-backward (rx (+ (any "\n"))) nil t))
               "C-M-u" (defun akirak/org-up-element ()
                         (interactive)
                         (org-up-element)
                         (org-show-entry)))

        (:with-map org-read-date-minibuffer-local-map
          (:bind "C-p" (defun akirak/org-calendar-previous-week ()
                         (interactive)
                         (org-eval-in-calendar '(calendar-forward-week -1)))
                 "C-n" (defun akirak/org-calendar-next-week ()
                         (interactive)
                         (org-eval-in-calendar '(calendar-forward-week 1)))
                 "<tab>" (defun akirak/org-calendar-next-day ()
                           (interactive)
                           (org-eval-in-calendar '(calendar-forward-day 1)))
                 "<S-iso-lefttab>" (defun akirak/org-calendar-previous-day ()
                                     (interactive)
                                     (org-eval-in-calendar '(calendar-forward-day -1))))))))
#+end_src
**** org-agenda
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:12]
:END:

#+begin_src emacs-lisp
  (setup org-agenda
    (:set org-agenda-start-with-clockreport-mode nil
          org-agenda-remove-tags nil
          org-agenda-use-tag-inheritance t
          org-agenda-sticky nil
          org-agenda-restore-windows-after-quit t
          org-agenda-window-setup 'current-window)
    (:local-set truncate-lines t)

    (:global "<f12> o a" #'org-agenda)
    (define-key help-map (kbd "M-a")
                (defun akirak/org-default-agenda ()
                  (interactive)
                  (org-agenda nil "a")))

    ;; A function advice to prevent the default behavior which run
    ;; `delete-other-windows' to show a completion window.
    (advice-add 'delete-other-windows
                :before-while
                (defun akirak/org-allow-delete-other-windows-p (&rest _args)
                  (not (memq this-command '(org-todo
                                            org-agenda-todo
                                            org-agenda)))))

    (:status personal
      ;; Remove the category column from agenda
      (:set org-agenda-prefix-format '((agenda . " %i %?-12t% s")
                                       (todo . " %i %-12:c")
                                       (tags . " %i %-12:c")
                                       (search . " %i %-12:c")))))
#+end_src
**** org-babel (ob)
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:37]
:END:

#+begin_src emacs-lisp
  (setup ob
    (:set org-confirm-babel-evaluate nil
          org-babel-load-languages
          '((shell . t)
            (emacs-lisp . t)
            (restclient . t)
            (mermaid . t)
            (sqlite . t))))
#+end_src
**** org-capture
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:

#+begin_src emacs-lisp
  (setup org-capture
    (add-hook 'org-capture-prepare-finalize-hook
              (defun akirak/org-capture-maybe-fill-headline ()
                "Edit the headline if it is missing."
                (goto-char (point-min))
                (let ((headline (org-get-heading t t t t)))
                  (when (string-empty-p headline)
                    (org-edit-headline)))))

    (:when-loaded
      (require 'el-patch)
      (el-patch-defun org-capture-place-template (&optional inhibit-wconf-store)
        "Insert the template at the target location, and display the buffer.
  When INHIBIT-WCONF-STORE is non-nil, don't store the window configuration, as it
  may have been stored before."
        (unless inhibit-wconf-store
          (org-capture-put :return-to-wconf (current-window-configuration)))
        (el-patch-remove (delete-other-windows))
        (org-switch-to-buffer-other-window
         (org-capture-get-indirect-buffer (org-capture-get :buffer) "CAPTURE"))
        (widen)
        (org-show-all)
        (goto-char (org-capture-get :pos))
        (setq-local outline-level 'org-outline-level)
        (pcase (org-capture-get :type)
          ((or `nil `entry) (org-capture-place-entry))
          (`table-line (org-capture-place-table-line))
          (`plain (org-capture-place-plain-text))
          (`item (org-capture-place-item))
          (`checkitem (org-capture-place-item)))
        (setq-local org-capture-current-plist org-capture-plist)
        (org-capture-mode 1))))
#+end_src
**** org-clock
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:13]
:END:

#+begin_src emacs-lisp
  (setup org-clock
    (:set org-clock-history-length 20
          org-clock-goto-may-find-recent-task nil
          org-clock-mode-line-total 'today
          org-clock-out-remove-zero-time-clocks t
          org-clock-persist t
          org-clock-persist-query-resume nil
          ;; Set for mini-modeline
          org-clock-string-limit 40))
#+end_src
**** org-habit
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:15]
:END:

#+begin_src emacs-lisp
  (setup org-habit
    (:set org-habit-following-days 7
          org-habit-graph-column 55
          org-habit-preceding-days 14
          org-habit-scheduled-past-days 7
          org-habit-show-done-always-green t))
#+end_src
**** org-id
#+begin_src emacs-lisp
  (setup org-id
    (:set org-id-link-to-org-use-id t))
#+end_src
**** org-link (ol)
#+begin_src emacs-lisp
  (setup ol
    (:status opinionated
      (:global "C-c l" #'org-store-link)))
#+end_src
**** org-refile
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:15]
:END:

#+begin_src emacs-lisp
  (setup org-refile
    (:set org-log-refile nil
          org-refile-targets '((nil :maxlevel . 99)
                               (org-agenda-files :maxlevel . 99))
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-use-outline-path 'file))
#+end_src
**** org-src
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:16]
:END:

#+begin_src emacs-lisp
  (setup org-src
    (:set org-src-tab-acts-natively t
          org-src-window-setup 'current-window))
#+end_src
**** Tags
#+begin_src emacs-lisp
  (setup org-tags
    (:set org-group-tags t
          org-tags-exclude-from-inheritance '("ORDERED" "crypt")))
#+end_src
*** orgabilize
:PROPERTIES:
:CREATED_TIME: [2022-04-15 Fri 23:59]
:END:
#+begin_quote
Converts web pages into Org
[[https://github.com/akirak/orgabilize.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package orgabilize)
    (:nixpkgs "readability-cli")
    (add-hook 'org-ctrl-c-ctrl-c-hook #'orgabilize-update-link-title)
    ;; (with-eval-after-load 'embark
    ;;   (define-key embark-url-map (kbd "r")
    ;;               (defun akirak/embark-archive-url-to-org (url)
    ;;                 (interactive "s")
    ;;                 (orgabilize-org-archive url))))
    (:embark embark-url-map "s"
      ("r" orgabilize-org-archive)))
#+end_src
*** org-autolist
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:26]
:END:
#+begin_quote
Improved list management in org-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-autolist)
    (:hook-into org-mode-hook))
#+end_src
*** org-bb
:PROPERTIES:
:CREATED_TIME: [2022-04-13 Wed 23:59]
:END:
#+begin_quote
Defining todo blockers in a block
[[https://github.com/akirak/org-blockers-block]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-bb)
    (with-eval-after-load 'org
      (org-bb-mode t)))
#+end_src
*** org-bookmark-heading
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:26]
:END:
#+begin_quote
Emacs bookmark support for org-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-bookmark-heading)
    (:set org-bookmark-heading-make-ids t))
#+end_src
*** org-dog
:PROPERTIES:
:CREATED_TIME: [2022-03-03 Thu 16:26]
:END:
#+begin_quote
A programmable workflow layer for Org mode
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog)
    (with-eval-after-load 'org-id
      (org-dog-id-mode t))
    (add-hook 'org-mode-hook #'org-dog-file-mode-maybe)

    (:global "M-g M-/" #'org-dog-find-file)
    (define-key help-map (kbd "M-o") #'org-dog-overview)

    (:set org-dog-context-path-patterns
          `(("^\\.github/" . "services/github.com")
            ("\\.h?eex\\'" . "programming/elixir")))

    (:with-feature org
      (:with-map org-mode-map
        (:bind "C-x i" #'org-dog-insert-internal-link)))

    (add-hook 'org-dog-file-mode-hook #'org-dog-header-line-enable)

    (add-hook 'org-dog-file-registration-hook
              (defun akirak/org-dog-add-agenda-file (file-obj)
                (when (string-match-p (rx bol
                                          (or "meta"
                                              (and "personal/" (+ (not (any "/"))) eol)
                                              "work-context"))
                                      (oref file-obj relative))
                  (add-to-list 'org-agenda-files (oref file-obj absolute)))))

    ;; Add all file tags in the registered files to the persistent tag alist.
    ;; This is important for the propagation feature of org-dog-datetree.el.
    (add-hook 'org-dog-file-registration-hook
              (defun akirak/org-dog-add-file-tags (file-obj)
                (org-dog-with-file-header (oref file-obj absolute)
                  (dolist (tag org-file-tags)
                    (unless (assoc tag org-tag-persistent-alist)
                      (setq org-tag-persistent-alist
                            (append org-tag-persistent-alist
                                    (list (list (substring-no-properties tag))))))))))

    (add-hook 'org-dog-reload-hook
              (defun akirak/org-dog-add-extra-agenda-files ()
                (require 'org-dog-overview)
                (setq org-agenda-files
                      (thread-last
                        (org-dog-overview-scan org-agenda-files :fast t)
                        (mapcar #'car)
                        (reverse)))))

    (:when-loaded
      (:also-load org-dog-embark
                  org-dog-facade))

    (with-eval-after-load 'org-dog-overview
      (define-key org-dog-overview-mode-map
                  (kbd "+") #'org-dog-add-header-link)))
#+end_src
**** consult-org-dog
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 20:33]
:END:
#+begin_quote
 
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-org-dog))
#+end_src
**** octopus
:PROPERTIES:
:CREATED_TIME: [2022-08-21 Sun 16:36]
:END:
#+begin_quote
Transient commands for Org Dog
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package octopus)
    (:global "M-g M-o" #'octopus-find-file
             "M-s M-o" #'octopus-find-node)

    (:with-feature org
      (:when-loaded
        (:with-map org-mode-map
          (:bind "C-c C-x r" #'octopus-refile)))))
#+end_src
**** org-dog-embark
:PROPERTIES:
:CREATED_TIME: [2022-03-03 Thu 16:26]
:END:
#+begin_quote
An example embark configuration for org-dog
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-embark))
#+end_src
**** org-dog-export
#+begin_quote
Export Org contents to various formats
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-export))
#+end_src
**** org-dog-facade
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 20:33]
:END:
#+begin_quote
Facade Org files
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-facade)
    (add-hook 'org-capture-prepare-finalize-hook
              #'akirak/org-dog-datetree-propagate)
    (:set org-dog-datetree-propagate-on-refile t
          org-dog-datetree-generate-id-on-refile t)

    (defun akirak/org-dog-datetree-propagate ()
      (require 'org-reverse-datetree)
      (require 'org-dog-datetree)
      (when (org-reverse-datetree-guess-date)
        (org-dog-datetree-propagate-by-tag nil :local t))))
#+end_src
**** org-dog-root
#+begin_src emacs-lisp
  (setup org-dog-root
    (:global "<f12> o r" #'org-dog-root-switch
             "<f12> o R" #'org-dog-root-add-active-files)
    (:when-loaded
      (add-hook 'mode-line-misc-info org-dog-root-mode-item)))
#+end_src
*** COMMENT org-dynamic-bullets                 :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-dynamic-bullets)
    (:hook-into org-mode-hook))
#+end_src
*** org-epubinfo
:PROPERTIES:
:CREATED_TIME: [2022-04-12 Tue 11:03]
:END:
#+begin_quote
Integrate Org with epubinfo program
[[https://github.com/akirak/org-epubinfo]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-epubinfo)
    (:nixpkgs epubinfo))
#+end_src
*** org-indent
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup org-indent
    (:set org-indent-mode-turns-on-hiding-stars t))
#+end_src
*** COMMENT org-journal                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:

#+begin_src emacs-lisp
(setup (:package org-journal))
#+end_src
*** org-lang-env
:PROPERTIES:
:CREATED_TIME: [2022-08-19 Fri 23:57]
:END:
#+begin_quote
Per-entry language environment
[[https://github.com/akirak/org-lang-env]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-lang-env))
#+end_src
*** COMMENT orglink                                  :links:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:28]
:END:
#+begin_quote
use Org Mode links in other modes
#+end_quote

=orglink-mode= lets you open links as in Org mode.

#+begin_src emacs-lisp
(setup (:package orglink))
#+end_src

*** org-make-toc                                     :documentation:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:
#+begin_quote
Automatic tables of contents for Org files
[[http://github.com/alphapapa/org-make-toc]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-make-toc))
#+end_src
*** org-ml                                                 :library:
:PROPERTIES:
:CREATED_TIME: [2022-03-17 Thu 20:26]
:END:
#+begin_quote
Functional Org Mode API
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-ml))
#+end_src
*** COMMENT org-noter                                                          :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:
#+begin_quote
A synchronized, Org-mode, document annotator
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-noter))
#+end_src
*** COMMENT org-pretty-table                                                   :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-23 Sat 23:59]
:END:
#+begin_quote
Replace org-table characters with box-drawing unicode glyphs.
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-pretty-table))
#+end_src
*** org-ql                                                 :library:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:
#+begin_quote
Org Query Language, search command, and agenda-like view
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-ql)
    (:also-load akirak-org-ql)
    ;; Temporarily workaround
    (autoload 'org-dblock-write:org-ql "org-ql-search")

    (:set org-ql-completing-read-reverse-paths nil)

    (:with-feature org
      (:bind "M-s o" #'org-ql-find)))
#+end_src
*** org-recur
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 14:17]
:END:
#+begin_quote
Recurring org-mode tasks
[[https://github.com/m-cat/org-recur]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-recur)
    (:status opinionated
      (with-eval-after-load 'org
        (akirak-org-recur-mode t))))
#+end_src
*** org-reverse-datetree
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:15]
:END:
#+begin_quote
Create reverse date trees in org-mode
[[https://github.com/akirak/org-reverse-datetree]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-reverse-datetree)
    (:set org-reverse-datetree-entry-time
          '((property "CLOSED")
            (clock latest)
            (property "CREATED_TIME"))
          org-reverse-datetree-month-format "%Y-%m"))
#+end_src
*** COMMENT org-starter                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:
#+begin_quote
A basic configuration framework for org mode
[[https://github.com/akirak/org-starter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-starter)
    (:set org-starter-require-file-by-default nil
          org-starter-load-config-files t
          org-starter-exclude-from-recentf '(known-files path)
          ;; org-starter-alternative-find-function #'helm-org-ql
          org-starter-find-file-visit-window t
          org-starter-override-agenda-window-setup 'other-window
          org-starter-enable-local-variables :all))
#+end_src
*** org-super-agenda
:PROPERTIES:
:CREATED_TIME: [2022-03-11 Fri 17:45]
:END:
#+begin_quote
Supercharge your agenda
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-super-agenda)
    (with-eval-after-load 'org-agenda
      (org-super-agenda-mode t)))
#+end_src
*** org-super-links
:PROPERTIES:
:CREATED_TIME: [2022-08-19 Fri 15:36]
:END:
#+begin_quote
Make super links
[[https://github.com/toshism/org-super-links]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-super-links))
#+end_src
*** org-transclusion
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:09]
:END:
#+begin_quote
Transclude text content via links
[[https://github.com/nobiot/org-transclusion]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-transclusion))
#+end_src
*** COMMENT org-visual-indent                   :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-visual-indent)
    (:hook-into org-mode-hook))
#+end_src
*** org-volume
:PROPERTIES:
:CREATED_TIME: [2022-04-04 Mon 23:59]
:END:
#+begin_quote
Retrieve metadata of volumes from inside Org
[[https://github.com/akirak/org-volume]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-volume)
    (:set org-volume-image-download-method #'akirak-image-insert-offline-link
          org-volume-dblock-defaults '(:lang "en" :limit 1)))
#+end_src
*** ox-gfm
:PROPERTIES:
:CREATED_TIME: [2022-05-15 Sun 16:56]
:END:
#+begin_quote
Github Flavored Markdown Back-End for Org Export Engine
#+end_quote

#+begin_src emacs-lisp
(setup (:package ox-gfm))
#+end_src
** Packages                                                :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** academic-phrases                                       :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:28]
:END:
#+begin_quote
Bypass that mental block when writing your papers.
#+end_quote

#+begin_src emacs-lisp
(setup (:package academic-phrases))
#+end_src
*** COMMENT ace-window                                             :keybindings:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Quickly switch windows.
[[https://github.com/abo-abo/ace-window]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ace-window)
    (:set aw-keys (string-to-list "qwertyui")
          aw-background nil
          aw-ignore-on t
          aw-ignored-buffers '(" *LV*"
                               minibuffer-mode
                               "*Calc Trail*")
          aw-scope 'frame
          aw-dispatch-always t)

    (:status opinionated
      (:global "M-o" #'ace-window)
      (:with-feature lispy
        (:when-loaded
          (:with-map (lispy-mode-map)
            (:unbind "M-o"))))
      (:set aw-dispatch-alist
            `((?o aw-swap-window "Swap Windows")
              (?c aw-copy-window "Duplicate the current window")
              (?v aw-split-window-horz "Split horizontally")
              (?s aw-split-window-vert "Split vertically")
              (?p aw-delete-window "Delete Window")
              (?x akirak/aw-replace-window "Replace window")
              (?m akirak/aw-mirror-window "Mirror window")
              ;; Unused.
              ;; (?k akirak/aw-quit-window "Quit window")
              (32 toggle-window-split)
              ;; tab-bar-mode.
              (?Q tab-bar-close-tab)
              (?R tab-bar-rename-tab)
              (?T tab-bar-new-tab)
              ;; Deprecated in favour of tab-bar-mode.
              ;; (?T tear-off-window)
              (?D delete-frame)
              (?F make-frame-command)
              (?? aw-show-dispatch-help)))

      (defun akirak/aw-quit-window (window)
        "Delete window WINDOW."
        (let ((frame (window-frame window)))
          (when (and (frame-live-p frame)
                     (not (eq frame (selected-frame))))
            (select-frame-set-input-focus (window-frame window)))
          (if (= 1 (length (window-list)))
              (progn
                (bury-buffer (window-buffer window))
                (delete-frame frame))
            (if (window-live-p window)
                (quit-window window)
              (error "Got a dead window %S" window)))))

      (defun akirak/aw-mirror-window (window)
        "Display the current window in WINDOW but keep the current focus."
        (let* ((buffer (current-buffer))
               (start (window-start))
               (cur-window (get-buffer-window buffer)))
          (set-window-buffer window buffer)
          (set-window-start window start)))

      (defun akirak/aw-replace-window (window)
        (let* ((buffer (current-buffer))
               (cur-window (get-buffer-window buffer)))
          (aw-switch-to-window window)
          (switch-to-buffer buffer)
          (delete-window cur-window)))
      (custom-theme-set-faces 'user
                              '(aw-leading-char-face
                                ((default
                                  :background "gray18" :foreground "tan"
                                  :height 250))))
      (advice-add 'aw-delete-window
                  :after
                  (defun akirak/ad-after-aw-delete-window (&rest _args)
                    (balance-windows)))
      (advice-add 'aw-delete-window
                  :around
                  (defun akirak/ad-around-aw-delete-window (origfun &rest args)
                    (let ((initial-window (selected-window)))
                      (prog1 (apply origfun args)
                        (when (window-live-p initial-window)
                          (select-window initial-window))))))))
#+end_src
*** adaptive-wrap                                           :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 17:56]
:END:
#+begin_quote
Smart line-wrapping with wrap-prefix
#+end_quote

#+begin_src emacs-lisp
  (setup (:package adaptive-wrap))
#+end_src
*** COMMENT affe                           :completion:grep:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-28 Thu 05:52]
:END:
#+begin_quote
Asynchronous Fuzzy Finder for Emacs
#+end_quote

#+begin_src emacs-lisp
(setup (:package affe))
#+end_src
*** aggressive-indent                                   :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:26]
:END:
#+begin_quote
Minor mode to aggressively keep your code always indented
[[https://github.com/Malabarba/aggressive-indent-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package aggressive-indent)
    (:hook-into emacs-lisp-mode-hook))
#+end_src
*** akirak
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:12]
:END:
#+begin_quote
A collection of commands and utilities
[[https://git.sr.ht/~akirak/akirak-mode]]
#+end_quote

This is a collection of extra utilities for various packages.

#+begin_src emacs-lisp
  (setup (:package akirak)

    (:global "C-x d" #'akirak-consult-dir
             "C-c i" #'akirak-scratch-elisp
             "<f12> j" #'akirak-scratch-japanese)

    (with-eval-after-load 'embark
      (require 'akirak-embark)
      (add-to-list 'embark-keymap-alist
                   '(directory . akirak-embark-directory-map))
      (add-to-list 'embark-keymap-alist
                   '(project-root . akirak-embark-project-root-map))
      ;; Since I am not using package.el, it is better to override the default
      ;; embark map.
      (add-to-list 'embark-keymap-alist
                   '(package . akirak-embark-package-map)))

    ;; These settings are specific to my environment.
    (:status personal
      (:defer 1 #'akirak-files-ensure-abbrev-list)
      (run-with-idle-timer 300 nil #'akirak-project-rescan)))
#+end_src
**** akirak-avy
#+begin_src emacs-lisp
  (setup akirak-avy
    (:global "C-;" #'akirak-avy-insert-symbol))
#+end_src
**** akirak-capture
#+begin_src emacs-lisp
  (setup akirak-capture
    (:global "C-c c" #'akirak-capture))
#+end_src
**** akirak-comment
#+begin_src emacs-lisp
  (setup akirak-comment
    (:global "M-;" #'akirak-comment-toggle))
#+end_src
**** akirak-consult
#+begin_src emacs-lisp
  (setup akirak-consult
    (:status opinionated
      (:with-map ctl-x-map
        (:bind "p" #'akirak-consult-project-file))))
#+end_src
**** akirak-consult-elisp
#+begin_src emacs-lisp
  (setup akirak-consult-elisp
    (:global [remap finder-by-keyword] #'akirak-consult-elisp-package))
#+end_src
**** akirak-consult-org
#+begin_src emacs-lisp
  (setup akirak-consult-org
    (with-eval-after-load 'embark
      (add-to-list 'embark-transformer-alist
                   '(akirak-consult-org-olp-with-file
                     . akirak-consult-org-olp-to-marker))))
#+end_src
**** akirak-org-secrets                                   :secrets:
#+begin_src emacs-lisp
  (setup akirak-org-secrets
    (:global "<f12> S i" #'akirak-org-secrets-insert
             "<f12> S w" #'akirak-org-secrets-copy
             "<f12> S s" #'akirak-org-secrets-show
             "<f12> S c" #'akirak-org-secrets-capture))
#+end_src
**** akirak-elec-pair                                 :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:39]
:END:
#+begin_src emacs-lisp
  (setup akirak-elec-pair
    (:status opinionated
      (:global "M-i" nil
               "M-i c" #'akirak-elec-pair-replace
               "M-i d" #'akirak-elec-pair-delete
               "M-i y" #'akirak-elec-pair-wrap-post-yank
               "M-i #" #'akirak-elec-pair-self-insert
               "M-i $" #'akirak-elec-pair-self-insert
               "M-i %" #'akirak-elec-pair-self-insert
               "M-i {" #'akirak-elec-pair-self-insert
               "M-i [" #'akirak-elec-pair-self-insert
               "M-i (" #'akirak-elec-pair-self-insert)))
#+end_src

I once used [[https://github.com/cute-jumper/embrace.el][embrace.el]], but it had dependency on expand-region I wanted to get rid of, so I implemented a simpler alternative.
**** akirak-header-line                                        :UI:
:PROPERTIES:
:CREATED_TIME: [2022-04-18 Mon 08:15]
:END:
#+begin_src emacs-lisp
  (setup akirak-header-line
    (:hook-into after-init-hook))
#+end_src
**** akirak-image

#+begin_src emacs-lisp
  (setup akirak-image
    (:nixpkgs "librsvg")
    (:embark embark-url-map "s"
      ("d" akirak-image-insert-offline-link))
    (:embark embark-file-map nil
      ("C-c i" akirak-image-import-file))
    (add-hook 'org-ctrl-c-ctrl-c-hook #'akirak-image-org-update))
#+end_src
**** COMMENT akirak-japanese                              :ARCHIVE:
#+begin_src emacs-lisp
  (setup akirak-japanese
    ;; Local search
    (:global "M-s M-l" #'akirak-japanese-search))
#+end_src
**** akirak-narrow
#+begin_src emacs-lisp
  (setup akirak-narrow
    (:global "C-x n" #'akirak-narrow-or-widen-dwim)
    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-x n") #'akirak-narrow-or-widen-dwim)))
#+end_src
**** akirak-snippet
#+begin_src emacs-lisp
  (setup akirak-snippet
    (define-key ctl-x-r-map "/" #'akirak-snippet-search))
#+end_src
**** akirak-url                                         :clipboard:
Complete a URL from the clipboard and the kill ring and insert as a link

#+begin_src emacs-lisp
  (setup akirak-url
    (:global "C-c w" #'akirak-url-insert-dwim)
    (:embark embark-url-map "s"
      ("m" akirak-url-insert-as-markdown)
      ("g" akirak-git-clone)
      ("c" akirak-url-org-capture))
    (:embark embark-file-map "s"
      ("C-l" akirak-org-store-link-to-file)))
#+end_src
**** akirak-window                                        :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 14:10]
:END:

This is an extra functions for window management.

#+begin_src emacs-lisp
  (setup akirak-window
    (:status opinionated
      (:global "C-2" #'akirak-window-split-vertically
               "C-3" #'akirak-window-split-and-select
               "C-4" #'akirak-window-setup-columns
               "C-x o" #'akirak-window-cycle-two-windows
               "C-x M-o" #'akirak-window-swap-two-windows
               "M-o" #'akirak-window-moderate-1
               [remap abort-recursive-edit] #'akirak-window-cleanup)))
#+end_src
*** COMMENT all-the-icons                               :UI:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:28]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons))
#+end_src
**** COMMENT all-the-icons-completion                     :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:29]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-completion)
    (with-eval-after-load 'marginalia
      (all-the-icons-completion-mode t)
      (add-hook 'marginalia-mode
                #'all-the-icons-completion-marginalia-setup)))
#+end_src
**** COMMENT all-the-icons-dired                          :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:30]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-dired)
    (:hook-into dired-mode))
#+end_src
*** anzu                                            :editing:regexp:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 21:00]
:END:
#+begin_quote
Show number of matches in mode-line while searching
[[https://github.com/emacsorphanage/anzu]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package anzu)
    (:with-mode global-anzu-mode
      (:hook-into after-init-hook))

    (:global [remap query-replace] #'anzu-query-replace
             [remap query-replace-regexp] #'anzu-query-replace-regexp))
#+end_src
*** auto-yasnippet                                       :expansion:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 15:39]
:END:
#+begin_quote
Quickly create disposable yasnippets
[[https://github.com/abo-abo/auto-yasnippet]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package auto-yasnippet)
    (:global "C-x r a" #'aya-create
             "C-x r e" #'aya-expand))
#+end_src
*** avy
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:10]
:END:
#+begin_quote
Jump to arbitrary positions in visible text and select text quickly.
[[https://github.com/abo-abo/avy]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package avy)
    (:global "C-'" #'avy-goto-char-timer
             "M-g z" #'avy-goto-char-in-line))
#+end_src
*** beancount                                     :@extra:beancount:
#+begin_quote
A major mode to edit Beancount input files.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package beancount)
    (:nixpkgs "beancount" "fava")

    ;; I don't like the default keybindings on C-c, so change the prefix.
    (:set beancount-mode-map-prefix (kbd akirak/mode-prefix-key))

    (:with-mode beancount-mode
      (:file-match "\\.beancount\\'" "\\.bean\\'")
      (:when-loaded
        (:hook
         (defun akirak/beancount-turn-on-outline-mode ()
           (outline-minor-mode t)))
        (:bind
         "d" #'beancount-insert-date))))
#+end_src
*** blamer                                                      :VC:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 17:48]
:END:
#+begin_quote
Show git blame info about current line
[[https://github.com/artawower/blamer.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package blamer)
    (:set blamer-max-lines 50
          blamer-max-commit-message-length 50)

    (define-key ctl-x-x-map (kbd "b") #'blamer-mode)
    (define-key help-map (kbd "M-g") #'blamer-show-commit-info))
#+end_src
*** COMMENT browse-at-remote                               :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-07-08 Fri 12:35]
:END:
#+begin_quote
Open github/gitlab/bitbucket/stash/gist/phab/sourcehut page from Emacs
#+end_quote

#+begin_src emacs-lisp
(setup (:package browse-at-remote))
#+end_src
*** COMMENT bufler                                         :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 22:51]
:END:

#+begin_src emacs-lisp
  (setup (:package bufler)
    (bufler-mode t)
    ;; Use it as a replacement for ibuffer
    (:global "C-x C-b" #'bufler))
#+end_src
*** buttercup                      :Emacs__Lisp:testing:development:
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 18:14]
:END:
#+begin_quote
Behavior-Driven Emacs Lisp Testing
[[https://github.com/jorgenschaefer/emacs-buttercup]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package buttercup)
    (:with-hook emacs-lisp-mode-hook
      (:hook (defun akirak/buttercup-setup ()
               (when (and (buffer-file-name)
                          (string-match-p (rx (any "-/") "test" (?  "s") ".el" eol)
                                          (buffer-file-name)))
                 (buttercup-minor-mode t)))))

    (:when-loaded
      ;; Work around the duplicate lines issue.
      ;; See https://github.com/jorgenschaefer/emacs-buttercup/issues/181
      (advice-add #'buttercup-reporter-interactive
                  :before-while
                  (defun akirak/ad-bf-reporter-interactive (event arg)
                    (not (eq event `spec-started))))

      (advice-add #'buttercup-colorize :filter-return #'xterm-color-filter)))
#+end_src

*** cape                                                :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:17]
:END:
#+begin_quote
Completion At Point Extensions
#+end_quote

#+begin_src emacs-lisp
  (setup (:package cape)
    (:global "C-x r M-f" #'cape-file
             "C-x r M-l" #'cape-line
             ;; abbrev-mode is turned on, so I will use
             ;; this keybinding for mnemonics.
             ;; It's C-M-/ and C-x '.
             [remap expand-abbrev] #'cape-abbrev))
#+end_src
*** consult                                             :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:33]
:END:
#+begin_quote
Consulting completing-read
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult)
    (:with-mode consult-preview-at-point-mode
      (:hook completion-list-mode))

    ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    (:set consult-narrow-key "<"
          consult-project-root-function (defun akirak/consult-project-root ()
                                          (when-let (project (project-current))
                                            (project-root project))))

    (:when-loaded
      (:set consult-buffer-sources `(consult--source-project-buffer
                                     consult--source-project-recent-file
                                     ,@(when (require 'akirak-consult nil t)
                                         '(akirak-consult-source-help-buffer
                                           akirak-consult-source-indirect-buffer
                                           akirak-consult-source-narrowed-buffer))
                                     consult--source-buffer
                                     consult--source-recent-file))

      (add-to-list 'consult-bookmark-narrow
                   '(?o "Org" org-bookmark-heading-jump)))

    (:global [remap switch-to-buffer] #'consult-buffer
             [remap bookmark-jump] #'consult-bookmark
             [remap yank-pop] #'consult-yank-pop
             "C-c j" #'consult-register
             "M-s o" #'consult-outline
             ;; Remap `isearch-forward' that is bound to C-s. `isearch-forward' is
             ;; bound to "s" in `View-mode-map', but don't remap it.
             ;; `isearch-backward' is still bound to C-r, so you can use it to
             ;; dispatch the built-in isearch.
             "C-s" #'consult-line
             "C-c f" #'consult-focus-lines
             "C-x /" #'consult-ripgrep)

    (:with-feature consult-imenu
      (:global "M-s i" #'consult-imenu
               "M-s M-i" #'consult-imenu-multi))

    (:with-feature consult-compile
      (:global "M-s e" #'consult-compile-error))

    (:with-feature consult-flymake
      (:global "M-s f" #'consult-flymake))

    (:with-feature consult-xref
      (:set xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)))
#+end_src
**** consult-org
#+begin_src emacs-lisp
  (setup consult-org
    (:global "M-g M-j" #'consult-org-clock-goto))
#+end_src
*** consult-ls-git
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 21:31]
:END:
#+begin_quote
Consult integration for git
[[https://github.com/rcj/consult-ls-git]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-ls-git)
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist
                   '(consult-ls-git-status . akirak-embark-git-file-map))))
#+end_src
*** corfu                                            :completion:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:19]
:END:
#+begin_quote
Completion Overlay Region FUnction
#+end_quote

#+begin_src emacs-lisp
  (setup (:package corfu)
    (:with-mode (prog-mode text-mode comint-mode)
      (:hook corfu-mode fancy-dabbrev-mode))

    (:with-hook minibuffer-setup-hook
      (:hook
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           (corfu-mode 1)))))

    (:with-mode (prog-mode text-mode)
      (:bind "M-/" #'completion-at-point))
    (:with-feature comint
      (:bind "M-/" #'completion-at-point)))
#+end_src
*** corfu-doc
:PROPERTIES:
:CREATED_TIME: [2022-04-24 Sun 19:51]
:END:
#+begin_quote
Documentation popup for Corfu
[[https://github.com/galeo/corfu-doc]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package corfu-doc)
    (:hook-into corfu-mode-hook))
#+end_src
*** COMMENT dash-docs                        :documentation:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-20 Wed 17:28]
:END:
#+begin_quote
Offline documentation browser using Dash docsets.
[[http://github.com/areina/helm-dash]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package dash-docs))
#+end_src
**** consult-dash
:PROPERTIES:
:CREATED_TIME: [2022-04-25 Mon 20:26]
:END:
#+begin_quote
Consult front-end for dash-docs
[[https://codeberg.org/ravi/consult-dash]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package consult-dash))
#+end_src
*** deadgrep                                                  :grep:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
fast, friendly searching with ripgrep
[[https://github.com/Wilfred/deadgrep]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package deadgrep))
#+end_src
*** devdocs                                              :reference:
:PROPERTIES:
:CREATED_TIME: [2022-08-28 Sun 13:31]
:END:
#+begin_quote
Emacs viewer for DevDocs
[[https://github.com/astoff/devdocs.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package devdocs)
    (define-key help-map (kbd "d") #'devdocs-lookup))
#+end_src
*** COMMENT dired-auto-readme                        :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-23 Sat 23:59]
:END:
#+begin_quote
Auto-display README files in Dired biffers
[[https://github.com/amno1/org-view-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-auto-readme)
    (:hook-into dired-mode))
#+end_src
*** dired-collapse                                           :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:44]
:END:
#+begin_quote
Collapse unique nested paths in dired listing
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-collapse))
#+end_src

I will manually turn on =dired-collapse-mode= when necessary.
*** dired-du
:PROPERTIES:
:CREATED_TIME: [2022-08-23 Tue 17:21]
:END:
#+begin_quote
Dired with recursive directory sizes
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-du))
#+end_src
*** dired-filter                                             :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:50]
:END:
#+begin_quote
Ibuffer-like filtering for dired
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-filter)
    (:hook-into dired-mode-hook)
    (:hook dired-filter-group-mode)

    (:set dired-filter-group-saved-groups
          `(("default"
             ("Directories"
              (directory . t))
             ,@(mapcar
                (lambda (filter-stack)
                  `(,(car filter-stack)
                    (file . t)
                    ,@(cdr filter-stack)))
                '(("Dotfiles"
                   (name . "^\\."))
                  ;; Text files
                  ("Text"
                   (or (name . "README")
                       (name . "TODO")
                       (name . "LICENSE")
                       (extension "txt" "md" "mkd" "markdown" "rst")))
                  ("Org"
                   (extension "org" "org_archive" "bib"))
                  ("Ledger"
                   (extension "beancount"))
                  ("Data files"
                   (extension "csv" "json" "sql" "lock"))
                  ;; Binary files
                  ("Books and papers"
                   (extension "pdf" "mobi" "epub" "azw"))
                  ("Archives"
                   (extension "zip" "rar" "gz" "bz2" "tar"))
                  ("Disk images"
                   (extension "iso" "ova"))
                  ("Office docs"
                   (extension "xlsx" "xls" "docx" "doc"))
                  ("Programs"
                   (extension "exe" "run" "deb"))
                  ("Objects and binary files"
                   (extension "o" "elc"))
                  ("Meta data"
                   (extension "torrent" "acsm"))
                  ("Web"
                   (extension "html" "css" "scss"))
                  ;; Images are often thumbnails, so they should come
                  ;; after other binary files
                  ("Images and graphics"
                   (extension "jpg" "jpeg" "png" "gif" "svg"))
                  ("Nix"
                   (extension "nix"))
                  ;; Source code
                  ("Configuration"
                   (or (name . "Makefile")
                       (name . "Dockerfile")
                       (extension "yml" "yaml" "cabal"
                                  "prisma" "hcl" "terraform"
                                  "dockerfile"
                                  "mk" "makefile")))
                  ("Emacs Lisp"
                   (extension "el"))))))))
#+end_src
*** dired-hacks-utils                                        :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:49]
:END:
#+begin_quote
Utilities and helpers for dired-hacks collection
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-hacks-utils)
    (:with-map dired-mode-map
      ;; Remap 'n' and 'p'
      "n" 'dired-hacks-next-file
      "p" 'dired-hacks-previous-file))
#+end_src
*** COMMENT dired-hide-dotfiles                      :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 19:08]
:END:
#+begin_quote
Hide dotfiles in dired
[[https://github.com/mattiasb/dired-hide-dotfiles]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-hide-dotfiles))
#+end_src
*** COMMENT dired-k                                  :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:45]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-k)
    (:set dired-k-style 'git)

    (:with-hook dired-k-no-revert
      (:hook-into dired-after-readin-hook))

    ;; Prevent from highlighting by file attributes.
    ;; Just add git status
    ;; (defun akirak/ad-override-dired-k--highlight-by-file-attribyte ()
    ;;   nil)
    ;; (advice-add #'dired-k--highlight-by-file-attribyte
    ;;             :override
    ;;             #'akirak/ad-override-dired-k--highlight-by-file-attribyte)
    )
#+end_src

dired-k depends on dired-x, which has a poor code quality.
*** dotenv-mode
:PROPERTIES:
:CREATED_TIME: [2022-09-04 Sun 23:59]
:END:
#+begin_quote
Major mode for .env files
[[https://github.com/preetpalS/emacs-dotenv-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dotenv-mode)
    (:file-match "\\.env\\(?:\\.[a-z]+\\)?\\'"))
#+end_src
*** duckduckgo                                              :search:
:PROPERTIES:
:CREATED_TIME: [2022-03-17 Thu 23:59]
:END:
#+begin_quote
Run DuckDuckGo search
[[https://github.com/akirak/duckduckgo.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package duckduckgo)
    ;; Replace `eww-search-words'
    (:global "M-s M-w" #'duckduckgo))
#+end_src
*** dumb-jump                                           :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Jump to definition for 50+ languages without configuration
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dumb-jump)
    (:set dumb-jump-selector #'completing-read)

    ;; NOTE: The activation function should be added to the end
    ;; of the backend function. Is this really sufficient?
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

    (add-hook 'emacs-lisp-mode-hook
              ;; Make dumb-jump take precedence over the builtin backend,
              ;; to search the project code whenever possible.
              (defun akirak/elisp-setup-dumb-jump ()
                (add-to-list 'xref-backend-functions
                             #'dumb-jump-xref-activate))))
#+end_src
*** COMMENT ediprolog                               :Prolog:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:24]
:END:
#+begin_quote
Emacs Does Interactive Prolog
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ediprolog)
    ;; Set `ediprolog-system' and `ediprolog-program' depending on the system
    (:nixpkgs "scryer-prolog")

    (:with-feature prolog
      ;; In other modes, this key is bound to repl.
      (:bind "<C-return>" #'ediprolog-dwim)))
#+end_src

[[https://lib.rs/crates/scryer-prolog][scryer-prolog]] is the bleeding-edge implementation of Prolog (like GHC to Haskell), and it is installed with this package.
*** editorconfig                                        :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
EditorConfig Emacs Plugin
[[https://github.com/editorconfig/editorconfig-emacs#readme]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package editorconfig))
#+end_src

It is required only in specific projects, so I won't turn on the mode by default.
*** eglot                                                      :LSP:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
Client for Language Server Protocol (LSP) servers
[[https://github.com/joaotavora/eglot]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eglot)

    ;; It depends on the project whether it is recommended to turn on LSP.
    ;;
    ;; (:with-mode eglot-ensure
    ;;   (:hook-into haskell-mode-hook
    ;;               rust-mode-hook))

    (:set eglot-confirm-server-initiated-edits nil)

    (:bind akirak/mode-prefix-key #'akirak/eglot-prefix-map)

    (:when-loaded
      (define-prefix-command 'akirak/eglot-prefix-map)
      (:with-map akirak/eglot-prefix-map
        (:bind "a" #'eglot-code-actions
               "i" #'eglot-code-action-inline
               "q" #'eglot-code-action-quickfix
               "o" #'eglot-code-action-organize-imports
               "R" #'eglot-reconnect
               "r" #'eglot-rename))

      (add-to-list 'eglot-server-programs
                   '(svelte-mode . ("svelteserver" "--stdio")))
      (add-to-list 'eglot-server-programs
                   '(hcl-mode . ("terraform-lsp" "--stdio")))
      (add-to-list 'eglot-server-programs
                   '(elixir-mode . ("elixir-ls"))))

    (put 'typescript-tsx-mode 'eglot-language-id "typescriptreact")

    (add-hook 'eglot-managed-mode-hook #'akirak/eglot-setup-buffer)

    (defun akirak/eglot-setup-buffer ()
      (if (eglot-managed-p)
          (add-hook 'before-save-hook #'eglot-format-buffer nil t)
        (remove-hook 'before-save-hook #'eglot-format-buffer t))))
#+end_src
*** eldoc-eval                                               :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 12:31]
:END:
#+begin_quote
Enable eldoc support when minibuffer is in use.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eldoc-eval)
    (:with-mode eldoc-in-minibuffer-mode
      (:hook-into after-init-hook)))
#+end_src

I use this package mostly because it uses =pp-eval-expression= for printing the result, but it also has some other nice features, and it works flawlessly.
*** COMMENT electric-operator                   :formatting:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Automatically add spaces around operators
[[https://github.com/davidshepherd7/electric-operator]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package electric-operator)
    (:hook-into python-mode
                sql-mode
                js-mode
                c-mode
                java-mode
                rust-mode))
#+end_src
*** elixir-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-29 Fri 19:08]
:END:
#+begin_quote
Major mode for editing Elixir files
[[https://github.com/elixir-editors/emacs-elixir]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package elixir-mode)
    (:file-match "\\.exs?\\'")

    (:auto-insert
     ("/config/config\\.exs\\'"
      . (> "use Mix.Config\n\n"
           _))
     ("/lib/.+\\.ex\\'"
      . (> "defmodule " (akirak/elixir-module-name-from-file) " do\n"
           "  " _
           "\nend\n"))
     ("/test/.+_test\\.exs\\'"
      . (> "defmodule " (akirak/elixir-module-name-from-file) " do\n"
           "  use ExUnit.Case\n\n"
           "  alias " (string-remove-suffix
                       "Test" (akirak/elixir-module-name-from-file))
           "\n"
           "  doctest " (string-remove-suffix
                         "Test" (akirak/elixir-module-name-from-file))
           "\n"
           "  " _
           "\nend\n")))

    (:compilation-error
     ;; ** (SyntaxError) xxx/xxx/xxx.ex:97:29: syntax error before: '{'
     (iex "^\\*+([^z-a]+)\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*"
          1 2 3 (4 . 4)))

    (defun akirak/elixir-module-name-from-file ()
      (require 'f)
      (require 'dash)
      (let ((segments (f-split (buffer-file-name))))
        (when-let (i (-find-last-index
                      (lambda (x) (member x '("lib" "test")))
                      segments))
          (mapconcat (lambda (s)
                       (->> (split-string s "_")
                            (mapcar #'capitalize)
                            (string-join)))
                     (append (-slice segments (1+ i) -1)
                             (list (f-base (-last-item segments))))
                     ".")))))
#+end_src
*** elx                            :Emacs__Lisp:development:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:
#+begin_quote
extract information from Emacs Lisp libraries
#+end_quote

#+begin_src emacs-lisp
(setup (:package elx))
#+end_src
*** emacsql-sqlite                                         :library:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 13:46]
:END:
#+begin_quote
EmacSQL back-end for SQLite
[[https://github.com/skeeto/emacsql]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package emacsql-sqlite)
    (:nixpkgs "sqlite"))
#+end_src
*** embark
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:53]
:END:
#+begin_quote
Conveniently act on minibuffer completions
#+end_quote

#+begin_src emacs-lisp
  (setup (:package embark)
    ;; MAYBE: Bind "C-;" or something to embark-dwim
    (:global "C-." #'embark-act)

    (:when-loaded
      (define-key minibuffer-mode-map (kbd "C-,") #'embark-become)
      (akirak-embark-setup)))
#+end_src

Some notes:

- =embark-next/previous-symbol= could replace =symbol-overlay= package.
- =embark-export= can be a useful alternative to =tabulated-list=.
- Binding =sudo-find-file= command may be useful, but I haven't done it yet.

The following resources are useful:

- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]
*** embark-consult
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 18:02]
:END:
#+begin_quote
Consult integration for Embark
#+end_quote

#+begin_src emacs-lisp
  (setup (:package embark-consult)

    (with-eval-after-load 'consult
      (require 'embark-consult))
    (with-eval-after-load 'embark
      (require 'embark-consult))

    (:with-mode embark-collect-mode
      (:hook consult-preview-at-point-mode)))
#+end_src
*** COMMENT engine-mode                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-07-18 Mon 12:32]
:END:
#+begin_quote
Define and query search engines from within Emacs.
[[https://github.com/hrs/engine-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package engine-mode))
#+end_src
*** envrc                                                   :direnv:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
Support for `direnv' that operates buffer-locally
#+end_quote

#+begin_src emacs-lisp
  (setup (:package envrc)
    (:with-mode envrc-global-mode
      (:hook-into after-init-hook)))
#+end_src
*** epkg                                                     :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:36]
:END:
#+begin_quote
browse the Emacsmirror package database
#+end_quote

#+begin_src emacs-lisp
  (setup (:package epkg))
#+end_src
**** epkg-marginalia                             :Emacs:completion:
:PROPERTIES:
:CREATED_TIME: [2022-03-27 Sun 18:16]
:END:
#+begin_quote
Show Epkg information in completion annotations
#+end_quote

#+begin_src emacs-lisp
  (setup (:package epkg-marginalia)
    (with-eval-after-load 'marginalia
      (cl-pushnew 'epkg-marginalia-annotate-package
                  (alist-get 'package marginalia-annotator-registry))))
#+end_src
*** eros                                   :Emacs__Lisp:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:05]
:END:
#+begin_quote
Evaluation Result OverlayS for Emacs Lisp
[[https://github.com/xiongtx/eros]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eros)
    (:hook-into emacs-lisp-mode))
#+end_src
*** COMMENT esup                         :startup:profiling:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:44]
:END:
#+begin_quote
The Emacs StartUp Profiler (ESUP)
[[https://github.com/jschaf/esup]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package esup))
#+end_src
*** COMMENT evil-nerd-commenter                    :editing:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:26]
:END:
#+begin_quote
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
[[http://github.com/redguardtoo/evil-nerd-commenter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package evil-nerd-commenter)
    (:global "M-;" #'evilnc-comment-or-uncomment-lines
             ;; "C-c p" #'evilnc-comment-or-uncomment-paragraphs
             ))
#+end_src
*** fancy-dabbrev                                       :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:24]
:END:
#+begin_quote
Like dabbrev-expand with preview and popup menu
[[https://github.com/jrosdahl/fancy-dabbrev]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package fancy-dabbrev)
    ;; Useful for lisp
    (:set fancy-dabbrev-preview-context 'before-non-word
          fancy-dabbrev-expansion-context 'after-symbol)

    (defvar fancy-dabbrev-lispy-self-ins-cmds nil)
    (add-hook 'lispy-mode-hook
              (defun fancy-dabbrev-lispy-setup ()
                (let ((sym (make-variable-buffer-local 'fancy-dabbrev-self-insert-commands)))
                  (if fancy-dabbrev-lispy-self-ins-cmds
                      (set sym fancy-dabbrev-lispy-self-ins-cmds)
                    (dolist (key (number-sequence 33 ?z))
                      (add-to-list sym (key-binding (vector key))))
                    (setq fancy-dabbrev-lispy-self-ins-cmds (symbol-value sym))))))

    (:when-loaded
      (add-to-list 'fancy-dabbrev-self-insert-commands
                   'org-self-insert-command))

    (defcustom fancy-dabbrev-expansion-key "C-e"
      ""
      :type 'string)
    (defun fancy-dabbrev-remap (map)
      (let* ((mode-cmd (keymap-lookup map fancy-dabbrev-expansion-key))
             (remapped-cmd (or mode-cmd
                               (with-temp-buffer
                                 (keymap-lookup global-map fancy-dabbrev-expansion-key))))
             (fallback-cmd (or mode-cmd
                               (command-remapping remapped-cmd nil map)))
             (wrapper-cmd (intern (concat "fancy-dabbrev-expand-or-" (symbol-name fallback-cmd)))))
        (fset wrapper-cmd
              `(lambda ()
                 (interactive)
                 (if (memq last-command fancy-dabbrev-self-insert-commands)
                     (let ((fancy-dabbrev-indent-command ',fallback-cmd))
                       (fancy-dabbrev-expand-or-indent))
                   (call-interactively ',fallback-cmd))))
        (define-key map (vector 'remap remapped-cmd) wrapper-cmd)))

    (with-eval-after-load 'org-keys
      (fancy-dabbrev-remap org-mode-map))
    (with-eval-after-load 'lispy
      (fancy-dabbrev-remap lispy-mode-map)))
#+end_src
*** fanyi                                               :dictionary:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 23:59]
:END:
#+begin_quote
Not only English-Chinese translator
[[https://github.com/condy0919/fanyi.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package fanyi)
    (:set fanyi-providers '(fanyi-longman-provider
                            fanyi-etymon-provider))
    (:when-loaded
      (require 'fanyi-longman)
      (require 'fanyi-etymon))
    (define-key help-map (kbd "M-d") #'fanyi-dwim2))
#+end_src

You should also load ol-fanyi library to enable fanyi link type.
See modules.
*** flymake-eslint
:PROPERTIES:
:CREATED_TIME: [2022-07-01 Fri 23:59]
:END:
#+begin_quote
A Flymake backend for Javascript using eslint
#+end_quote

#+begin_src emacs-lisp
(setup (:package flymake-eslint))
#+end_src
*** flyspell-correct
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:
#+begin_quote
Correcting words with flyspell via custom interface
[[https://github.com/d12frosted/flyspell-correct]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flyspell-correct)
    (with-eval-after-load "flyspell"
      (define-key flyspell-mode-map (kbd "C-M-;") #'flyspell-correct-wrapper)))
#+end_src
*** flyspell-correct-avy-menu
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:
#+begin_quote
Correcting words with flyspell via avy-menu interface
[[https://github.com/d12frosted/flyspell-correct]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flyspell-correct-avy-menu)
    (with-eval-after-load "flyspell-correct"
      (require 'flyspell-correct-avy-menu)))
#+end_src
*** forge                                               :VC:project:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 13:22]
:END:
#+begin_quote
Access Git forges from Magit
#+end_quote

#+begin_src emacs-lisp
(setup (:package forge))
#+end_src
*** fwb-cmds                                                :window:
:PROPERTIES:
:CREATED_TIME: [2022-03-08 Tue 16:02]
:END:
#+begin_quote
misc frame, window and buffer commands
#+end_quote

#+begin_src emacs-lisp
(setup (:package fwb-cmds))
#+end_src

I need this package for =toggle-window-split= command.
*** ghelp                                    :reference:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:
#+begin_quote
Generic help
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ghelp)
    (:global "<f1> ." #'ghelp-describe-at-point
             [remap describe-symbol] #'ghelp-describe)

    ;; Temporary workaround
    (autoload 'ghelp-describe-at-point "ghelp"))
#+end_src
*** ghelp-eglot
#+begin_quote
Ghelp+Eglot
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ghelp-eglot))
#+end_src
*** ghelp-helpful
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:16]
:END:
#+begin_quote
Ghelp+Helpful
#+end_quote

#+begin_src emacs-lisp
(setup (:package ghelp-helpful))
#+end_src
*** gif-screencast                               :screen__recording:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:38]
:END:
#+begin_quote
One-frame-per-action GIF recording
[[https://gitlab.com/ambrevar/emacs-gif-screencast]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gif-screencast)

    ;; TODO: Maybe use flameshot for creating screenshot on Wayland
    (:nixpkgs "gifsicle" "scrot"
              "graphicsmagick"
              "graphicsmagick-imagemagick-compat"))
#+end_src

*** git-attr                                                 :files:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Git attributes of buffer file
[[https://github.com/arnested/emacs-git-attr]]
#+end_quote

#+begin_quote
Make vendored and generated files read only.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-attr)
    (add-hook 'find-file-hook #'git-attr-linguist))
#+end_src
*** git-auto-commit-mode                                        :VC:
:PROPERTIES:
:CREATED_TIME: [2022-03-26 Sat 20:33]
:ID:       0ec2d09e-7e97-40ba-aa5a-7af027187f62
:END:
#+begin_quote
Emacs Minor mode to automatically commit and push
[[https://github.com/ryuslash/git-auto-commit-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-auto-commit-mode)
    (:set gac-silent-message-p t
          gac-default-message #'akirak/git-auto-commit-message)

    (defun akirak/git-auto-commit-message (filename)
      (let ((root (project-root (project-current nil filename))))
        (thread-last
          (if (org-clocking-p)
              (let* ((clocking-file (buffer-file-name (org-base-buffer
                                                       (marker-buffer
                                                        org-clock-marker))))
                     (category (file-name-base clocking-file)))
                (cond
                 ((string-prefix-p "~/work/" root)
                  (org-link-display-format org-clock-current-task))
                 ((string-prefix-p (expand-file-name root)
                                   clocking-file)
                  (format "%s: %s\n\n%s"
                          category
                          (org-link-display-format org-clock-current-task)
                          ;; By using the link format of Org, it will enable the
                          ;; user to navigate to the referenced entry.
                          (org-link-make-string
                           (concat "id:" (org-with-point-at org-clock-marker
                                           (org-id-get-create))))))
                 (t
                  "!Working on a task in another repository")))
            (concat "Modified " (file-relative-name filename root)))
          ;; Add a prefix to indicate it is a machine commit
          (concat "(auto) "))))

    (with-eval-after-load 'org-clock
      (add-hook 'org-clock-out-hook
                (defun akirak/gac-org-clock-out ()
                  "Create an auto commit after `org-clock-out'."
                  (when (and git-auto-commit-mode
                             ;; If the entry has at least one auto commit
                             (> (org-clock-sum-current-item
                                 (- (float-time)
                                    gac-debounce-interval
                                    60))
                                0))
                    ;; I often refile the clocked entry immediately after clocking
                    ;; out from it, so rather than instantly creating a commit,
                    ;; defer it.
                    (let ((root (project-root (project-current))))
                      (run-with-timer
                       20 nil
                       `(lambda ()
                          (let ((default-directory ,root))
                            (save-some-buffers t (save-some-buffers-root))
                            (unless (zerop (call-process "git" nil nil nil
                                                         ;; Reuse the message
                                                         "commit" "-C" "HEAD"
                                                         "-a"))
                              (message "Git auto commit failed")))))))))))
#+end_src

A recommended way to turn on automatic commits is to define local variables in =.dir-locals.el=, e.g.:

#+begin_src emacs-lisp :tangle no
  ((org-mode . ((gac-debounce-interval . 180)
                (eval . (git-auto-commit-mode t)))))
#+end_src
*** git-gutter                                                  :VC:
:PROPERTIES:
:CREATED_TIME: [2022-02-26 Sat 19:08]
:END:
#+begin_quote
Port of Sublime Text plugin GitGutter
[[https://github.com/emacsorphanage/git-gutter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-gutter)
    (add-hook 'after-init-hook #'global-git-gutter-mode)

    (define-key ctl-x-map "g" #'git-gutter)
    (:global "C-c g" #'akirak-git-gutter-map
             "M-g j" #'git-gutter:next-hunk
             "M-g k" #'git-gutter:previous-hunk)

    (:when-loaded
      (defun akirak/git-gutter-follow-up-navigation (orig &rest args)
        (when (buffer-narrowed-p)
          (widen))
        (let ((pos (point)))
          (prog1 (apply orig args)
            (unless (eq pos (point))
              (when (derived-mode-p 'org-mode)
                (org-show-context))))))

      (advice-add 'git-gutter:next-hunk
                  :around #'akirak/git-gutter-follow-up-navigation)
      (advice-add 'git-gutter:previous-hunk
                  :around #'akirak/git-gutter-follow-up-navigation)))
#+end_src
*** github-linguist
:PROPERTIES:
:CREATED_TIME: [2022-02-04 Fri 19:15]
:END:
#+begin_quote
Run GitHub Linguist on projects to collect information
[[https://github.com/akirak/github-linguist.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package github-linguist)
    (:nixpkgs "github-linguist")
    (:set github-linguist-executable "github-linguist"))
#+end_src
*** git-identity                                                :VC:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 15:24]
:END:
#+begin_quote
Identity management for (ma)git
[[https://github.com/akirak/git-identity.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-identity)
    (:with-feature magit
      (:when-loaded
        (git-identity-magit-mode 1)
        (:with-map magit-status-mode-map
          (:bind "I" #'git-identity-info))))

    (cl-defmacro akirak/git-identity-add (address &rest args)
      "Add a new entry to the identity list, avoiding duplicates.

  This macro should be used in extra init files which should be kept private."
      (declare (indent 1))
      `(let ((cell (assoc ,address git-identity-list)))
         (if cell
             (setcdr cell (quote ,args))
           (push (cons ,address (quote ,args))
                 git-identity-list)))))
#+end_src
*** git-modes                                        :VC:major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Major modes for editing Git configuration files
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-modes)
    (:with-mode gitattributes-mode)
    (:with-mode gitconfig-mode)
    (:with-mode gitignore-mode
      (:file-match "/\\.dockerignore\\'")))
#+end_src
*** gleam-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 11:53]
:END:
#+begin_quote
Major mode for Gleam
[[https://github.com/gleam-lang/gleam-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gleam-mode)
    (:file-match "\\.gleam\\'"))
#+end_src
*** go-mode                                            :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-04-12 Tue 23:59]
:END:
#+begin_quote
Major mode for the Go programming language
#+end_quote

#+begin_src emacs-lisp
  (setup (:package go-mode)
    (:file-match "\\.go\\'")

    (:auto-insert
     ("\\.go\\'"
      . (> "package "
           (file-name-base (or buffer-file-name (buffer-name)))
           "\n\nimport (\n"
           ")\n\n"))))
#+end_src
*** go-translate                                       :translation:
:PROPERTIES:
:CREATED_TIME: [2022-04-02 Sat 23:59]
:END:
#+begin_quote
Translation framework supports multiple engines such as Google/Bing/DeepL
[[https://github.com/lorniu/go-translate]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package go-translate)
    (:set gts-translate-list '(("ja" "en")
                               ("zh" "en"))))
#+end_src
*** graphql-mode                                               :web:
:PROPERTIES:
:CREATED_TIME: [2022-03-20 Sun 23:59]
:END:
#+begin_quote
Major mode for editing GraphQL schemas
#+end_quote

#+begin_src emacs-lisp
  (setup (:package graphql-mode)
    (:file-match "\\.gql\\'"))
#+end_src
*** graphviz-dot-mode
:PROPERTIES:
:CREATED_TIME: [2022-03-11 Fri 22:02]
:END:
#+begin_quote
Mode for the dot-language used by graphviz (att).
#+end_quote

#+begin_src emacs-lisp
  (setup (:package graphviz-dot-mode)
    (:nixpkgs "graphviz")
    (:file-match "\\.dot\\'"))
#+end_src
*** guess-language
:PROPERTIES:
:CREATED_TIME: [2022-06-04 Sat 15:05]
:END:
#+begin_quote
Robust automatic language detection
[[https://github.com/tmalsburg/guess-language.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package guess-language))
#+end_src
*** haskell-mode                                       :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
A Haskell editing mode
[[https://github.com/haskell/haskell-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package haskell-mode)
    (:file-match "\\.hs\\'")
    (:with-mode haskell-cabal-mode
      (:file-match "\\.cabal\\'"))

    (:mode-repl run-haskell)
    (:hook interactive-haskell-mode)

    (:reformatters
     (ormolu :program "ormolu"))

    (:compilation-error
     ;; path:67:23-45:
     (hlint "^\\([/[:alnum:]][./[:alnum:]]*\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
            1 2 3 (4 . 4)))

    (defun akirak/haskell-module-name (&optional filename)
      (let* ((filename (or filename (buffer-file-name)))
             (project (project-current nil (file-name-directory filename)))
             (root (if project
                       (project-root project)
                     "~"))
             (relative (file-relative-name
                        (file-name-sans-extension filename)
                        root))
             (segments (split-string relative "/"))
             (case-fold-search nil))
        (pcase (seq-drop-while (lambda (s) (string-match-p "^[^A-Z]" s))
                               segments)
          (`nil "Main")
          ((and `(,name) (guard (string-suffix-p "Main" name)))
           "Main")
          (module-segments (string-join module-segments ".")))))

    (:auto-insert
     ("\\.hs\\'" . (> "module " (akirak/haskell-module-name) "\n"
                      "  where\n\n"
                      _))))
#+end_src
*** COMMENT haskell-tng-mode           :Haskell:major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:02]
:END:

#+begin_src emacs-lisp
  (setup (:package haskell-tng-mode)
    (:file-match "\\.hs\\'"))
#+end_src
*** hcl-mode                                             :Terraform:
:PROPERTIES:
:CREATED_TIME: [2022-03-20 Sun 23:59]
:END:
#+begin_quote
Major mode for Hashicorp
[[https://github.com/purcell/emacs-hcl-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package hcl-mode)
    (:file-match "\\.tf\\'"
                 "\\.prisma\\'"
                 "\\.hcl\\'"))
#+end_src
*** helpful                                        :reference:Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:50]
:END:
#+begin_quote
A better *help* buffer
[[https://github.com/Wilfred/helpful]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package helpful)
    ;; Also: helpful-at-point, helpful-callable, helpful-macro, and
    ;; helpful-visit-reference.
    (:global [remap describe-function] #'helpful-callable
             [remap describe-variable] #'helpful-variable
             [remap describe-command] #'helpful-command
             [remap describe-key] #'helpful-key
             [remap describe-symbol] #'helpful-symbol))
#+end_src
*** hercules                                           :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:51]
:END:
#+begin_quote
An auto-magical, which-key-based hydra banisher.
[[https://gitlab.com/jjzmajic/hercules]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package hercules))
#+end_src
*** highlight-indent-guides                                     :UI:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Minor mode to highlight indentation
[[https://github.com/DarthFennec/highlight-indent-guides]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package highlight-indent-guides)
    (:hook-into python-mode-hook
                yaml-mode-hook))
#+end_src

This is helpful in programming languages that depend on indentation levels.
*** hl-todo                                            :development:
:PROPERTIES:
:CREATED_TIME: [2022-03-02 Wed 15:58]
:END:
#+begin_quote
highlight TODO and similar keywords
#+end_quote

#+begin_src emacs-lisp
  (setup (:package hl-todo)
    (:status opinionated
      (:global "M-i t" #'hl-todo-insert)))
#+end_src
*** huan                                                   :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 21:11]
:END:
#+begin_quote
Replace things with predefined alternatives
#+end_quote

#+begin_src emacs-lisp
  (setup (:package huan)
    (:global "C-=" #'huan-symbol
             "C-+" #'huan-defun)
    (with-eval-after-load 'embark
      (define-key embark-defun-map "`" #'huan-defun)
      (define-key embark-identifier-map "`" #'huan-symbol)))
#+end_src
*** iedit                                                  :editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:51]
:END:
#+begin_quote
Edit multiple regions in the same way simultaneously.
#+end_quote

#+begin_src emacs-lisp
(setup (:package iedit))
#+end_src
*** jq-mode
:PROPERTIES:
:CREATED_TIME: [2022-05-30 Mon 14:03]
:END:
#+begin_quote
Edit jq scripts.
#+end_quote

#+begin_src emacs-lisp
(setup (:package jq-mode))
#+end_src
*** jsonian
:PROPERTIES:
:CREATED_TIME: [2022-06-28 Tue 23:59]
:END:
#+begin_quote
A major mode for editing JSON files
[[https://github.com/iwahbe/jsonian]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package jsonian)
    (:file-match "\\.json\\'" "\\.lock\\'")

    (with-eval-after-load "org-src"
      (add-to-list 'org-src-lang-modes
                   '("json" . jsonian))))
#+end_src
*** COMMENT json-mode                          :major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Major mode for editing JSON files.
[[https://github.com/joshwnj/json-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package json-mode)
    (:file-match "\\.json\\'" "\\.lock\\'"))
#+end_src
*** kind-icon                                                   :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:22]
:END:
#+begin_quote
Completion kind icons
#+end_quote

#+begin_src emacs-lisp
  (setup (:package kind-icon)
    (:set kind-icon-default-face 'corfu-default)

    (with-eval-after-load 'corfu
      (require 'kind-icon)
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src
*** language-detection
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 20:00]
:END:
#+begin_quote
Automatic language detection from code snippets
[[https://github.com/andreasjansson/language-detection.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package language-detection))
#+end_src
*** license-templates                              :development:OSS:
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 14:30]
:END:
#+begin_quote
Create LICENSE using GitHub API
[[https://github.com/jcs-elpa/license-templates]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package license-templates))
#+end_src
*** link-hint                                                :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 17:39]
:END:
#+begin_quote
Use avy to open, copy, etc. visible links
[[https://github.com/noctuid/link-hint.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package link-hint)
    (:global "M-g f" #'link-hint-open-link)

    ;; Extra bindings for particular modes
    (:with-feature info
      (:when-loaded
        (:with-map Info-mode-map
          (:bind "f" #'link-hint-open-link)))))
#+end_src
*** lispy                          :Emacs__Lisp:structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:36]
:END:
#+begin_quote
vi-like Paredit.
[[https://github.com/abo-abo/lispy]]
#+end_quote

For Emacs Lisp, I use lispy.

#+begin_src emacs-lisp
  (setup (:package lispy)
    (:hook
     (defun akirak/lispy-invert-puni-mode ()
       "Turn off `puni-mode' when `lispy-mode' is on."
       (when (featurep 'puni)
         (puni-mode (not lispy-mode)))))

    ;; Adoption of lispy is opinionated.
    (:status opinionated
      (:set lispy-key-theme '(special lispy))

      (:hook-into lisp-mode
                  emacs-lisp-mode
                  lisp-data-mode
                  lisp-interaction-mode
                  ielm-mode
                  eval-expression-minibuffer-setup)

      (:unbind "M-i")

      (:with-map lispy-mode-map-lispy
        ;; Prevent conflicts with other custom keybindings
        (:unbind "C-,"
                 "M-<left>"
                 "M-<right>"
                 "M-m"
                 "M-o"
                 "<C-return>"
                 "<M-return>"
                 "<M-RET>"))))
#+end_src

Lispy is not turned on by default.
Its configuration is about my habits, so it is put in [[file:compat.el::(setup lispy][compat.el]].
*** macrostep                               :emacs_lisp:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:52]
:END:
#+begin_quote
interactive macro expander
#+end_quote

#+begin_src emacs-lisp
(setup (:package macrostep))
#+end_src

To use it, turn on =macrostep-mode=.

*** magit                                                      :git:
#+begin_quote
A Git porcelain inside Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit)
    (:nixpkgs git)

    (:set magit-save-repository-buffers 'dontask)

    ;; Twist allows me to get the git version of any package if necessary, so
    ;; there is no point in making this IO-intensive function run.
    (advice-add 'magit-version :override #'ignore)

    (:with-map magit-status-mode-map
      (:bind "^" (defun akirak/magit-dired-up ()
                   "Show the parent directory using dired."
                   (interactive)
                   (dired (thread-last
                            default-directory
                            (string-remove-suffix "/")
                            (file-name-directory))))))

    ;; Replace the binding to compose-message
    (define-key ctl-x-map "m" #'magit-dispatch)
    (define-key ctl-x-map "j" #'magit-status)
    (define-key ctl-x-x-map "e" (defun akirak/edit-source-file ()
                                  "Visit a corresponding file in a Git repository."
                                  (interactive)
                                  (if (and buffer-file-name
                                           (file-in-directory-p buffer-file-name "/nix/store/"))
                                      (call-interactively #'akirak-twist-find-git-source)
                                    (magit-blob-visit-file))))
    (define-key ctl-x-x-map "m" #'magit-file-dispatch)

    (:status opinionated
      (:set magit-display-buffer-function
            ;; Based on 'magit-display-buffer-same-window-except-diff-v1
            (defun akirak/magit-display-buffer (buffer)
              (let ((action (with-current-buffer buffer
                              (cond
                               ((derived-mode-p 'magit-diff-mode)
                                '(nil (inhibit-same-window . t)))
                               ((derived-mode-p 'magit-process-mode)
                                '(akirak-window-display-buffer-prefer-other-pane))
                               (t
                                '(display-buffer-same-window))))))
                (prog1 (display-buffer buffer action)
                  (with-current-buffer buffer
                    (when (derived-mode-p 'magit-process-mode)
                      (goto-char (point-max))
                      (recenter-top-bottom -1))))))))

    (:status personal
      (:set magit-repository-directories '(("~/" . 1)
                                           ("~/.config" . 1)
                                           ("~/work" . 3)
                                           ("~/archives/oss/" . 3)))

      (:when-loaded
        ;; Run the following commands to set up SSH_AUTH_SOCK environment
        ;; from GPG:
        ;;
        ;; gpg-connect-agent /bye
        ;; export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
        (unless (getenv "SSH_AUTH_SOCK")
          (condition-case-unless-debug err
              (progn
                (with-temp-buffer
                  (unless (= 0 (call-process "gpg-connect-agent"
                                             nil nil nil "/bye"))
                    (error "gpg-connect-agent failed")))
                (let ((sock (car (process-lines "gpgconf" "--list-dirs" "agent-ssh-socket"))))
                  (if (and sock (file-exists-p sock))
                      (progn
                        (setenv "SSH_AUTH_SOCK" sock)
                        (message "SSH_AUTH_SOCK set to %s" sock))
                    (error "Socket is nil or does not exist: %s" sock))))
            (error (message "Failed to initialize SSH_AUTH_SOCK: %s" err)))))))
#+end_src
**** Squash commits
#+begin_src emacs-lisp
  (setup squasher
    ;; https://github.com/akirak/squasher
    (:nixpkgs "squasher")

    (defun akirak/squasher-from-revision-at-point ()
      (interactive)
      (if-let (commit (magit-rev-parse
                       (magit-thing-at-point 'git-revision t)))
          (when (zerop (with-temp-buffer
                         (prog1 (call-process "squasher"
                                              nil t nil
                                              "--base" commit)
                           (message (buffer-string)))))
            (revert-buffer))
        (user-error "No commit at point"))))
#+end_src
*** magit-delta                                            :VC:diff:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 13:33]
:END:
#+begin_quote
Use Delta when displaying diffs in Magit
[[https://github.com/dandavison/magit-delta]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-delta)
    (:nixpkgs "delta")
    (:hook-into magit-mode-hook)

    (setq magit-delta-default-dark-theme "base16")

    (:when-loaded
      (unless (member "magit-delta" magit-delta-delta-args)
        (setq magit-delta-delta-args
              (append magit-delta-delta-args
                      '("--features" "magit-delta"))))))
#+end_src
*** magit-section
:PROPERTIES:
:CREATED_TIME: [2022-09-16 Fri 10:35]
:END:

#+begin_src emacs-lisp
  (setup (:package magit-section)
    (:with-map magit-section-mode-map
      ;; I don't want to override global bindings on these keys.
      (:unbind "M-1" "M-2" "M-3" "M-4"
               [C-tab] [M-tab])))
#+end_src
*** magit-todos                                                 :VC:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Show source file TODOs in Magit
[[http://github.com/alphapapa/magit-todos]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-todos)
    (:set magit-todos-exclude-globs '("**/*.map")))
#+end_src

I won't turn on the mode by default, because it reduces the performance to some extent.
*** marginalia
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:49]
:END:
#+begin_quote
Enrich existing commands with completion annotations
#+end_quote

#+begin_src emacs-lisp
  (setup (:package marginalia)
    (:hook-into after-init-hook)

    (:with-map minibuffer-local-map
      (:bind "M-a" #'marginalia-cycle))

    (:when-loaded
      (add-to-list 'marginalia-annotator-registry
                   '(project-root akirak-project-root-annotator builtin none))
      (add-to-list 'marginalia-annotator-registry
                   '(directory marginalia-annotate-file builtin none))))
#+end_src
*** markdown-mode                                      :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 14:12]
:END:
#+begin_quote
Major mode for Markdown-formatted text
[[https://jblevins.org/projects/markdown-mode/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package markdown-mode)
    (:file-match "\\.md\\'" "\\.markdown\\'")
    (:with-mode gfm-mode
      (:file-match "README.md\\'"))

    (:bind "C-c '" #'markdown-edit-code-block))
#+end_src
*** mermaid-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 13:52]
:END:
#+begin_quote
major mode for working with mermaid graphs
[[https://github.com/abrochard/mermaid-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mermaid-mode)
    (:nixpkgs "nodePackages.mermaid-cli")

    (:file-match "\\.mmd\\'"))
#+end_src
*** mini-modeline                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-03-21 Mon 23:16]
:END:
#+begin_quote
Display modeline in minibuffer
[[https://github.com/kiennq/emacs-mini-modeline]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mini-modeline)
    (:set mini-modeline-enhance-visual nil
          mini-modeline-echo-duration 3
          ;; If this option is set to t, it seems to suppress header lines, so I
          ;; will set it to nil.
          mini-modeline-display-gui-line nil
          mini-modeline-l-format '((mode-line-modified mode-line-modified)
                                   (mode-line-mule-info mode-line-mule-info)
                                   " "
                                   (:eval (akirak-mode-line-directory))
                                   "%b"
                                   "%n %p (%l,%c) "
                                   (:eval (string-trim (format-mode-line mode-line-modes)))
                                   (vc-mode vc-mode))
          mini-modeline-r-format '("%e"
                                   (mode-line-process ("  " mode-line-process))
                                   (current-input-method-title
                                    (current-input-method-title " "))
                                   ;; I'll show mode-line-misc-info in the header line,
                                   ;; as it contains information for eglot, which-func, etc.
                                   ;; which are specific to buffers.
                                   ;; (mode-line-misc-info mode-line-misc-info)

                                   ;; However, global-mode-string, which is part
                                   ;; of mode-line-misc-info by default, should be
                                   ;; included here. See also bindings.
                                   (global-mode-string global-mode-string)
                                   (mode-line-client mode-line-client)
                                   (:eval (format-time-string " %b %d %a W%U %H:%M"))))
    (:hook-into emacs-startup-hook)

    (defun akirak-mode-line-directory ()
      (let* ((base (buffer-base-buffer))
             (filename (buffer-file-name base))
             (dir (when filename
                    (abbreviate-file-name (file-name-directory filename)))))
        (if filename
            (concat (if-let (project (project-current nil dir))
                        (let ((root (string-remove-suffix "/" (project-root project))))
                          (concat (file-name-directory root)
                                  (propertize (file-name-nondirectory root)
                                              'face 'font-lock-constant-face)
                                  (propertize (string-remove-prefix root dir)
                                              'face 'font-lock-string-face)))
                      (propertize dir 'face 'font-lock-string-face))
                    (if base
                        (concat (file-name-nondirectory filename)
                                " -> [indirect]")
                      ""))
          ""))))
#+end_src
*** mlscroll                                         :aesthetics:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
A scroll bar for the modeline
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mlscroll)
    (:set mlscroll-in-color (face-attribute 'tool-bar :background nil t)
          mlscroll-out-color (face-attribute 'default :background nil t))
    (:with-mode mlscroll-mode
      (:hook-into after-init-hook)))
#+end_src
*** modus-themes                                                        :themes:
:PROPERTIES:
:CREATED_TIME: [2022-09-20 Tue 20:43]
:END:

#+begin_src emacs-lisp
  (setup (:package modus-themes))
#+end_src
*** move-dup                                               :editing:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 20:59]
:END:
#+begin_quote
Eclipse-like moving and duplicating lines or rectangles
#+end_quote

#+begin_src emacs-lisp
  (setup (:package move-dup)
    (:bind "M-p" #'move-dup-move-lines-up
           "M-n" #'move-dup-move-lines-down
           "C-M-p" #'move-dup-duplicate-up
           "C-M-n" #'move-dup-duplicate-down)

    (add-hook 'prog-mode-hook #'move-dup-mode)
    (add-hook 'text-mode-hook
              (defun akirak/turn-on-move-dup-mode ()
                (unless (derived-mode-p 'org-mode 'markdown-mode)
                  (move-dup-mode 1)))))
#+end_src
*** nickel-mode
:PROPERTIES:
:CREATED_TIME: [2022-03-27 Sun 18:25]
:END:
#+begin_quote
description
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nickel-mode)
    (:file-match "\\.ncl\\'"))
#+end_src
*** nix26                                              :Nix:project:
:PROPERTIES:
:CREATED_TIME: [2022-02-26 Sat 17:12]
:END:
#+begin_quote
Frontend for experimental commands of Nix
[[https://github.com/emacs-twist/nix26.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package nix26))
#+end_src
*** nix-mode                                                   :Nix:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Major mode for editing .nix files
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nix-mode)
    (:file-match "\\.nix\\'")
    (:mode-repl nix-repl)
    (:reformatters
     (nixpkgs-fmt :program "nixpkgs-fmt")
     (alejandra :program "alejandra"))
    (:compilation-error
     ;; Unused argument `hsuper` at default.nix:9:24-15:6
     (nix-linter " at \\([^:]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:digit:]]+$"
                 1 2 3)))
#+end_src
*** nix-update
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 15:44]
:END:
#+begin_quote
Update "fetch" blocks in .nix expressions
[[https://github.com/jwiegley/nix-update-el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package nix-update))
#+end_src
*** nov                                               :reading:EPUB:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Featureful EPUB reader mode
[[https://depp.brause.cc/nov.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nov)
    ;; unzip is required for opening EPUB
    (:nixpkgs unzip)
    (:file-match "\\.epub\\'")
    (:set nov-text-width akirak/default-body-width)

    (:hook (defun akirak/nov-setup ()
             (when (require 'olivetti nil t)
               (olivetti-mode 1)
               (setq-local nov-text-width nil)
               ;; Re-render as olivetti changes the window width.
               (add-hook 'olivetti-expand-hook
                         #'nov-render-document
                         nil t)))))
#+end_src
*** olivetti                                               :writing:
:PROPERTIES:
:CREATED_TIME: [2022-04-22 Fri 23:59]
:END:
#+begin_quote
Minor mode for a nice writing environment
[[https://github.com/rnkn/olivetti]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package olivetti)
    (:set olivetti-body-width akirak/default-body-width)

    ;; Also hooked into nov-mode. See the package setting
    (:hook-into org-mode-hook)

    ;; Implement `olivetti-set-width-hook' without tweaking the upstream code.
    (advice-add 'olivetti-expand
                :after
                (lambda (&rest _args)
                  (run-hooks 'olivetti-expand-hook))))
#+end_src
*** orderless                                           :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:14]
:END:
#+begin_quote
Completion style for matching regexps in any order
#+end_quote

#+begin_src emacs-lisp
  (setup (:package orderless)
    (:set completion-styles '(orderless)))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

It is also possible to use Helm as a completion style. See https://github.com/oantolin/orderless#ivy-and-helm. I will use orderless primarily because it is smaller than Helm.
*** orgit                                                    :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:28]
:END:
#+begin_quote
Support for Org links to Magit buffers
#+end_quote

#+begin_src emacs-lisp
(setup (:package orgit))
#+end_src
*** package-lint                                 :Emacs:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:06]
:END:
#+begin_quote
A linting library for elisp package authors
[[https://github.com/purcell/package-lint]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package package-lint))
#+end_src
*** page-break-lines                                        :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:37]
:END:
#+begin_quote
Display ^L page breaks as tidy horizontal lines
[[https://github.com/purcell/page-break-lines]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package page-break-lines)
    (:hook-into doc-mode-hook
                help-mode-hook
                magit-mode-hook
                compilation-mode-hook
                haskell-mode-hook))
#+end_src
*** pinyin                                                 :Chinese:
:PROPERTIES:
:CREATED_TIME: [2022-08-23 Tue 23:59]
:END:
#+begin_quote
Convert Hanzi to Pinyin (汉字转拼音)
#+end_quote

#+begin_src emacs-lisp
(setup (:package pinyin))
#+end_src
*** plz
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 15:15]
:END:
#+begin_quote
HTTP library
[[https://github.com/alphapapa/plz.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package plz))
#+end_src
*** COMMENT pocket-reader                          :reading:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-05 Tue 18:19]
:END:
#+begin_quote
Client for Pocket reading list
[[https://github.com/alphapapa/pocket-reader.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package pocket-reader))
#+end_src
*** COMMENT poly-astro                                     :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 12:37]
:END:
#+begin_quote
A polymode for astro files
[[https://github.com/pablo-abc/.emacs.d/tree/master/lisp/poly-astro]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package poly-astro)
    (:with-mode poly-astro
      (:file-match "\\.astro\\'")))
#+end_src
*** popper                                                 :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 23:59]
:END:
#+begin_quote
Summon and dismiss buffers as popups
[[https://github.com/karthink/popper]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package popper)
    (:set popper-window-height 0.3
          popper-display-function #'popper-select-popup-at-bottom
          akirak/display-popup-window-function popper-display-function
          ;; You may have to re-enable popper-mode after updating this variable
          popper-reference-buffers `("\\*Messages\\*$"
                                     "\\*Backtrace\\*"
                                     "\\*Org-Dog-Context\\*"
                                     "^\\*Org Note\\*"
                                     "^\\*Scratch-Input-Method"
                                     "^\\*Pp Eval Output\\*"
                                     "^ \\*Agenda Commands\\*"
                                     inferior-haskell-mode
                                     lisp-interaction-mode
                                     vterm-mode))

    (defun akirak/popper-display-buffer (buffer)
      (pop-to-buffer buffer)
      (with-current-buffer (get-buffer buffer)
        (goto-char (point-max))
        (recenter -1 t)))

    (:hook-into after-init-hook)
    (:bind "M-\"" #'popper-cycle
           "M-' M-'" #'popper-toggle-latest
           "M-' t" #'akirak-vterm-for-project
           "M-' c" (defun akirak/compilation-buffer ()
                     (interactive)
                     (akirak/popper-display-buffer "*compilation*"))))
#+end_src
*** posframe                                            :UI:library:
:PROPERTIES:
:CREATED_TIME: [2022-03-25 Fri 10:57]
:END:
#+begin_quote
Pop a posframe (just a frame) at point
[[https://github.com/tumashu/posframe]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package posframe))
#+end_src
*** project-hercules                           :project:keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 15:16]
:END:
#+begin_quote
Per-project transient keymaps
[[https://github.com/akirak/project-hercules.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package project-hercules)
    (:global "M-SPC" project-hercules-dispatch)

    (:set project-hercules-mix-command-runner #'akirak-vterm-run-in-project)

    (:when-loaded
      (:with-map project-hercules-parent-map
        (:bind "d" #'project-dired))
      (:also-load project-hercules-config)

      (defmacro akirak/define-nix-run (name package &optional args)
        (declare (indent 1))
        `(defun ,(intern (concat "akirak/" name)) (args)
           (interactive (list (if current-prefix-arg
                                  (read-string "Arguments: " ,args)
                                ,args)))
           (let ((default-directory (project-root (project-current))))
             (compile (concat "nix run .#" ,package
                              " --print-build-logs"
                              (if args (concat " " args) ""))))))

      (require 'akirak-twist)
      (let ((map (project-hercules-make-map akirak-twist-root-directory
                                            :transient t)))
        (define-key map (kbd "E")
                    (akirak/define-nix-run "run-emacs"
                      "emacs-personalized" "--impure"))
        (define-key map (kbd "L")
                    (akirak/define-nix-run "lock-elisp-packages"
                      "lock" "--impure"))
        (define-key map (kbd "U")
                    (akirak/define-nix-run "update-elisp-packages"
                      "update-elisp")))))
#+end_src
*** puni                                       :structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:24]
:END:
#+begin_quote
Parentheses Universalistic
#+end_quote

[[https://github.com/AmaiKinono/puni][puni]] will replace smartparens, expand-region, and paredit (which I didn't adopt in favour of lispy).

#+begin_src emacs-lisp
  (setup (:package puni)
    (:hook-into prog-mode
                sgml-mode
                nxml-mode)

    (:unbind "C-M-a" "C-M-e" "C-w")

    ;; TODO: Bind commands
    ;;
    ;; Marking commands
    ;; Sexp manipulating commands
    (:bind))
#+end_src

The following types of commands don't have pre-defined keybindings in =puni-mode=, so I have to manually bind them:

- Marking commnads
- Sexp manipulating commands

For auto-pairing, you can use =electric-pair-mode= along with puni.

Limitations:

- puni doesn't handle JSX in typescript-mode with tree-sitter.
**** akirak-puni
#+begin_src emacs-lisp
  (setup akirak-puni
    (add-hook 'puni-mode-hook #'akirak-puni-mode-setup))
#+end_src

This contains workarounds for puni-mode, like mode-specific soft deletion.
*** rainbow-delimiters                                      :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:
#+begin_quote
Highlight brackets according to their depth
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rainbow-delimiters)
    (:hook-into emacs-lisp-mode))
#+end_src
*** rainbow-mode                                            :colors:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Colorize color names in buffers
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rainbow-mode)
    (:hook-into prog-mode))
#+end_src
*** reformatter                                         :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Define commands which run reformatters on the current buffer
#+end_quote

#+begin_src emacs-lisp
  (setup (:package reformatter)
    (:reformatters
     ;; If you use prettier, you need to install its executable separately.
     (prettier
      :program "prettier"
      :args (list "--stdin-filepath" (buffer-file-name)))))
#+end_src
*** repl-toggle                                :windows:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:05]
:END:
#+begin_quote
Switch to/from repl buffer for current major-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package repl-toggle)
    (:set rtog/fullscreen nil
          rtog/goto-buffer-fun akirak/display-popup-window-function)

    ;; Unbind the default key
    (:unbind "C-c C-z")
    (:global "<C-return>" #'rtog/toggle-repl))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/repl-toggle][~tomterl/repl-toggle - sourcehut git]].
*** restclient                                                 :web:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:58]
:END:
#+begin_quote
An interactive HTTP client for Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package restclient)
    (:file-match "\\.restclient\\'"))
#+end_src
*** riben                                                 :Japanese:
#+begin_quote
A dumb Japanese input method
[[https://github.com/akirak/emacs-dumb-japanese]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package riben)
    (:bind "C-j" #'riben-dispatch
           "C-S-j" #'riben-inc-counter
           "q" #'riben-mode-disable
           "@" #'riben-switch-to-english-mode)

    (set-language-info "Japanese" 'input-method 'japanese-riben)

    ;; Workaround for commands in `org-mode-map' and other maps.
    (:when-loaded
      (dolist (key (mapcar #'car riben-decode-punctuation-alist))
        (define-key riben-mode-map (vector key) #'riben-self-insert-command))))
#+end_src
**** avy-riben
#+begin_quote
Jump to Japanese text using avy
[[https://github.com/akirak/emacs-dumb-japanese]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package avy-riben))
#+end_src
**** riben-english
#+begin_src emacs-lisp
  (setup riben-english
    (:bind "C-j" #'riben-english-to-japanese
           "C-S-j" #'riben-english-confirm))
#+end_src
*** rich-minority                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-03-21 Mon 23:27]
:END:
#+begin_quote
Clean-up and Beautify the list of minor-modes.
[[https://github.com/Malabarba/rich-minority]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rich-minority)
    (:set rm-whitelist "envrc")
    (:hook-into after-init-hook))
#+end_src
*** ruby-end
:PROPERTIES:
:CREATED_TIME: [2022-04-29 Fri 23:59]
:END:
#+begin_quote
Automatic insertion of end blocks for Ruby
[[http://github.com/rejeep/ruby-end]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ruby-end)
    (:hook-into elixir-mode)

    ;; Based on https://github.com/elixir-editors/emacs-elixir#pairing
    (add-hook 'elixir-mode-hook
              (defun akirak/elixir-setup-ruby-end ()
                (setq-local ruby-end-expand-keywords-before-re "\\(?:^\\|\\s-+\\)\\(?:do\\)"
                            ruby-end-check-statement-modifiers nil))))
#+end_src
*** separedit
:PROPERTIES:
:CREATED_TIME: [2022-06-21 Tue 15:12]
:END:
#+begin_quote
Edit comment/string/docstring/code block in separate buffer
[[https://github.com/twlz0ne/separedit.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package separedit)
    (:set separedit-default-mode 'markdown-mode)
    (:global "C-c '" #'separedit))
#+end_src
*** shr-tag-pre-highlight
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 19:48]
:END:
#+begin_quote
Syntax highlighting code block in HTML
[[https://github.com/xuchunyang/shr-tag-pre-highlight.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package shr-tag-pre-highlight)
    (:when-loaded
      (:set shr-tag-pre-highlight-lang-modes
            (append '(("elixir" . elixir))
                    shr-tag-pre-highlight-lang-modes)))
    (with-eval-after-load 'shr
      (add-to-list 'shr-external-rendering-functions
                   '(pre . shr-tag-pre-highlight))))
#+end_src
*** string-inflection                                      :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:07]
:END:
#+begin_quote
underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names
#+end_quote

#+begin_src emacs-lisp
(setup (:package string-inflection))
#+end_src
*** COMMENT suggest           :Emacs__Lisp:development:help:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 18:10]
:END:

#+begin_src emacs-lisp
(setup (:package suggest))
#+end_src
*** super-save                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Auto-save buffers, based on your activity.
[[https://github.com/bbatsov/super-save]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package super-save)
    (:hook-into emacs-startup-hook)
    (:set super-save-auto-save-when-idle t
          super-save-idle-duration 120
          super-save-remote-files nil
          super-save-triggers '(consult-buffer
                                tab-next
                                tab-previous
                                tab-new
                                tab-close
                                find-file
                                org-dog-find-file
                                akirak-consult-project-file
                                akirak-consult-dir)))
#+end_src

=super-save-mode= can be annoying when you use org-crypt.
Follow an instruction at [[https://github.com/bbatsov/super-save/issues/10][super-save disable when file header is present. · Issue #10 · bbatsov/super-save · GitHub]]
*** svelte-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 20:31]
:END:
#+begin_quote
Emacs major mode for Svelte
#+end_quote

#+begin_src emacs-lisp
  (setup (:package svelte-mode)
    (:file-match "\\.svelte\\'")
    (:set svelte-display-submode-name t)
    (:auto-insert
     ("\\.svelte\\'"
      . (> "<script lang=\"ts\">\n</script>\n\n"
           _ "\n\n<style>\n\n</style>\n"))))
#+end_src
*** svg-lib                                       :library:graphics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:30]
:END:
#+begin_quote
SVG tags, progress bars & icons
[[https://github.com/rougier/svg-lib]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package svg-lib))
#+end_src
*** COMMENT svg-tag-mode            :visual:nano:aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:26]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-tag-mode)
    (autoload #'svg-tag-mode "svg-tag-mode.el")
    (:hook-into after-init-hook))
#+end_src
*** symbol-overlay                                         :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:24]
:END:
#+begin_quote
Highlight symbols with keymap-enabled overlays
[[https://github.com/wolray/symbol-overlay/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package symbol-overlay)
    (:global "C-c s" #'symbol-overlay-put)

    (add-hook 'symbol-overlay-jump-hook
              (defun akirak/symbol-overlay-org-show-entry ()
                (when (derived-mode-p 'org-mode)
                  (org-show-entry)))))
#+end_src

=embark= can substitute for most of the functionalities of the package, but I am used to this package.
*** tagedit                                                    :web:
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 21:12]
:END:
#+begin_quote
Some paredit-like features for html-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tagedit)
    ;; The upstream lacks this autoload
    (autoload 'tagedit-mode "tagedit"))
#+end_src
*** taxy                                                   :library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:
#+begin_quote
Programmable taxonomical grouping for arbitrary objects
[[https://github.com/alphapapa/taxy.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package taxy))
#+end_src
*** taxy-magit-section                                  :UI:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:
#+begin_quote
View Taxy structs in a Magit Section buffer
[[https://github.com/alphapapa/taxy.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package taxy-magit-section))
#+end_src
*** titlecase                                              :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 17:13]
:END:
#+begin_quote
Title-case phrases
[[https://github.com/duckwork/titlecase.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package titlecase))
#+end_src

The [[https://github.com/duckwork/titlecase.el][readme]] of this package contains helpful links on capitalization.
*** trashed
:PROPERTIES:
:CREATED_TIME: [2022-07-09 Sat 23:59]
:END:
#+begin_quote
Viewing/editing system trash can
[[https://github.com/shingo256/trashed]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package trashed))
#+end_src
*** tree-sitter                                 :syntax:tree_sitter:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:36]
:END:
#+begin_quote
Incremental parsing system
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tree-sitter)
    (:hook tree-sitter-hl-mode)

    (:when-loaded
      ;; Based on https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-849355222
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(typescript-tsx-mode . tsx))))
#+end_src

- =tree-sitter-hl-mode= overrides highlighting provided by =font-lock-mode=.
**** tree-sitter-langs
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:37]
:END:
#+begin_quote
Grammar bundle for tree-sitter
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tree-sitter-langs)
    (:with-mode tree-sitter-mode
      (:hook-into typescript-mode-hook
                  typescript-tsx-mode-hook)))
#+end_src
*** turbo-log                                :development:debugging:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:55]
:END:
#+begin_quote
The simple package for fast log selected region
[[https://github.com/Artawower/turbo-log]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package turbo-log))
#+end_src
*** twist                                            :configuration:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 14:12]
:END:
#+begin_quote
Frontend to Twist configuration
[[https://github.com/akirak/twist.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package twist))
#+end_src
**** akirak-twist
#+begin_src emacs-lisp
  (setup akirak-twist
    (with-eval-after-load 'embark
      (define-key embark-library-map
                  "f" #'akirak-twist-find-git-source))
    (:global "<f12> e b" #'akirak-twist-build-packages
             "<f12> e f" #'akirak-twist-find-git-source
             "<f12> e u" #'akirak-twist-update-emacs-inputs))
#+end_src
*** typescript-mode                                     :major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 18:39]
:END:
#+begin_quote
Major mode for editing typescript
[[http://github.com/ananthakumaran/typescript.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package typescript-mode)
    (:file-match "\\.ts\\'")
    (:set typescript-indent-level 2)
    (:also-load akirak-typescript)

    ;; C-c ' should be bound to separedit globally, and I don't want to override
    ;; it in typescript-mode.
    (:bind "C-c `" #'typescript-convert-to-template)
    (:unbind "C-c '")

    (:hook (defun akirak/typescript-setup ()
             (add-to-list (make-local-variable 'electric-pair-pairs)
                          '(?< . ?>))))

    (:compilation-error
     (eslint "^\\(\\(?:ERROR\\|WARNING\\)\\) in \\([^z-a]*?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
             2 3 4 (1 . 1))
     (eslint-fix "^\\(/home/.+\\)\n[[:space:]]+\\([[:digit:]]+\\):\\([[:digit:]]+\\)[[:space:]]+\\(\\(?:WARNING\\|error\\)\\)"
                 1 2 3 (4 . 4))
     (prettier "^\\[\\(\\(?:WARNING\\|error\\)\\)] \\([^z-a]*?\\): [^z-a]+(\\([[:digit:]]+\\):\\([[:digit:]]+\\))"
               2 3 4 (1 . 1))))
#+end_src
**** akirak-typescript
#+begin_src emacs-lisp
  (setup akirak-typescript
    (:with-mode typescript-mode
      (:local-set beginning-of-defun-function #'akirak-typescript-beginning-of-defun
                  end-of-defun-function #'akirak-typescript-end-of-defun)))
#+end_src
**** typescript-tsx-mode
#+begin_src emacs-lisp
  (setup typescript-tsx-mode
    (:file-match "\\.tsx\\'")

    ;; https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-849355222
    (define-derived-mode typescript-tsx-mode typescript-mode
      "typescript-tsx")

    (with-eval-after-load 'typescript-mode
      (define-key typescript-tsx-mode-map (kbd "C-c C-e") #'akirak-jsx-close-tag)))
#+end_src
*** COMMENT unmodified-buffer                              :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:58]
:END:

#+begin_src emacs-lisp
  (setup (:package unmodified-buffer)
    (:hook-into after-init-hook))
#+end_src
*** use-package
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 14:04]
:END:
I don't use use-package, but I only need indentation:

#+begin_src emacs-lisp
  (put 'use-package 'lisp-indent-function 1)
#+end_src
*** vertico                                  :minibuffer:completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 16:59]
:END:
#+begin_quote
VERTical Interactive COmpletion
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vertico)
    (:hook-into after-init-hook)
    (:set vertico-resize t)
    (:with-map vertico-map
      (:bind "C-r" #'previous-matching-history-element
             "C-s" #'next-matching-history-element
             "C-o" #'vertico-next-group
             "C-S-o" #'vertico-previous-group)))
#+end_src

For more tips, see [[https://github.com/minad/vertico/wiki][Home · minad/vertico Wiki · GitHub]].

An alternative is icomplete (or icomplete-vertical).
See the following [[https://github.com/minad/vertico][comment]] for differences:

#+begin_quote
In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum.
#+end_quote
*** visual-fill-column
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
fill-column for visual-line-mode
[[https://codeberg.org/joostkremers/visual-fill-column]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package visual-fill-column)
    (:set visual-fill-column-center-text t
          visual-fill-column-width 100))
#+end_src
*** vterm                                         :terminal:process:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 16:50]
:END:
#+begin_quote
Fully-featured terminal emulator
[[https://github.com/akermu/emacs-libvterm]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vterm))
#+end_src
*** vue-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-11 Thu 12:11]
:END:
#+begin_quote
Major mode for vue component based on mmm-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vue-mode)
    (:file-match "\\.vue\\'"))
#+end_src
*** web-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-28 Thu 18:37]
:END:
#+begin_quote
major mode for editing web templates
[[https://web-mode.org]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package web-mode)
    (:set web-mode-enable-front-matter-block t)
    (:file-match "\\.mdx\\'"
                 "\\.html?\\'"
                 "\\.html\\.h?eex\\'"
                 "\\.astro\\'"
                 "\\.sface\\'")

    (:auto-insert
     ("\\.astro\\'" . (> "---\n" _ "\n---\n"))))
#+end_src
*** which-key                                :usability:keybindings:
#+begin_quote
Display available keybindings in popup
[[https://github.com/justbur/emacs-which-key]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package which-key)
    (:hook-into after-init-hook)
    (:hook which-key-setup-side-window-bottom))
#+end_src
*** whole-line-or-region
:PROPERTIES:
:CREATED_TIME: [2022-05-04 Wed 09:17]
:END:
#+begin_quote
Operate on current line if region undefined
#+end_quote

#+begin_src emacs-lisp
  (setup (:package whole-line-or-region)
    (:global "C-c r"
             (defun akirak/anzu-query-replace-on-line (arg)
               (interactive "P")
               (require 'anzu)
               (require 'whole-line-or-region)
               (whole-line-or-region-wrap-modified-region #'anzu-query-replace-regexp
                                                          (if (numberp arg)
                                                              arg
                                                            1)
                                                          arg))))
#+end_src
*** COMMENT windswap                                       :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:52]
:END:
#+begin_quote
Like windmove, but swaps buffers while moving point
#+end_quote

#+begin_src emacs-lisp
  (setup (:package windswap)
    (:status opinionated
      (:global "<C-S-left>" #'windswap-left
               "<C-S-right>" #'windswap-right
               "<C-S-up>" #'windswap-up
               "<C-S-down>" #'windswap-down

               ;; There are corresponding keybindings for windmove.
               "C-c {" #'windswap-left
               "C-c }" #'windswap-right)

      ;; These keys are bound by default in org-mode, so unbind them.
      (:with-feature org
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))
      (:with-feature org-agenda
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))))
#+end_src
*** ws-butler                                           :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:16]
:END:
#+begin_quote
Unobtrusively remove trailing whitespace.
[[https://github.com/lewang/ws-butler]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ws-butler)
    (:hook-into prog-mode-hook))
#+end_src
*** xterm-color
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 19:00]
:END:
#+begin_quote
ANSI, XTERM 256 and Truecolor support
[[https://github.com/atomontage/xterm-color]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package xterm-color))
#+end_src

This package is required by the configuration for buttercup now.
*** yaml-mode                                          :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-03-07 Mon 16:07]
:END:
#+begin_quote
Major mode for editing YAML files
[[https://github.com/yoshiki/yaml-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package yaml-mode)
    (:file-match "\\.ya?ml\\'"))
#+end_src
*** zig-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 14:14]
:END:
#+begin_quote
A major mode for the Zig programming language
#+end_quote

#+begin_src emacs-lisp
  (setup (:package zig-mode)
    (:file-match "\\.zig\\'"))
#+end_src
** Notes                                                      :@note:
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:CUSTOM_ID: develop-org-configuration
:END:
This configuration is maintained in Org.

1. Use =org-capture= to add an entry to the configuration file. It should contain a source block with a package name.
2. Add further configuration for the package. Optionally set tags on the heading.
3. When the buffer is saved, Org entries are automatically sorted by package name. This feature depends on the pre-commit hook of this repository.
*** Tag statistics
The following source block generates a list of tags in this document.
If you have [[https://github.com/alphapapa/org-ql/][org-ql]] installed, you can browse matching entries by pressing =C-c C-o= on a link in the table.

#+name: tag-statistics
#+begin_src emacs-lisp :tangle no
  (->> (org-ql-select (current-buffer)
         '(and (level > 2)
               (not (tags "ARCHIVE"))
               (not (tags "noexport")))
         :action '(org-get-tags))
       (--filter (not (member "@note" it)))
       (-flatten-n 1)
       (-group-by #'identity)
       (-map (pcase-lambda (`(,tag . ,items))
               (cons tag (length items))))
       (-sort (-on #'> #'cdr))
       (-map (pcase-lambda (`(,tag . ,count))
               (list (format "[[org-ql-search:tags:%s][%s]]" tag tag)
                     count))))
#+end_src

#+RESULTS: tag-statistics
| [[org-ql-search:tags:packages][packages]]            | 205 |
| [[org-ql-search:tags:visual][visual]]              |  14 |
| [[org-ql-search:tags:UI][UI]]                  |  13 |
| [[org-ql-search:tags:development][development]]         |  12 |
| [[org-ql-search:tags:formatting][formatting]]          |  11 |
| [[org-ql-search:tags:VC][VC]]                  |   9 |
| [[org-ql-search:tags:library][library]]             |   8 |
| [[org-ql-search:tags:completion][completion]]          |   8 |
| [[org-ql-search:tags:Emacs][Emacs]]               |   7 |
| [[org-ql-search:tags:editing][editing]]             |   7 |
| [[org-ql-search:tags:major__mode][major__mode]]         |   6 |
| [[org-ql-search:tags:keybindings][keybindings]]         |   6 |
| [[org-ql-search:tags:Emacs__Lisp][Emacs__Lisp]]         |   5 |
| [[org-ql-search:tags:process][process]]             |   4 |
| [[org-ql-search:tags:dired][dired]]               |   4 |
| [[org-ql-search:tags:files][files]]               |   4 |
| [[org-ql-search:tags:history][history]]             |   4 |
| [[org-ql-search:tags:writing][writing]]             |   4 |
| [[org-ql-search:tags:windows][windows]]             |   4 |
| [[org-ql-search:tags:IO][IO]]                  |   3 |
| [[org-ql-search:tags:parentheses][parentheses]]         |   3 |
| [[org-ql-search:tags:minibuffer][minibuffer]]          |   3 |
| [[org-ql-search:tags:navigation][navigation]]          |   3 |
| [[org-ql-search:tags:reference][reference]]           |   3 |
| [[org-ql-search:tags:project][project]]             |   3 |
| [[org-ql-search:tags:major_mode][major_mode]]          |   3 |
| [[org-ql-search:tags:web][web]]                 |   3 |
| [[org-ql-search:tags:structured__editing][structured__editing]] |   3 |
| [[org-ql-search:tags:Japanese][Japanese]]            |   3 |
| [[org-ql-search:tags:expansion][expansion]]           |   2 |
| [[org-ql-search:tags:diff][diff]]                |   2 |
| [[org-ql-search:tags:regexp][regexp]]              |   2 |
| [[org-ql-search:tags:links][links]]               |   2 |
| [[org-ql-search:tags:git][git]]                 |   2 |
| [[org-ql-search:tags:Nix][Nix]]                 |   2 |
| [[org-ql-search:tags:syntax][syntax]]              |   2 |
| [[org-ql-search:tags:tree_sitter][tree_sitter]]         |   2 |
| [[org-ql-search:tags:configuration][configuration]]       |   2 |
| [[org-ql-search:tags:performance][performance]]         |   1 |
| [[org-ql-search:tags:help][help]]                |   1 |
| [[org-ql-search:tags:prog_mode][prog_mode]]           |   1 |
| [[org-ql-search:tags:text_mode][text_mode]]           |   1 |
| [[org-ql-search:tags:text][text]]                |   1 |
| [[org-ql-search:tags:profiling][profiling]]           |   1 |
| [[org-ql-search:tags:Prolog][Prolog]]              |   1 |
| [[org-ql-search:tags:bibliography][bibliography]]        |   1 |
| [[org-ql-search:tags:capture][capture]]             |   1 |
| [[org-ql-search:tags:documentation][documentation]]       |   1 |
| [[org-ql-search:tags:secrets][secrets]]             |   1 |
| [[org-ql-search:tags:clipboard][clipboard]]           |   1 |
| [[org-ql-search:tags:@extra][@extra]]              |   1 |
| [[org-ql-search:tags:beancount][beancount]]           |   1 |
| [[org-ql-search:tags:testing][testing]]             |   1 |
| [[org-ql-search:tags:grep][grep]]                |   1 |
| [[org-ql-search:tags:search][search]]              |   1 |
| [[org-ql-search:tags:LSP][LSP]]                 |   1 |
| [[org-ql-search:tags:direnv][direnv]]              |   1 |
| [[org-ql-search:tags:dictionary][dictionary]]          |   1 |
| [[org-ql-search:tags:window][window]]              |   1 |
| [[org-ql-search:tags:screen__recording][screen__recording]]   |   1 |
| [[org-ql-search:tags:translation][translation]]         |   1 |
| [[org-ql-search:tags:Terraform][Terraform]]           |   1 |
| [[org-ql-search:tags:OSS][OSS]]                 |   1 |
| [[org-ql-search:tags:emacs_lisp][emacs_lisp]]          |   1 |
| [[org-ql-search:tags:aesthetics][aesthetics]]          |   1 |
| [[org-ql-search:tags:reading][reading]]             |   1 |
| [[org-ql-search:tags:EPUB][EPUB]]                |   1 |
| [[org-ql-search:tags:Chinese][Chinese]]             |   1 |
| [[org-ql-search:tags:colors][colors]]              |   1 |
| [[org-ql-search:tags:graphics][graphics]]            |   1 |
| [[org-ql-search:tags:debugging][debugging]]           |   1 |
| [[org-ql-search:tags:terminal][terminal]]            |   1 |
| [[org-ql-search:tags:usability][usability]]           |   1 |

Note that the table above is invisible on GitHub.
There is a table right before paragraph.
*** Web development
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:59]
:END:

The following packages (tagged =web=) are related to web development:

#+BEGIN: org-ql :query "tags:web" :columns (heading todo)
| Heading      | Todo |
|--------------+------|
| [[graphql-mode][graphql-mode]] |      |
| [[restclient][restclient]]   |      |
| [[tagedit][tagedit]]      |      |
#+END:

- You will want to test web APIs from inside Emacs. You can choose either [[https://github.com/pashky/restclient.el][restclient]] or [[https://github.com/federicotdn/verb][verb]] for this purpose.
- I am not sure if Indium or skewer-mode is suitable for modern web development. I have never used any of them.

*** Syntax support
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:20]
:END:

Use tree-sitter wherever possible.
There are some companion packages:

#+BEGIN: org-ql :query "tags:tree_sitter" :columns (heading todo)
| Heading           | Todo |
|-------------------+------|
| [[tree-sitter][tree-sitter]]       |      |
| [[tree-sitter-langs][tree-sitter-langs]] |      |
#+END:

There are some packages for structured editing:

#+BEGIN: org-ql :query "tags:structured__editing" :columns (heading todo)
| Heading     | Todo |
|-------------+------|
| [[lispy][lispy]]       |      |
| [[puni][puni]]        |      |
| [[akirak-puni][akirak-puni]] |      |
#+END:

I like the idea of [[https://github.com/mickeynp/combobulate][combobulate]], but it looks immature at present.
I will consider it in the future.
*** Readability
I want to care about readability in the following modes:

- [ ] nov
- [ ] info
- [ ] helpful

See examples in [[https://depp.brause.cc/nov.el/][nov.el: Major mode for reading EPUBs in Emacs]].
*** Extra dependencies
=@extra= tag is used to denote packages that requires large dependencies.
To use these features, they need to be turned on at build time.

#+BEGIN: org-ql :query "tags:@extra" :columns (heading todo)
| Heading   | Todo |
|-----------+------|
| [[beancount][beancount]] |      |
#+END:
*** Links
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:27]
:END:
#+BEGIN: org-ql :query "tags:links" :columns (heading todo)
| Heading   | Todo |
|-----------+------|
| [[orglink][orglink]]   |      |
| [[link-hint][link-hint]] |      |
| [[orgit][orgit]]     |      |
#+END:
*** Window management
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:07]
:END:
#+BEGIN: org-ql :query "tags:windows" :columns (heading todo)
| Heading       | Todo |
|---------------+------|
| [[fullframe][fullframe]]     |      |
| [[windmove][windmove]]      |      |
| [[winner][winner]]        |      |
| [[akirak-window][akirak-window]] |      |
| [[popper][popper]]        |      |
| [[repl-toggle][repl-toggle]]   |      |
| [[windswap][windswap]]      |      |
#+END:
*** Annotating
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:
You can use org-remark to annotate texts in file buffers.

To annotate EPUB files in nov.el, you can use org-noter. It also supports PDF files (via =pdf-tools= package), but I won't use pdf-tools package.
*** Natural languages
#+BEGIN: org-ql :query "tags:dictionary" :columns (heading todo)
| Heading | Todo |
|---------+------|
| [[fanyi][fanyi]]   |      |
#+END:
*** Grep
[[https://github.com/minad/affe][affe]] doesn't look mature enough, but I will re-evaluate it later.
*** Sh-emulation keybindings
I rebind the following keys in some keymaps to emulate a typical UNIX shell:
C-a, C-e, C-u, C-w, C-h.
** COMMENT Footer                                          :noexport:
# Local Variables:
# org-complete-tags-always-offer-all-agenda-tags: nil
# org-id-link-to-org-use-id: nil
# End:
