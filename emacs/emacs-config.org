* Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#built-ins][Built-ins]]
- [[#basic-appearances][Basic appearances]]
- [[#org][Org]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#profiling][Profiling]]
:END:
** Setup.el
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)
  
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))
  
    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
** Performance                                                    :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                               :profiling:initialization:
#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                                      :performance:
#+begin_src emacs-lisp
  (setup (:package gcmh)
    (gcmh-mode t))
#+end_src
*** Measuring init time                                    :initialization:
Display initialization time concisely at startup:

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collections"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
** Built-ins
# Note: These should never fail.

#+begin_src emacs-lisp
  (setup emacs
    (:option register-preview-delay 0)
  
    ;; Add an indicator if mutiple strings are read
    (advice-add #'completing-read-multiple
                :filter-args
                (defun crm-indicator (args)
                  (cons (concat "[CRM] " (car args)) (cdr args))))
  
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  
    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)
  
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration
** Basic appearances                                                :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.

The following theme packages are bundled with configuration:

#+begin_src emacs-lisp
  (setup (:package doom-themes))
  
  (setup (:package poet-theme))
#+end_src

No theme is set by default.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(when init-file-user (require 'doom-themes) (load-theme 'doom-tomorrow-night t))"
#+end_src
*** Font families
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/base-face-family-alist
    '((default . "Cascadia Code"))
    "Alist of font families for faces."
    :type '(alist :key-type symbol
                  :value-type string)
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face . ,family) value)
                 (if (member family families)
                     (set-face-attribute face nil :family family)
                   (message "Font family %s is not installed" family)))))))
#+end_src
** Org                                                            :packages:
Embrace Org as a common document format for Emacs.
** Packages                                                       :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** magit                                                             :git:
#+begin_src emacs-lisp
  (setup (:package magit))
#+end_src
*** which-key                                       :usability:keybindings:
#+begin_src emacs-lisp
  (setup (:package which-key)
    (which-key-mode t)
    (which-key-setup-side-window-bottom))
#+end_src
** Notes
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:END:
This configuration is maintained in Org, and [[file:.org-config.el][.org-config.el]] contains the configuration for the Org file. It uses [[https://github.com/akirak/org-starter][org-starter]], which is my package for maintaining file-specific Org configuration.

The workflow is as follows:

1. Use =org-capture= to add an entry with a source block to the configuration file.
2. Add further configuration for the package using =setup= and set tags on the heading.
3. Org entries are automatically sorted by package name when the buffer is saved.
*** Profiling
#+BEGIN: org-ql :query "tags: profiling" :columns (heading)
| Heading        |
|----------------|
| [[benchmark-init][benchmark-init]] |
#+END:
