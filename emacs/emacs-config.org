* An Optimist's Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#basic-appearances][Basic appearances]]
- [[#org][Org]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
:END:
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :compilation-error
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :compilation-error (&rest alist)
      "Add entries to the compilation error regexp alist."
      `(with-eval-after-load 'compile
         (dolist (entry (quote ,alist))
           (if (stringp (car entry))
               (add-to-list 'compilation-error-regexp-alist entry)
             (add-to-list 'compilation-error-regexp-alist (car entry))
             (add-to-list 'compilation-error-regexp-alist-alist entry))))))
#+end_src
*** :defer
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:19]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
      "Call a function at N seconds after init."
      `(add-hook 'after-init-hook
                 (lambda ()
                   (run-with-timer ,seconds nil
                                   ,(or func (setup-get 'hook)))))))
#+end_src
*** :mode-repl
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:41]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :mode-repl (repl-fn)
      "Add an entry to `rtog/mode-repl-alist'."
      `(progn
         (with-eval-after-load 'repl-toggle
           (push (cons ',(setup-get 'mode) ',repl-fn)
                 rtog/mode-repl-alist))
         (add-hook ',(setup-get 'hook)
                   #'repl-toggle-mode))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
*** :status
By default, settings inside =:status= clauses are not loaded.

#+begin_src emacs-lisp
  (defvar akirak/enabled-status-tags nil)

  (eval-when-compile
    (define-setup-macro :status (tag &rest progn)
      "Conditionally expand the macro."
      :indent 1
      (when (or (eq t akirak/enabled-status-tags)
                (memq tag akirak/enabled-status-tags))
        (macroexp-progn progn))))
#+end_src
** Performance                                                    :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                               :profiling:initialization:
#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                                      :performance:
#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:option gcmh-verbose debug-on-error))
#+end_src
** Custom conventions                          :packages:
*** Prefix for mode-specific commands
#+begin_src emacs-lisp
  (defcustom akirak/mode-prefix-key "C-,"
    "Prefix for mode-specific keybindings."
    :type 'string)
#+end_src
** Macro packages                                                 :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
*** defrepeater                                               :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 20:13]
:END:

#+begin_src emacs-lisp
  (setup (:package defrepeater)
    (:require))
#+end_src
*** fullframe                                                     :windows:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:06]
:END:

#+begin_src emacs-lisp
(setup (:package fullframe))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/fullframe][~tomterl/fullframe - sourcehut git]].
** Built-ins
:PROPERTIES:
:SORTING_TYPE: a
:END:
# Note: These should never fail.
*** autorevert                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup autorevert
    (:with-mode global-auto-revert-mode
      (:hook-into after-init-hook)))
#+end_src
*** buffer.c                                        :formatting:visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:
#+begin_src emacs-lisp
  (setup buffer
    (:option buffer-file-coding-system 'utf-8
             fill-column 80
             indicate-empty-lines t
             truncate-lines t))
#+end_src
**** Line spacing
#+begin_src emacs-lisp
  ;; buffer.c
  (setup line-spacing
    (:with-mode (org-mode markdown-mode)
      (:local-set line-spacing 0.5))
    (:with-mode (Help-mode helpful-mode Info-mode)
      (:local-set line-spacing 0.3))
    (:with-mode (eww-mode)
      (:local-set line-spacing 0.35)))
#+end_src
*** callproc.c                                                    :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup callproc
    (:only-if (eq system-type 'windows-nt))
    (:option shell-file-name (executable-find "bash")))
#+end_src
*** compile                                                       :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup compile
    (:option compilation-auto-jump-to-first-error t
             compilation-scroll-output t)

    (:compilation-error
     (eslint "^\\(\\(?:ERROR\\|WARNING\\)\\) in \\([^z-a]*?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
             2 3 4 (1 . 1))

     (eslint-fix "^\\(/home/.+\\)\n[[:space:]]+\\([[:digit:]]+\\):\\([[:digit:]]+\\)[[:space:]]+\\(\\(?:WARNING\\|error\\)\\)"
                 1 2 3 (4 . 4))

     (prettier "^\\[\\(\\(?:WARNING\\|error\\)\\)] \\([^z-a]*?\\): [^z-a]+(\\([[:digit:]]+\\):\\([[:digit:]]+\\))"
               2 3 4 (1 . 1))

     ;; Unused argument `hsuper` at default.nix:9:24-15:6
     (nix-linter " at \\([^:]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:digit:]]+$"
                 1 2 3)

     ;; path:67:23-45:
     (hlint "^\\([/[:alnum:]][./[:alnum:]]*\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
            1 2 3 (4 . 4))

     ;; unknown
     ("^\\([/[:alnum:]][./[:alnum:]]*\\):(\\([[:digit:]]+\\),\\([[:digit:]]+\\))-([[:digit:]]+,[[:digit:]]+):[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
      1 2 3 (4 . 4))

     ;; Emacs checkdoc/byte-compile, GHC, etc.
     ;; path:line:col: error:
     (emacs-lisp "\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*\\(?:Error\\|error\\|warning\\):"
                 1 2 3 (4 . 4))

     ;; ** (SyntaxError) xxx/xxx/xxx.ex:97:29: syntax error before: '{'
     (iex "^\\*+([^z-a]+)\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*"
          1 2 3 (4 . 4))))
#+end_src
*** dired                                                           :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:47]
:END:

#+begin_src emacs-lisp
  (setup dired
    (:option dired-recursive-copies 'always
             dired-recursive-deletes 'top)
  
    (:bind "h" #'dired-up-directory))
#+end_src
*** ediff-wind                                                       :diff:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup ediff-wind
    (:option ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
*** eldoc                                                :help:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:08]
:END:

#+begin_src emacs-lisp
  (setup eldoc
    (:with-hook turn-on-eldoc-mode
      (:hook-into emacs-lisp-mode)))
#+end_src
*** elec-pair                             :prog_mode:text_mode:parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup elec-pair
    (:with-mode electric-pair-mode
      (:hook-into after-init-hook)))
#+end_src

While the mode is generally useful, the exception is =lispy-mode=, which overrides =self-insert-command= and conflicts with the features of the package.
*** electric                                                       :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

The built-in =electric= package provides the following modes:

- [ ] =electric-indent-mode= :: Use major-mode specific indentation functions instead?
- [ ] =electric-layout-mode= :: It may be useful in some programming modes
- [ ] =electric-quote-mode= :: Maybe I'll turn it on in some specific projects

#+begin_src emacs-lisp
  (setup electric)
#+end_src
*** elisp-mode                                    :Emacs__Lisp:major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 17:55]
:END:

#+begin_src emacs-lisp
  (setup elisp-mode
    (:with-mode emacs-lisp-mode
      (:local-set imenu-generic-expression
                  ;; Copied from my previous config. Maybe requires some adaptation.
                  `(("Headings" ";;[;]\\{1,8\\} \\(.*$\\)" 1)
                    (nil "^\\s-*(\\(cl-def\\(?:generic\\|ine-compiler-macro\\|m\\(?:acro\\|ethod\\)\\|subst\\|un\\)\\|def\\(?:advice\\|generic\\|ine-\\(?:advice\\|compil\\(?:ation-mode\\|er-macro\\)\\|derived-mode\\|g\\(?:\\(?:eneric\\|lobal\\(?:\\(?:ized\\)?-minor\\)\\)-mode\\)\\|inline\\|m\\(?:ethod-combination\\|inor-mode\\|odify-macro\\)\\|s\\(?:etf-expander\\|keleton\\)\\)\\|m\\(?:acro\\|ethod\\)\\|s\\(?:etf\\|ubst\\)\\|un\\*?\\)\\|ert-deftest\\)\\s-+\\(\\(?:\\sw\\|\\s_\\|\\\\.\\)+\\)" 2)
                    ("Custom vars" "^\\s-*(\\(defcustom\\)\\s-+\\(\\(?:\\sw\\|\\s_\\|\\\\.\\)+\\)" 2)
                    ("Variables" "^\\s-*(\\(def\\(?:c\\(?:onst\\(?:ant\\)?\\|ustom\\)\\|ine-symbol-macro\\|parameter\\)\\)\\s-+\\(\\(?:\\sw\\|\\s_\\|\\\\.\\)+\\)" 2)
                    ("Variables" "^\\s-*(defvar\\(?:-local\\)?\\s-+\\(\\(?:\\sw\\|\\s_\\|\\\\.\\)+\\)[[:space:]\n]+[^)]" 1)
                    ("Types" "^\\s-*(\\(cl-def\\(?:struct\\|type\\)\\|def\\(?:class\\|face\\|group\\|ine-\\(?:condition\\|error\\|widget\\)\\|package\\|struct\\|t\\(?:\\(?:hem\\|yp\\)e\\)\\)\\)\\s-+'?\\(\\(?:\\sw\\|\\s_\\|\\\\.\\)+\\)" 2)
                    ;; Only in my configuration
                    ("use-package" ,(rx "(use-package" (+ space)
                                        (group (+ (any alnum "-"))))
                     1)
                    ("org-capture" ,(rx "(org-starter-def-capture" (+ space)
                                        (+ (not space)) (+ space)
                                        (syntax string-quote)
                                        (group (+ (not (syntax string-quote)))))
                     1))))

    (defun akirak/eval-buffer-or-load-file ()
      (interactive)
      (when (eq major-mode 'emacs-lisp-mode)
        (if buffer-file-name
            (load-file buffer-file-name)
          (eval-buffer)))))
#+end_src
*** fileio.c                                                        :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fileio
    (:option delete-by-moving-to-trash t))
#+end_src
*** filelock.c                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup filelock
    ;; lock files will kill `npm start'
    (:option create-lockfiles nil))
#+end_src
*** files                                                           :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup files
    (:option backup-by-copying t
             backup-directory-alist
             `(("." . ,(locate-user-emacs-file "backup/")))
             delete-old-versions t
             version-control t
             view-read-only t
             auto-mode-case-fold nil)
    
    (:status opinionated
      (:global "<f5>" #'revert-buffer)))
#+end_src

- Use =akirak-files-ensure-abbrev-list= to update =directory-abbrev-alist=. (see [[*akirak][akirak]]).

*** find-func
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:18]
:END:

#+begin_src emacs-lisp
  (setup find-func
    (:global "C-x M-l" #'find-library))
#+end_src
*** fns.c and xfns.c                                                   :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fns
    (:option use-dialog-box nil))

  (setup xfns
    (:option x-gtk-use-system-tooltips nil))
#+end_src
*** frame                                                          :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup frame
    (blink-cursor-mode -1))
#+end_src
*** hl-line                                                        :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup hl-line
    (:with-mode hl-line-mode
      (:hook-into prog-mode-hook
                  text-mode-hook)))
#+end_src
*** indent
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:08]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:option tab-always-indent 'complete))
#+end_src
*** indent.c                                                   :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:option indent-tabs-mode nil)

    (defun akirak/turn-on-indent-tabs-mode ()
      (interactive)
      (setq indent-tabs-mode 1))

    (dolist (mode-hook '(makefile-mode-hook))
      (add-hook mode-hook 'akirak/turn-on-indent-tabs-mode)))
#+end_src
*** menu-bar
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:22]
:END:

#+begin_src emacs-lisp
  (setup menu-bar
    (:status opinionated
      (:global "<f12> <f12>" #'toggle-debug-on-error)))
#+end_src
*** minibuf.c                                                  :minibuffer:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:06]
:END:

Use the recommended settings for vertico.

#+begin_src emacs-lisp
  (setup minibuf.c
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

*** minibuffer                                     :minibuffer:keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:05]
:END:

#+begin_src emacs-lisp
  (setup minibuffer
    (define-key minibuffer-mode-map
                "~"
                (defun akirak/minibuffer-tilde ()
                  "During `find-file', replace the minibuffer input with the home directory."
                  (interactive)
                  (if minibuffer-completing-file-name
                      (progn
                        (delete-region (minibuffer-prompt-end) (point-max))
                        (goto-char (point-max))
                        (insert "~/"))
                    (insert "~")))))
#+end_src
*** mule
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    (set-language-environment "UTF-8"))
#+end_src
*** paragraphs                                                       :text:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paragraphs
    (:option sentence-end-double-space nil))
#+end_src
*** paren                                                     :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paren
    (:with-mode show-paren-mode
      (:hook-into after-init-hook)))
#+end_src
*** pixel-scroll
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 17:27]
:END:

#+begin_src emacs-lisp
  (setup pixel-scroll
    (:only-if (version<= "29" emacs-version)
              (:with-mode pixel-scroll-precision-mode
                ;; TODO: Find a better way to hook the minor mode
                (:hook-into find-file-hook
                            eww-mode-hook
                            help-mode-hook))))
#+end_src
*** process.c                                                     :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup process
    ;; Expand read-process-output-max for lsp-mode
    (:option read-process-output-max (* 1024 1024)))
#+end_src
*** profiler                                              :Emacs:profiling:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 07:49]
:END:

#+begin_src emacs-lisp
  (setup profiler
    (defun akirak/profiler-toggle ()
      (interactive)
      (require 'profiler)
      (if (profiler-running-p)
          (progn
            (profiler-report)
            (profiler-stop)
            (profiler-reset))
        (profiler-start)))

    (:status opinionated
      (:global "<f12> e p" akirak/profiler-toggle)))
#+end_src
*** project
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 17:00]
:END:

#+begin_src emacs-lisp
  (setup (:package project))
#+end_src
*** prolog                                             :major__mode:Prolog:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:33]
:END:

#+begin_src emacs-lisp
  (setup prolog
    (:file-match "\\.pl\\'"))
#+end_src
*** recentf                                                 :history:files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup recentf
    (:hook-into after-init-hook)
    (:option recentf-max-saved-items 200
             recentf-auto-cleanup 'never))
#+end_src
*** register
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:05]
:END:

#+begin_src emacs-lisp
  (setup register
    ;; Show the register preview immediately
    (:option register-preview-delay 0))
#+end_src
*** savehist                                                      :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:08]
:END:

#+begin_src emacs-lisp
  (setup savehist
    (:hook-into after-init-hook))
#+end_src

This is a recommended setting for use with vertico. See https://github.com/minad/vertico#configuration.
*** saveplace                                                     :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup saveplace
    (:with-mode save-place-mode
      (:hook-into after-init-hook)))
#+end_src
*** simple                                             :formatting:writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup simple
    (:global [remap count-words-region] #'count-words
             [remap delete-horizontal-space] #'cycle-spacing))
#+end_src
*** startup
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 19:45]
:END:
#+begin_src emacs-lisp
  (setup startup
    (:option inihibit-startup-screen t
             initial-buffer-choice t
             initial-scratch-message nil
             initial-major-mode 'fundamental-mode))
#+end_src

=*scratch*= buffer is shown at startup.
You can set =initial-buffer-choice= to a function or a buffer name depending on the context.
**** Initialization time
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collections"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
*** subr                                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup subr
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src
*** terminal.c                                                         :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup terminal
    (:option ring-bell-function 'ignore))
#+end_src
*** tooltip                                                            :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup tooltip
    (tooltip-mode -1))
#+end_src
*** vc-hooks                                                           :VC:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup vc-hooks
    (:option vc-follow-symlinks t
             vc-make-backup-files t))
#+end_src
*** view                                                       :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup view
    (:option view-inhibit-help-message t)

    (:with-map view-mode-map
      (:bind
       [remap scroll-up-command] #'View-scroll-half-page-forward
       [remap scroll-down-command] #'View-scroll-half-page-backward)))
#+end_src
*** whitespace                                          :visual:formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup whitespace
    (:option whitespace-style
             '(face trailing missing-newline-at-eof tab-mark))
    (:hook-into prog-mode
                text-mode
                conf-mode
                sgml-mode)

    (:status theme
      (:option whitespace-trailing
               '(((t (:underline (:color "firebrick"
                                         :style wave
                                         :position nil))))))))
#+end_src
*** windmove                                                      :windows:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 20:16]
:END:

#+begin_src emacs-lisp
  (setup windmove
    (:status opinionated
      (add-hook 'after-init-hook
                (defun akirak/setup-windmove ()
                  (windmove-default-keybindings 'control)))))
#+end_src
*** window                                                     :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup window
    (:option recenter-positions '(top middle bottom))

    (defun akirak/scroll-half-height (&optional window)
      (/ (1- (window-height (or window (selected-window)))) 2))

    (:global
     ;; TODO: scroll-other-window and scroll-other-window-down
     [remap scroll-up-command]
     (defun akirak/scroll-half-page-forward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-up arg)
         (scroll-up (akirak/scroll-half-height))))
     [remap scroll-down-command]
     (defun akirak/scroll-half-page-backward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-down arg)
         (scroll-down (akirak/scroll-half-height))))))
#+end_src
*** winner                                                :history:windows:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup winner
    (:hook-into after-init-hook)

    (:status opinionated
      (:bind "C-c u" (defrepeater #'winner-undo)
             "C-c <Right>" (defrepeater #'winner-redo))))
#+end_src
*** woman
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:16]
:END:

#+begin_src emacs-lisp
  (setup woman
    (:global "<f1> M-m" #'woman))
#+end_src
*** xdisp.c
:PROPERTIES:
:CREATED_TIME: [2022-01-09 Sun 23:22]
:END:

#+begin_src emacs-lisp
  (setup xdisp
    ;; I have never encountered a situation where I need to deal with R-L
    ;; direction so far
    (:option bidi-inhibit-bpa t
             bidi-display-reordering 'left-to-right
             bidi-paragraph-direction 'left-to-right))
#+end_src
** Basic appearances                                                :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.

The following theme packages are bundled with configuration:

#+begin_src emacs-lisp
  (setup (:package color-theme-sanityinc-tomorrow))

  (setup (:package poet-theme))
#+end_src

No theme is set by default.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(when init-file-user (require 'doom-themes) (load-theme 'doom-tomorrow-night t))"
#+end_src
*** Font families
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/base-face-family-alist
    '((default . "Cascadia Code")
      (fixed-pitch . "Cascadia Code")
      (variable-pitch . "Merriweather"))
    "Alist of font families for faces."
    :type '(alist :key-type symbol
                  :value-type string)
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face . ,family) value)
                 (if (member family families)
                     (set-face-attribute face nil :family family)
                   (message "Font family %s is not installed" family)
                   (delq (assq face value) value)
                   (set symbol value)))))))
  
  (eval-after-load 'outline
    (defun akirak/set-outline-families ()
      (when-let (family (cdr (assq 'variable-pitch akirak/base-face-family-alist)))
        (dolist (x '(outline-1
                     outline-2
                     outline-3
                     outline-4
                     outline-5
                     outline-6
                     outline-7
                     outline-8))
          (set-face-attribute x nil :family family)))))
  
  (eval-after-load 'org
    (defun akirak/set-org-faces ()
      (set-face-attribute 'org-tag nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-todo nil :inherit 'fixed-pitch)))
#+end_src
*** Font size
Override font heights for certain faces.

I think it would be better to create my own theme, but I don't have enough time for it.

#+begin_src emacs-lisp
  (defcustom akirak/font-height 107
    "Default height of the font."
    :group 'akirak
    :type 'integer
    :set (lambda (sym value)
           (set sym value)
           (set-face-attribute 'default nil :height value)))
  
  (eval-after-load 'outline
    (defun akirak/apply-outline-font-heights ()
      (set-face-attribute 'outline-1 nil :height 1.54)
      (set-face-attribute 'outline-2 nil :height 1.41)
      (set-face-attribute 'outline-3 nil :height 1.3)
      (set-face-attribute 'outline-4 nil :height 1.19)
      (set-face-attribute 'outline-5 nil :height 1.1)
      (set-face-attribute 'outline-6 nil :height 1.07)
      (set-face-attribute 'outline-7 nil :height 1.03)
      (set-face-attribute 'outline-8 nil :height 1.0)))

  (eval-after-load 'org
    (defun akirak/apply-org-font-heights ()
      (set-face-attribute 'org-tag nil :height (ceiling (* 1.05 akirak/font-height)))))
#+end_src
** Org                                                            :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
Embrace Org as a common document format for Emacs.
*** citar                                                    :bibliography:
:PROPERTIES:
:CREATED_TIME: [2022-02-23 Wed 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package citar))
#+end_src
*** doct                                                          :capture:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:08]
:END:

#+begin_src emacs-lisp
(setup (:package doct))
#+end_src
*** org-capture
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:

#+begin_src emacs-lisp
  (setup org-capture
    (:global "C-c c" #'org-capture))
#+end_src
*** org-dynamic-bullets                                :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-dynamic-bullets)
    (:hook-into org-mode-hook))
#+end_src
*** org-journal                                                   :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:

#+begin_src emacs-lisp
(setup (:package org-journal))
#+end_src
*** orglink                                                         :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:28]
:END:

=orglink-mode= lets you open links as in Org mode.

#+begin_src emacs-lisp
(setup (:package orglink))
#+end_src
*** org-make-toc                                            :documentation:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:

#+begin_src emacs-lisp
(setup (:package org-make-toc))
#+end_src
*** org-noter
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package org-noter))
#+end_src
*** org-ql                                                        :library:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:

#+begin_src emacs-lisp
(setup (:package org-ql))
#+end_src
*** org-remark
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package org-remark))
#+end_src
*** org-reverse-datetree
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:15]
:END:

#+begin_src emacs-lisp
(setup (:package org-reverse-datetree))
#+end_src
*** org-starter
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:

#+begin_src emacs-lisp
  (setup (:package org-starter)
    (:option org-starter-require-file-by-default nil
             org-starter-load-config-files t
             org-starter-exclude-from-recentf '(known-files path)
             ;; org-starter-alternative-find-function #'helm-org-ql
             org-starter-find-file-visit-window t
             org-starter-override-agenda-window-setup 'other-window
             org-starter-enable-local-variables :all)

    (:global "M-g M-o" #'org-starter-find-file-by-key))
#+end_src
*** org-transclusion
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:09]
:END:

#+begin_src emacs-lisp
(setup (:package org-transclusion))
#+end_src
*** org-visual-indent                                  :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-visual-indent)
    (:hook-into org-mode-hook))
#+end_src
** Packages                                                       :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** academic-phrases                                              :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:28]
:END:

#+begin_src emacs-lisp
(setup (:package academic-phrases))
#+end_src
*** ace-window                                                :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_src emacs-lisp
  (setup (:package ace-window)
    (:option aw-keys (string-to-list "qwertyui")
             aw-background nil
             aw-ignore-on t
             aw-ignored-buffers '(" *LV*"
                                  minibuffer-mode
                                  "*Calc Trail*")
             aw-scope 'visible
             aw-dispatch-always t)

    (:status opinionated
      (:global "M-o" #'ace-window)
      (:with-feature lispy
        (:when-loaded
          (:with-map (lispy-mode-map)
            (:unbind "M-o"))))
      (:option aw-dispatch-alist
               `((?o aw-swap-window "Swap Windows")
                 (?c aw-copy-window "Duplicate the current window")
                 (?v aw-split-window-horz "Split horizontally")
                 (?s aw-split-window-vert "Split vertically")
                 (?p aw-delete-window "Delete Window")
                 (?x akirak/aw-replace-window "Replace window")
                 (?m delete-other-windows "Delete Other Windows")
                 ;; Unused.
                 ;; (?k akirak/aw-quit-window "Quit window")
                 (32 toggle-window-split)
                 ;; tab-bar-mode.
                 (?Q tab-bar-close-tab)
                 (?R tab-bar-rename-tab)
                 (?T tab-bar-new-tab)
                 ;; Deprecated in favour of tab-bar-mode.
                 ;; (?T tear-off-window)
                 (?D delete-frame)
                 (?F make-frame-command)
                 (?? aw-show-dispatch-help)))

      (defun akirak/aw-quit-window (window)
        "Delete window WINDOW."
        (let ((frame (window-frame window)))
          (when (and (frame-live-p frame)
                     (not (eq frame (selected-frame))))
            (select-frame-set-input-focus (window-frame window)))
          (if (= 1 (length (window-list)))
              (progn
                (bury-buffer (window-buffer window))
                (delete-frame frame))
            (if (window-live-p window)
                (quit-window window)
              (error "Got a dead window %S" window)))))

      (defun akirak/aw-replace-window (window)
        (let* ((buffer (current-buffer))
               (cur-window (get-buffer-window buffer)))
          (aw-switch-to-window window)
          (switch-to-buffer buffer)
          (delete-window cur-window)))
      (custom-theme-set-faces 'user
                              '(aw-leading-char-face
                                ((default
                                   :background "gray18" :foreground "tan"
                                   :height 250))))
      (advice-add 'aw-delete-window
                  :after
                  (defun akirak/ad-after-aw-delete-window (&rest _args)
                    (balance-windows)))
      (advice-add 'aw-delete-window
                  :around
                  (defun akirak/ad-around-aw-delete-window (origfun &rest args)
                    (let ((initial-window (selected-window)))
                      (prog1 (apply origfun args)
                        (when (window-live-p initial-window)
                          (select-window initial-window))))))))
#+end_src
*** aggressive-indent                                          :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:26]
:END:

#+begin_src emacs-lisp
  (setup (:package aggressive-indent)
    (:hook-into emacs-lisp-mode-hook))
#+end_src
*** akirak
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:12]
:END:

This is a collection of extra utilities for various packages.

#+begin_src emacs-lisp
  (setup (:package akirak)

    (:global "C-x g" #'akirak-project-switch)

    ;; These settings are specific to my environment.
    (:status personal
      (:defer 1 #'akirak-files-ensure-abbrev-list)
      (run-with-idle-timer 300 nil #'github-linguist-update-projects)))
#+end_src
**** akirak-window                                               :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 14:10]
:END:

This is an extra functions for window management.

#+begin_src emacs-lisp
  (setup akirak-window
    (:status opinionated
      (:global "C-2" #'akirak-window-setup-columns
               "C-3" #'akirak-window-split-vertically
               "C-4" #'akirak-window-split-and-select
               [remap abort-recursive-edit] #'akirak-window-cleanup)))
#+end_src
*** all-the-icons                                                      :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:28]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons))
#+end_src
**** all-the-icons-completion                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:29]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-completion)
    (with-eval-after-load 'marginalia
      (all-the-icons-completion-mode t)
      (add-hook 'marginalia-mode
                #'all-the-icons-completion-marginalia-setup)))
#+end_src
**** all-the-icons-dired
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:30]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-dired)
    (:hook-into dired-mode))
#+end_src
*** beancount                                            :@extra:beancount:
#+begin_src emacs-lisp
  (setup (:package beancount)
    (:nixpkgs "beancount" "fava")

    ;; I don't like the default keybindings on C-c, so change the prefix.
    (:option beancount-mode-map-prefix (kbd akirak/mode-prefix-key))

    (:with-mode beancount-mode
      (:file-match "\\.beancount\\'" "\\.bean\\'")
      (:when-loaded
        (:hook
         (defun akirak/beancount-turn-on-outline-mode ()
           (outline-minor-mode t)))
        (:bind
         "d" #'beancount-insert-date))))
#+end_src
*** bufler                                                        :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 22:51]
:END:

#+begin_src emacs-lisp
  (setup (:package bufler)
    (bufler-mode t)
    ;; Use it as a replacement for ibuffer
    (:global "C-x C-b" #'bufler))
#+end_src
*** cape                                                       :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:17]
:END:

#+begin_src emacs-lisp
(setup (:package cape))
#+end_src
*** consult                                                    :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:33]
:END:

#+begin_src emacs-lisp
  (setup (:package consult)
    (:with-mode consult-preview-at-point-mode
      (:hook completion-list-mode))

    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    (:option consult-narrow-key "<"
             consult-project-root-function (defun akirak/consult-project-root ()
                                             (when-let (project (project-current))
                                               (project-root project))))

    (:global [remap switch-to-buffer] #'consult-buffer
             [remap bookmark-jump] #'consult-bookmark
             [remap yank-pop] #'consult-yank-pop
             "C-c k" #'consult-kmacro
             [remap goto-line] #'consult-goto-line
             "M-s m" #'consult-mark
             "M-s M-m" #'consult-global-mark
             "M-s o" #'consult-outline
             [remap isearch-forward] #'consult-line
             [remap isearch-backward] #'consult-isearch
             "C-S-s" #'consult-line-multi
             "C-c f" #'consult-focus-lines
             "C-x /" #'consult-ripgrep
             "M-s x" #'consult-complex-command
             "M-s M-x" #'consult-mode-command)

    (setup consult-imenu
      (:global "M-s i" #'consult-imenu
               "M-s M-i" #'consult-imenu-multi))

    (setup consult-compile
      (:global "M-s e" #'consult-compile-error))

    (setup consult-flymake
      (:global "M-s f" #'consult-flymake))

    (setup consult-xref
      (:option xref-show-xrefs-function #'consult-xref
               xref-show-definitions-function #'consult-xref)))
#+end_src
*** consult-dir
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:40]
:END:

#+begin_src emacs-lisp
  (setup (:package consult-dir)
    (:global "C-x d" #'consult-dir))
#+end_src
*** corfu                                                   :completion:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:19]
:END:

#+begin_src emacs-lisp
  (setup (:package corfu)
    (:with-mode (prog-mode text-mode comint-mode)
      (:hook corfu-mode fancy-dabbrev-mode))

    (:with-mode (prog-mode text-mode)
      (:bind "M-/" #'completion-at-point))
    (:with-feature comint
      (:bind "M-/" #'completion-at-point)))
#+end_src
*** cycle-at-point                                                :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 14:36]
:END:

#+begin_src emacs-lisp
  (setup (:package cycle-at-point)
    (:global "C-=" #'cycle-at-point))
#+end_src
*** dired-collapse                                                  :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:44]
:END:

#+begin_src emacs-lisp
(setup (:package dired-collapse))
#+end_src

I will manually turn on =dired-collapse-mode= when necessary.
*** dired-filter                                                    :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:50]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-filter)
    (:hook-into dired-mode-hook)
    (:hook dired-filter-group-mode)
  
    (:option dired-filter-group-saved-groups
             `(("default"
                ("Directories"
                 (directory . t))
                ("Dotfiles"
                 (name . "^\\."))
                ;; Text files
                ("Text"
                 (or (name . "README")
                     (name . "TODO")
                     (name . "LICENSE")
                     (extension "txt" "md" "mkd" "markdown" "rst")))
                ("Org"
                 (extension "org" "bib"))
                ("Ledger"
                 (extension "beancount"))
                ("Data files"
                 (extension "csv" "json" "sql"))
                ;; Binary files
                ("Books and papers"
                 (extension "pdf" "mobi" "epub" "azw"))
                ("Archives"
                 (extension "zip" "rar" "gz" "bz2" "tar"))
                ("Disk images"
                 (extension "iso" "ova"))
                ("Office docs"
                 (extension "xlsx" "xls" "docx" "doc"))
                ("Programs"
                 (extension "exe" "run" "deb"))
                ("Objects and binary files"
                 (extension "o" "elc"))
                ("Meta data"
                 (extension "torrent" "acsm"))
                ;; Images are often thumbnails, so they should come
                ;; after other binary files
                ("Images and graphics"
                 (extension "jpg" "jpeg" "png" "gif" "svg"))
                ;; Source code
                ("Config"
                 (or (name . "Makefile")
                     (name . "Dockerfile")
                     (extension "yml" "yaml" "cabal"
                                "dockerfile" "mk")))
                ("Emacs Lisp"
                 (extension "el"))))))
#+end_src
*** dired-hacks-utils                                               :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:49]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-hacks-utils)
    (:with-map dired-mode-map
      ;; Remap 'n' and 'p'
      "n" 'dired-hacks-next-file
      "p" 'dired-hacks-previous-file))
#+end_src
*** dired-hide-dotfiles                                             :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 19:08]
:END:

#+begin_src emacs-lisp
(setup (:package dired-hide-dotfiles))
#+end_src
*** dired-k                                                 :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:45]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-k)
    (:option dired-k-style 'git)
  
    (:with-hook dired-k-no-revert
      (:hook-into dired-after-readin-hook))
  
    ;; Prevent from highlighting by file attributes.
    ;; Just add git status
    ;; (defun akirak/ad-override-dired-k--highlight-by-file-attribyte ()
    ;;   nil)
    ;; (advice-add #'dired-k--highlight-by-file-attribyte
    ;;             :override
    ;;             #'akirak/ad-override-dired-k--highlight-by-file-attribyte)
    )
#+end_src

dired-k depends on dired-x, which has a poor code quality.
*** dired-open                                                      :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:47]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-open)
    ;; Temporary workaround
    (autoload 'dired-open-xdg "dired-open")
    
    (:option dired-open-functions '(dired-open-by-extension
                                    dired-open-subdir)))
#+end_src
*** ediprolog                                                      :Prolog:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:24]
:END:

#+begin_src emacs-lisp
  (setup (:package ediprolog)
    ;; Set `ediprolog-system' and `ediprolog-program' depending on the system
    (:nixpkgs "scryer-prolog")

    (:with-feature prolog
      ;; In other modes, this key is bound to repl.
      (:bind "<C-return>" #'ediprolog-dwim)))
#+end_src

[[https://lib.rs/crates/scryer-prolog][scryer-prolog]] is the bleeding-edge implementation of Prolog (like GHC to Haskell), and it is installed with this package.
*** eglot                                                      :LSP:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package eglot))
#+end_src
*** electric-operator                                          :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package electric-operator)
    (:hook-into python-mode
                sql-mode
                js-mode
                c-mode
                java-mode
                rust-mode))
#+end_src
*** elx                                   :Emacs__Lisp:development:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:

#+begin_src emacs-lisp
(setup (:package elx))
#+end_src
*** embark
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:53]
:END:

#+begin_src emacs-lisp
  (setup (:package embark)
    ;; MAYBE: Bind "C-;" or something to embark-dwim
    (:global "C-." #'embark-act))
#+end_src

Some notes:

- =embark-next/previous-symbol= could replace =symbol-overlay= package.
- =embark-export= can be a useful alternative to =tabulated-list=.
- Binding =sudo-find-file= command may be useful, but I haven't done it yet.

The following resources are useful:

- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]
*** embark-consult
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 18:02]
:END:

#+begin_src emacs-lisp
  (setup (:package embark-consult)

    ;; TODO: Use a macro
    (with-eval-after-load 'embark
      (with-eval-after-load 'consult
        (require 'embark-consult)))

    (:with-mode embark-collect-mode
      (:hook consult-preview-at-point-mode)))
#+end_src
*** envrc                                                   :direnv:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package envrc)
    (:with-mode envrc-global-mode
      (:hook-into after-init-hook)))
#+end_src
*** epkg                                                            :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:36]
:END:

#+begin_src emacs-lisp
(setup (:package epkg))
#+end_src
*** eros                                          :Emacs__Lisp:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:05]
:END:

#+begin_src emacs-lisp
  (setup (:package eros)
    (:hook-into emacs-lisp-mode))
#+end_src
*** esup                                                :startup:profiling:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:44]
:END:

#+begin_src emacs-lisp
(setup (:package esup))
#+end_src
*** fancy-dabbrev                                              :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:24]
:END:

#+begin_src emacs-lisp
  (setup (:package fancy-dabbrev)
    ;; For activation, see corfu
    (:global "TAB" #'fancy-dabbrev-expand-or-indent))
#+end_src
*** fanyi                                                      :dictionary:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package fanyi))
#+end_src
*** ghelp                                           :reference:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:

#+begin_src emacs-lisp
  (setup (:package ghelp)
    (:global "<f1> ." #'ghelp-describe-at-point)
  
    ;; Temporary workaround
    (autoload 'ghelp-describe-at-point "ghelp"))
#+end_src
*** ghelp-helpful
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:16]
:END:

#+begin_src emacs-lisp
(setup (:package ghelp-helpful))
#+end_src
*** gif-screencast                                      :screen__recording:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:38]
:END:

#+begin_src emacs-lisp
  (setup (:package gif-screencast)

    ;; TODO: Maybe use flameshot for creating screenshot on Wayland
    (:nixpkgs "gifsicle" "scrot"
              "graphicsmagick"
              "graphicsmagick-imagemagick-compat"))
#+end_src

*** github-linguist
:PROPERTIES:
:CREATED_TIME: [2022-02-04 Fri 19:15]
:END:

#+begin_src emacs-lisp
  (setup (:package github-linguist)
    (:nixpkgs "github-linguist")
    (:option github-linguist-executable "github-linguist"))
#+end_src
*** git-modes                                               :VC:major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package git-modes)
    (:with-mode gitattributes-mode)
    (:with-mode gitconfig-mode)
    (:with-mode gitignore-mode
      (:file-match "/\\.dockerignore\\'")))
#+end_src
*** haskell-mode                                      :major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package haskell-mode))
#+end_src
*** haskell-tng-mode                                  :Haskell:major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:02]
:END:

#+begin_src emacs-lisp
  (setup (:package haskell-tng-mode)
    (:file-match "\\.hs\\'"))
#+end_src
*** helpful                                               :reference:Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:50]
:END:

#+begin_src emacs-lisp
  (setup (:package helpful))
#+end_src
*** hercules                                                  :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:51]
:END:

#+begin_src emacs-lisp
(setup (:package hercules))
#+end_src
*** iedit                                                         :editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:51]
:END:

#+begin_src emacs-lisp
(setup (:package iedit))
#+end_src
*** json-mode                                                 :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package json-mode)
    (:file-match "\\.json\\'" "\\.lock\\'"))
#+end_src
*** kind-icon                                                          :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:22]
:END:

#+begin_src emacs-lisp
  (setup (:package kind-icon)
    (:option kind-icon-default-face 'corfu-default)

    (with-eval-after-load 'corfu
      (require 'kind-icon)
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src
*** leetcode                                                    :exercises:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:27]
:END:

#+begin_src emacs-lisp
(setup (:package leetcode))
#+end_src
*** license-templates                                     :development:OSS:
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 14:30]
:END:

#+begin_src emacs-lisp
  (setup (:package license-templates))
#+end_src
*** link-hint                                                       :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 17:39]
:END:

#+begin_src emacs-lisp
  (setup (:package link-hint)
    (:global "M-g f" #'link-hint-open-link)

    ;; Extra bindings for particular modes
    (:with-feature info
      (:when-loaded
        (:with-map Info-mode-map
          (:bind "f" #'link-hint-open-link)))))
#+end_src
*** lisp-extra-font-lock                               :Emacs__Lisp:visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:04]
:END:

#+begin_src emacs-lisp
(setup (:package lisp-extra-font-lock))
#+end_src
*** lispy                                 :Emacs__Lisp:structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:36]
:END:

For Emacs Lisp, I use lispy.

#+begin_src emacs-lisp
  (setup (:package lispy)
    (:hook
     (defun akirak/lispy-invert-puni-mode ()
       "Turn off `puni-mode' when `lispy-mode' is on."
       (when (featurep 'puni)
         (puni-mode (not lispy-mode)))))

    ;; Adoption of lispy is opinionated.
    (:status opinionated
      (:option lispy-key-theme '(special lispy))

      (:hook-into lisp-mode
                  emacs-lisp-mode
                  lisp-interaction-mode
                  ielm-mode
                  eval-expression-minibuffer-setup)

      (:with-map lispy-mode-map-lispy
        ;; Prevent conflicts with other custom keybindings
        (:unbind "C-,"
                 "M-<left>"
                 "M-<right>"
                 "M-m"
                 "<M-return>"
                 "<M-RET>"))))
#+end_src

Lispy is not turned on by default.
Its configuration is about my habits, so it is put in [[file:compat.el::(setup lispy][compat.el]].
*** macrostep                                      :emacs_lisp:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:52]
:END:

#+begin_src emacs-lisp
(setup (:package macrostep))
#+end_src

To use it, turn on =macrostep-mode=.

*** magit                                                             :git:
#+begin_src emacs-lisp
  (setup (:package magit)
    (:nixpkgs git)

    (:status opinionated
      (:global "<f8> <f7>" #'magit-stage-file
               "<f8> <f8>" #'magit-status
               "<f8> <f9>" #'magit-dispatch
               "<f8> <f10>" #'magit-file-dispatch))

    (:status personal
      (:option magit-repository-directories '(("~/" . 1)
                                              ("~/.config" . 1)
                                              ("~/work" . 3)
                                              ("~/archives/oss/" . 3)))))
#+end_src
*** marginalia
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:49]
:END:

#+begin_src emacs-lisp
  (setup (:package marginalia)
    (:hook-into after-init-hook)

    (:with-map minibuffer-local-map
      (:bind "M-a" #'marginalia-cycle))

    (:when-loaded
      (:option (prepend marginalia-annotator-registry)
               '(project-root
                 akirak-project-root-annotator
                 builtin none))))
#+end_src
*** MAYBE nano-bell                                         :noexport:nano:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:20]
:END:

[[https://github.com/rougier/nano-bell][GitHub - rougier/nano-bell: Visual bell for GNU Emacs]]
*** MAYBE nano-sidebar                                      :noexport:nano:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:19]
:END:

[[https://github.com/rougier/nano-sidebar][GitHub - rougier/nano-sidebar: Emacs package to have configurable sidebars on a per frame basis.]]
*** mlscroll                                                :aesthetics:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package mlscroll)
    (:option mlscroll-in-color "#888888"
             mlscroll-out-color (face-attribute 'region :background nil t))
    (:with-mode mlscroll-mode
      (:hook-into after-init-hook)))
#+end_src
*** nano-modeline                       :visual:aesthetics:UI:nano:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 14:46]
:END:

#+begin_src emacs-lisp
  (setup (:package nano-modeline)
    (nano-modeline-mode t))
#+end_src
*** nix-mode                                                          :Nix:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package nix-mode)
    (:file-match "\\.nix\\'")
    (:mode-repl nix-repl))
#+end_src
*** nov                                                      :reading:EPUB:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package nov)
    ;; unzip is required for opening EPUB
    (:nixpkgs unzip)

    (:with-mode nov-mode
      (:file-match "\\.epub\\'")

      (:local-set line-spacing 0.4)

      (:hook visual-line-mode
             visual-fill-column-mode)))
#+end_src
*** orderless                                                  :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:14]
:END:

#+begin_src emacs-lisp
  (setup (:package orderless)
    (:option completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

It is also possible to use Helm as a completion style. See https://github.com/oantolin/orderless#ivy-and-helm. I will use orderless primarily because it is smaller than Helm.
*** orgit                                                           :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:28]
:END:

#+begin_src emacs-lisp
(setup (:package orgit))
#+end_src
*** package-lint                                        :Emacs:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:06]
:END:

#+begin_src emacs-lisp
(setup (:package package-lint))
#+end_src
*** popper                                                        :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 23:59]
:END:

#+begin_src emacs-lisp
(setup (:package popper))
#+end_src
*** project-hercules                                  :project:keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 15:16]
:END:

#+begin_src emacs-lisp
  (setup (:package project-hercules)
    (:when-loaded
      (:also-load project-hercules-config))
    (:global "M-SPC" project-hercules-dispatch))
#+end_src
*** puni                                              :structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:24]
:END:

[[https://github.com/AmaiKinono/puni][puni]] will replace smartparens, expand-region, and paredit (which I didn't adopt in favour of lispy).

#+begin_src emacs-lisp
  (setup (:package puni)
    (:hook-into prog-mode
                sgml-mode
                nxml-mode)

    ;; TODO: Bind commands
    ;;
    ;; Marking commands
    ;; Sexp manipulating commands
    (:bind))
#+end_src

The following types of commands don't have pre-defined keybindings in =puni-mode=, so I have to manually bind them:

- Marking commnads
- Sexp manipulating commands

For auto-pairing, you can use =electric-pair-mode= along with puni.

Limitations:

- puni doesn't handle JSX in typescript-mode with tree-sitter.

*** rainbow-delimiters                                             :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:

#+begin_src emacs-lisp
  (setup (:package rainbow-delimiters)
    (:hook-into emacs-lisp-mode))
#+end_src
*** rainbow-mode                                                   :colors:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package rainbow-mode)
    (:hook-into prog-mode))
#+end_src
*** repl-toggle                                       :windows:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:05]
:END:

#+begin_src emacs-lisp
  (setup (:package repl-toggle)
    ;; rtog/goto-buffer-fun #'pop-to-buffer
    (:option rtog/fullscreen nil)

    ;; Unbind the default key
    (:unbind "C-c C-z")
    (:bind "<C-return>" #'rtog/toggle-repl))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/repl-toggle][~tomterl/repl-toggle - sourcehut git]].
*** restclient                                                        :web:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:58]
:END:

#+begin_src emacs-lisp
(setup (:package restclient))
#+end_src
*** svg-lib                                              :library:graphics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:30]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-lib))
#+end_src
*** svg-tag-mode                                   :visual:nano:aesthetics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:26]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-tag-mode)
    (autoload #'svg-tag-mode "svg-tag-mode.el")
    (:hook-into org-mode prog-mode))
#+end_src
*** symbol-overlay                                                :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:24]
:END:

#+begin_src emacs-lisp
  (setup (:package symbol-overlay)
    (:global "C-c s" #'symbol-overlay-put))
#+end_src

=embark= can substitute for most of the functionalities of the package, but I am used to this package.
*** taxy                                                          :library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:

#+begin_src emacs-lisp
(setup (:package taxy))
#+end_src
*** taxy-magit-section                                         :UI:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:

#+begin_src emacs-lisp
(setup (:package taxy-magit-section))
#+end_src
*** titlecase                                                     :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 17:13]
:END:

#+begin_src emacs-lisp
(setup (:package titlecase))
#+end_src

The [[https://github.com/duckwork/titlecase.el][readme]] of this package contains helpful links on capitalization.
*** tree-sitter                                        :syntax:tree_sitter:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:36]
:END:

#+begin_src emacs-lisp
  (setup (:package tree-sitter)
    (:hook tree-sitter-hl-mode))
#+end_src

- =tree-sitter-hl-mode= overrides highlighting provided by =font-lock-mode=.
**** tree-sitter-langs
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:37]
:END:

#+begin_src emacs-lisp
  (setup (:package tree-sitter-langs)
    (:with-mode tree-sitter-mode
      (:hook-into typescript-mode)))
#+end_src
*** turbo-log                                       :development:debugging:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:55]
:END:

#+begin_src emacs-lisp
(setup (:package turbo-log))
#+end_src
*** twist                                                   :configuration:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 14:12]
:END:

#+begin_src emacs-lisp
(setup (:package twist))
#+end_src
*** typescript-mode                                            :major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 18:39]
:END:

#+begin_src emacs-lisp
  (setup (:package typescript-mode)
    (:file-match "\\.tsx?\\'"))
#+end_src
*** unmodified-buffer
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:58]
:END:

#+begin_src emacs-lisp
  (setup (:package unmodified-buffer)
    (:hook-into after-init-hook))
#+end_src
*** vertico                                         :minibuffer:completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package vertico)
    (:hook-into after-init-hook)
    (:option vertico-resize t))
#+end_src

For more tips, see [[https://github.com/minad/vertico/wiki][Home · minad/vertico Wiki · GitHub]].

An alternative is icomplete (or icomplete-vertical).
See the following [[https://github.com/minad/vertico][comment]] for differences:

#+begin_quote
In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum.
#+end_quote
*** visual-fill-column
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package visual-fill-column)
    (:option visual-fill-column-center-text t
             visual-fill-column-width 80))
#+end_src
*** vterm                                                :terminal:process:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 16:50]
:END:

#+begin_src emacs-lisp
  (setup (:package vterm))
#+end_src
*** which-key                                       :usability:keybindings:
#+begin_src emacs-lisp
  (setup (:package which-key)
    (:hook-into after-init-hook)
    (:hook which-key-setup-side-window-bottom))
#+end_src
*** windswap                                                       :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:52]
:END:

#+begin_src emacs-lisp
  (setup (:package windswap)
    (:status opinionated
      (:global "<C-S-left>" #'windswap-left
               "<C-S-right>" #'windswap-right
               "<C-S-up>" #'windswap-up
               "<C-S-down>" #'windswap-down)

      ;; These keys are bound by default in org-mode, so unbind them.
      (:with-feature org
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))
      (:with-feature org-agenda
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))))
#+end_src
*** ws-butler                                                  :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:16]
:END:

#+begin_src emacs-lisp
  (setup (:package ws-butler)
    (:hook-into prog-mode-hook))
#+end_src
** Notes                                                             :@note:
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:CUSTOM_ID: develop-org-configuration
:END:
This configuration is maintained in Org, and [[file:.org-config.el][.org-config.el]] contains the configuration for the Org file. It uses [[https://github.com/akirak/org-starter][org-starter]], which is my package for maintaining file-specific Org configuration.

The workflow is as follows:

1. Use =org-capture= to add an entry to the configuration file. It should contain a source block with a package name.
2. Add further configuration for the package. Optionally set tags on the heading.
3. When the buffer is saved, Org entries are automatically sorted by package name. This feature depends on the pre-commit hook of this repository.
*** Tag statistics
The following source block generates a list of tags in this document.
If you have [[https://github.com/alphapapa/org-ql/][org-ql]] installed, you can browse matching entries by pressing =C-c C-o= on a link in the table.

#+name: tag-statistics
#+begin_src emacs-lisp :tangle no
  (->> (org-ql-select (current-buffer)
         '(and (level > 2)
               (not (tags "ARCHIVE"))
               (not (tags "noexport")))
         :action '(org-get-tags))
       (--filter (not (member "@note" it)))
       (-flatten-n 1)
       (-group-by #'identity)
       (-map (pcase-lambda (`(,tag . ,items))
               (cons tag (length items))))
       (-sort (-on #'> #'cdr))
       (-map (pcase-lambda (`(,tag . ,count))
               (list (format "[[org-ql-search:tags:%s][%s]]" tag tag)
                     count))))
#+end_src

#+RESULTS: tag-statistics
| [[org-ql-search:tags:packages][packages]]            | 84 |
| [[org-ql-search:tags:visual][visual]]              | 11 |
| [[org-ql-search:tags:UI][UI]]                  | 10 |
| [[org-ql-search:tags:formatting][formatting]]          |  9 |
| [[org-ql-search:tags:development][development]]         |  8 |
| [[org-ql-search:tags:keybindings][keybindings]]         |  6 |
| [[org-ql-search:tags:completion][completion]]          |  6 |
| [[org-ql-search:tags:windows][windows]]             |  5 |
| [[org-ql-search:tags:Emacs__Lisp][Emacs__Lisp]]         |  5 |
| [[org-ql-search:tags:library][library]]             |  5 |
| [[org-ql-search:tags:process][process]]             |  4 |
| [[org-ql-search:tags:major__mode][major__mode]]         |  4 |
| [[org-ql-search:tags:history][history]]             |  4 |
| [[org-ql-search:tags:profiling][profiling]]           |  3 |
| [[org-ql-search:tags:files][files]]               |  3 |
| [[org-ql-search:tags:minibuffer][minibuffer]]          |  3 |
| [[org-ql-search:tags:Emacs][Emacs]]               |  3 |
| [[org-ql-search:tags:writing][writing]]             |  3 |
| [[org-ql-search:tags:links][links]]               |  3 |
| [[org-ql-search:tags:IO][IO]]                  |  2 |
| [[org-ql-search:tags:parentheses][parentheses]]         |  2 |
| [[org-ql-search:tags:Prolog][Prolog]]              |  2 |
| [[org-ql-search:tags:VC][VC]]                  |  2 |
| [[org-ql-search:tags:navigation][navigation]]          |  2 |
| [[org-ql-search:tags:major_mode][major_mode]]          |  2 |
| [[org-ql-search:tags:editing][editing]]             |  2 |
| [[org-ql-search:tags:structured__editing][structured__editing]] |  2 |
| [[org-ql-search:tags:aesthetics][aesthetics]]          |  2 |
| [[org-ql-search:tags:syntax][syntax]]              |  2 |
| [[org-ql-search:tags:tree_sitter][tree_sitter]]         |  2 |
| [[org-ql-search:tags:initialization][initialization]]      |  1 |
| [[org-ql-search:tags:performance][performance]]         |  1 |
| [[org-ql-search:tags:diff][diff]]                |  1 |
| [[org-ql-search:tags:help][help]]                |  1 |
| [[org-ql-search:tags:prog_mode][prog_mode]]           |  1 |
| [[org-ql-search:tags:text_mode][text_mode]]           |  1 |
| [[org-ql-search:tags:text][text]]                |  1 |
| [[org-ql-search:tags:capture][capture]]             |  1 |
| [[org-ql-search:tags:documentation][documentation]]       |  1 |
| [[org-ql-search:tags:@extra][@extra]]              |  1 |
| [[org-ql-search:tags:beancount][beancount]]           |  1 |
| [[org-ql-search:tags:LSP][LSP]]                 |  1 |
| [[org-ql-search:tags:direnv][direnv]]              |  1 |
| [[org-ql-search:tags:startup][startup]]             |  1 |
| [[org-ql-search:tags:screen__recording][screen__recording]]   |  1 |
| [[org-ql-search:tags:Haskell][Haskell]]             |  1 |
| [[org-ql-search:tags:exercises][exercises]]           |  1 |
| [[org-ql-search:tags:OSS][OSS]]                 |  1 |
| [[org-ql-search:tags:emacs_lisp][emacs_lisp]]          |  1 |
| [[org-ql-search:tags:git][git]]                 |  1 |
| [[org-ql-search:tags:Nix][Nix]]                 |  1 |
| [[org-ql-search:tags:reading][reading]]             |  1 |
| [[org-ql-search:tags:EPUB][EPUB]]                |  1 |
| [[org-ql-search:tags:project][project]]             |  1 |
| [[org-ql-search:tags:colors][colors]]              |  1 |
| [[org-ql-search:tags:web][web]]                 |  1 |
| [[org-ql-search:tags:graphics][graphics]]            |  1 |
| [[org-ql-search:tags:nano][nano]]                |  1 |
| [[org-ql-search:tags:debugging][debugging]]           |  1 |
| [[org-ql-search:tags:configuration][configuration]]       |  1 |
| [[org-ql-search:tags:terminal][terminal]]            |  1 |
| [[org-ql-search:tags:usability][usability]]           |  1 |

Note that the table above is invisible on GitHub.
There is a table right before paragraph.
*** Web development
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:59]
:END:

The following packages (tagged =web=) are related to web development:

#+BEGIN: org-ql :query "tags:web" :columns (heading todo)
| Heading    | Todo |
|------------+------|
| [[restclient][restclient]] |      |
#+END:

- You will want to test web APIs from inside Emacs. You can choose either [[https://github.com/pashky/restclient.el][restclient]] or [[https://github.com/federicotdn/verb][verb]] for this purpose.
- I am not sure if Indium or skewer-mode is suitable for modern web development. I have never used any of them.

*** Syntax support
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:20]
:END:

Use tree-sitter wherever possible.
There are some companion packages:

#+BEGIN: org-ql :query "tags:tree_sitter" :columns (heading todo)
| Heading           | Todo |
|-------------------+------|
| [[tree-sitter][tree-sitter]]       |      |
| [[tree-sitter-langs][tree-sitter-langs]] |      |
#+END:

There are some packages for structured editing:

#+BEGIN: org-ql :query "tags:structured__editing" :columns (heading todo)
| Heading | Todo |
|---------+------|
| [[lispy][lispy]]   |      |
| [[puni][puni]]    |      |
#+END:

I like the idea of [[https://github.com/mickeynp/combobulate][combobulate]], but it looks immature at present.
I will consider it in the future.
*** Readability
I want to care about readability in the following modes:

- [ ] nov
- [ ] info
- [ ] helpful

See examples in [[https://depp.brause.cc/nov.el/][nov.el: Major mode for reading EPUBs in Emacs]].
*** Extra dependencies
=@extra= tag is used to denote packages that requires large dependencies.
To use these features, they need to be turned on at build time.

#+BEGIN: org-ql :query "tags:@extra" :columns (heading todo)
| Heading   | Todo |
|-----------+------|
| [[beancount][beancount]] |      |
#+END:
*** Links
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:27]
:END:
#+BEGIN: org-ql :query "tags:links" :columns (heading todo)
| Heading   | Todo |
|-----------+------|
| [[orglink][orglink]]   |      |
| [[link-hint][link-hint]] |      |
| [[orgit][orgit]]     |      |
#+END:
*** Window management
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:07]
:END:
#+BEGIN: org-ql :query "tags:windows" :columns (heading todo)
| Heading     | Todo |
|-------------+------|
| [[fullframe][fullframe]]   |      |
| [[windmove][windmove]]    |      |
| [[winner][winner]]      |      |
| [[popper][popper]]      |      |
| [[repl-toggle][repl-toggle]] |      |
#+END:
*** Annotating
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:
You can use org-remark to annotate texts in file buffers.

To annotate EPUB files in nov.el, you can use org-noter. It also supports PDF files (via =pdf-tools= package), but I won't use pdf-tools package.
*** Natural languages
#+BEGIN: org-ql :query "tags:dictionary" :columns (heading todo)
| Heading | Todo |
|---------+------|
| [[fanyi][fanyi]]   |      |
#+END:
** Footer                                                         :noexport:
# Local Variables:
# org-complete-tags-always-offer-all-agenda-tags: nil
# End:
