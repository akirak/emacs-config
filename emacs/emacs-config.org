# -*- org-id-link-to-org-use-id: nil; org-complete-tags-always-offer-all-agenda-tags: nil; eval: (org-make-toc-mode t) -*-
* An Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#supported-systems][Supported systems]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#typography-settings][Typography settings]]
- [[#org][Org]]
- [[#treesit-based-major-modes][Treesit-based major modes]]
- [[#working-with-specific-services][Working with specific services]]
- [[#user-package-akirak-el][User package (akirak-*.el)]]
- [[#packages][Packages]]
- [[#workarounds][Workarounds]]
- [[#post-init][Post init]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
  - [[#grep][Grep]]
  - [[#sh-emulation-keybindings][Sh-emulation keybindings]]
:END:
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :auto-insert
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :auto-insert (&rest entries)
     "Add ENTRIES to `auto-insert-alist'."
     `(with-eval-after-load 'autoinsert
        (dolist (entry (reverse ',entries))
          (add-to-list 'auto-insert-alist entry)))))
#+end_src
*** :compilation-error
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :compilation-error (&rest alist)
      "Add entries to the compilation error regexp alist."
      `(with-eval-after-load 'compile
         (dolist (entry (quote ,alist))
           (if (stringp (car entry))
               (add-to-list 'compilation-error-regexp-alist entry)
             (add-to-list 'compilation-error-regexp-alist (car entry))
             (add-to-list 'compilation-error-regexp-alist-alist entry))))))
#+end_src
*** :defer
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:19]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
      "Call a function at N seconds after init."
      `(add-hook 'after-init-hook
                 (lambda ()
                   (run-with-timer ,seconds nil
                                   ,(or func (setup-get 'hook)))))))
#+end_src
*** :el-patch
:PROPERTIES:
:CREATED_TIME: [2022-12-30 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :el-patch
      (lambda (&rest body)
        `(when (require 'el-patch nil t)
           ,@body))
      :documentation "Evaluate el-patch definitions."
      :debug '(setup)
      :after-loaded t
      :indent 0))
#+end_src
*** :embark
:PROPERTIES:
:CREATED_TIME: [2022-04-24 Sun 17:26]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :embark (map interactive &rest bindings)
     "Proxy or bind embark bindings."
     :indent 2
     `(with-eval-after-load 'embark
        ,@(cl-loop for (key cmd name) in bindings
                   collect `(define-key ,map (kbd ,key)
                                        ,(if interactive
                                             `(defun ,name (arg)
                                                (interactive ,interactive)
                                                (,cmd arg))
                                           `(quote ,cmd)))))))
#+end_src
*** :huan
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 21:38]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :huan (&rest entries)
     "Add ENTRIES to `huan-mode-symbols-alist' for the mode."
     :indent 0
     `(with-eval-after-load 'huan
        (let ((mode ',(setup-get 'mode))
              (entries ',entries))
          (if-let (cell (assq mode huan-mode-symbols-alist))
              (let ((sym (make-symbol "entries")))
                (set sym (cdr cell))
                (dolist (ent (reverse entries))
                  (add-to-list sym ent))
                (setcdr cell (symbol-value sym)))
            (push (cons mode entries)
                  huan-mode-symbols-alist))))))
#+end_src
*** :mode-repl
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:41]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :mode-repl (repl-fn)
      "Add an entry to `rtog/mode-repl-alist'."
      `(progn
         (with-eval-after-load 'repl-toggle
           (push (cons ',(setup-get 'mode) ',repl-fn)
                 rtog/mode-repl-alist))
         (add-hook ',(setup-get 'hook)
                   #'repl-toggle-mode))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
*** :org-open
:PROPERTIES:
:CREATED_TIME: [2023-07-22 Sat 10:28]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :org-open (file command &rest plist)
     `(with-eval-after-load 'org
        (cl-pushnew (cons ,file
                          ,(if (plist-get plist :file)
                               `(defun ,(intern (format "akirak/org-open-%s"
                                                        (if (string-match (rx (+ alnum)) file)
                                                            (match-string 0 file)
                                                          file)))
                                    (filename _)
                                  (,command filename))
                             `,command))
                    org-file-apps))))
#+end_src
*** :org-src-lang
:PROPERTIES:
:CREATED_TIME: [2023-01-23 Mon 19:37]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :org-src-lang (lang)
     "Add an entry to `org-src-lang-modes' for the mode."
     `(with-eval-after-load "org-src"
        (let* ((lang ,lang)
               (name ',(thread-last
                         (setup-get 'mode)
                         (symbol-name)
                         (string-remove-suffix "-mode"))))
          (add-to-list 'org-src-lang-modes
                       (cons (if (stringp lang)
                                 lang
                               (string-remove-suffix "-ts" name))
                             (intern name)))))))
#+end_src
*** :package-files
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 12:56]
:END:

#+begin_src emacs-lisp
  (defvar akirak-consult-package-files nil)

  (eval-when-compile
    (define-setup-macro
     :package-files (&rest filenames)
     "Define file names of package files."
     `(progn
        (mapcar (lambda (filename)
                  (add-to-list 'akirak-consult-package-files filename))
                ',filenames))))
#+end_src
*** :reformatters
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :reformatters (&rest entries)
     "Define reformatters."
     (let ((feature (setup-get 'feature)))
       (macroexp-progn
        (mapcar (pcase-lambda (`(,name . ,args))
                  `(eval-after-load ',feature
                     (defun ,(intern (concat "akirak/reformatter-define-"
                                             (symbol-name name))) ()
                       (reformatter-define ,name ,@args))))
                entries)))))
#+end_src
*** :repeat
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 23:54]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :repeat (keymap &rest commands)
     "Set the repeat map of commands."
     :indent 1
     (dolist (cmd commands)
       (put cmd 'repeat-map keymap))))
#+end_src
*** :set
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 11:30]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))
#+end_src
*** :status
By default, settings inside =:status= clauses are not loaded.

#+begin_src emacs-lisp
  (defvar akirak/enabled-status-tags nil)

  (eval-when-compile
    (define-setup-macro :status (tag &rest progn)
      "Conditionally expand the macro."
      :indent 1
      (when (or (eq t akirak/enabled-status-tags)
                (memq tag akirak/enabled-status-tags))
        (macroexp-progn progn))))
#+end_src
** Performance                                             :packages:
# Note: Some of these should be loaded as early as possible.
*** COMMENT benchmark-init                            :profiling:initialization:ARCHIVE:
#+begin_quote
Benchmarks Emacs require and load calls
#+end_quote

#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                               :performance:
#+begin_quote
the Garbage Collector Magic Hack
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:set gcmh-verbose init-file-debug
          gcmh-high-cons-threshold (* 128 1024 1024)))
#+end_src
** Supported systems
*** os-release
#+begin_src elisp
  (defun akirak/os-release ()
    (when (file-readable-p "/etc/os-release")
      (with-temp-buffer
        (insert-file-contents "/etc/os-release")
        (let (result)
          (while (re-search-forward (rx bol (group (+ (any "_" upper)))
                                        "=")
                                    nil t)
            (push (cons (match-string 1)
                        (replace-regexp-in-string
                         "\"" ""
                         (buffer-substring (point) (pos-eol))))
                  result))
          result))))

  (let ((alist (akirak/os-release)))
    (defconst akirak/os-id
      (cdr (assoc "ID" alist)))
    (defconst akirak/os-pretty-name
      (cdr (assoc "PRETTY_NAME" alist))))
#+end_src
*** Interacting with the underling system
#+begin_src elisp
  (defcustom akirak/system-leave-hook nil
    "Hook to run when the user leaves the computer."
    :type 'hook)

  (defun akirak/system-leave-hook ()
    ;; It may be better to run the hooks outside of any project context, but I
    ;; haven't found any actual situation that needs it yet.
    (run-hook-wrapped
     'akirak/system-leave-hook
     (lambda (fn)
       (condition-case err
           (funcall fn)
         (error
          (message "Error while running %s as part of akirak/system-leave-hook: %s"
                   fn err))))))
#+end_src
*** Specific systems
#+begin_src elisp
  (defalias 'akirak/wsl-p #'akirak-wsl-p)
#+end_src
** Custom conventions
*** Prefix for mode-specific commands
#+begin_src emacs-lisp
  (defcustom akirak/mode-prefix-key "C-,"
    "Prefix for mode-specific keybindings."
    :type 'string)
#+end_src
*** <f12> as a prefix for miscellaneous commands
I use =<f12>= as a prefix for miscellaneous keybindings on the global map.

#+begin_src emacs-lisp
  (with-eval-after-load 'which-key
    (pcase-dolist (`(,key . ,description)
                   '(("a" . "ai")
                     ("c" . "capture")
                     ("c f" . "frame")
                     ("c s" . "screenshot")
                     ("c r" . "record screen")
                     ("d" . "disk")
                     ("e" . "emacs")
                     ("g" . "forge")
                     ("n" . "nix")
                     ("s" . "system")
                     ("S" . "secrets")))
      (which-key-add-keymap-based-replacements
        global-map (concat "<f12> " key) description)))
#+end_src
*** C-z as a prefix for session commands
#+begin_src emacs-lisp
  (define-prefix-command 'akirak/c-z-map)
  ;; C-z is bound to suspend-frame by default, but I won't use it anyway
  (global-set-key (kbd "C-z") 'akirak/c-z-map)
#+end_src
*** Key translation map
#+begin_src emacs-lisp
  (setup key-translation-map
    (:status opinionated
      (global-set-key (kbd "M-r") nil)
      (define-key key-translation-map (kbd "M-r") (kbd "C-x r"))

      (define-key key-translation-map (kbd "C-9") (kbd "C-x x"))

      ;; Chromebook don't have physical function keys. They substitute
      ;; Search + num for function keys, but Search + 1 is hard to press,
      ;; especially when Search and Ctrl are swapped.
      ;; This is quite annoying, so I will use M-` as <f1>.
      (define-key key-translation-map (kbd "M-`") (kbd "<f1>"))))
#+end_src
*** Window management
#+begin_src emacs-lisp
  (defcustom akirak/display-popup-window-function #'pop-to-buffer
    "Function used to display popup windows."
    :type 'function)
#+end_src
** Macro packages                                          :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
*** el-patch                                                 :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-03-09 Wed 15:26]
:END:
#+begin_quote
Future-proof your Elisp
#+end_quote

#+begin_src emacs-lisp
(setup (:package el-patch))
#+end_src
*** COMMENT fullframe                              :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:06]
:END:
#+begin_quote
Generalized automatic execution in a single frame
#+end_quote

#+begin_src emacs-lisp
(setup (:package fullframe))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/fullframe][~tomterl/fullframe - sourcehut git]].
** Built-ins
:PROPERTIES:
:SORTING_TYPE: a
:END:
# Note: These should never fail.
*** abbrev
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 21:19]
:END:

#+begin_src emacs-lisp
  (setup abbrev
    (:set save-abbrevs nil)
    (:status personal
      (:when-loaded
        (:hook-into gitcommit-mode
                    markdown-mode
                    org-mode)
        (define-abbrev-table 'global-abbrev-table
          '(("wip" "WIP")
            ("fixme" "FIXME")
            ("afaik" "AFAIK")
            ("imo" "IMO")
            ("imho" "IMHO")
            ;; Common mistypes
            ("teh" "the")
            ("ort" "org")
            ("meang" "meant"))))))
#+end_src
*** autoinsert                                           :expansion:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 17:47]
:END:

#+begin_src emacs-lisp
  (setup autoinsert
    (:set auto-insert 'other
          auto-insert-query nil)
    (:with-mode auto-insert-mode
      (:hook-into after-init-hook)))
#+end_src
*** autorevert                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup autorevert
    (:set auto-revert-avoid-polling t)
    (:with-mode global-auto-revert-mode
      (:hook-into after-init-hook)))
#+end_src
*** bindings
:PROPERTIES:
:CREATED_TIME: [2022-09-09 Fri 12:22]
:END:

#+begin_src emacs-lisp
  (setup bindings
    ;; Exclude global-mode-string from mode-line-misc-info.
    ;; See the settings for mini-modeline.
    (:set mode-line-misc-info nil))
#+end_src
*** bookmark
:PROPERTIES:
:CREATED_TIME: [2022-05-14 Sat 09:53]
:ID:       97f2f3f8-b43c-4e48-a588-4cf3c4413e99
:END:

#+begin_src emacs-lisp
  (setup bookmark
    (:set bookmark-save-flag t
          bookmark-sort-flag 'last-modified)

    (defun akirak/delete-bookmark-to-here ()
      "Delete a bookmark record to the current location, if any"
      (interactive)
      (bookmark-maybe-load-default-file)
      (cl-flet
          ((remk
             (record)
             (thread-last
               (cdr record)
               (seq-filter (pcase-lambda (`(,key . ,alist))
                             (memq key '(filename
                                         handler
                                         front-context-string))))
               (seq-sort-by (lambda (record)
                              (symbol-name (car record)))
                            #'string<))))
        (let ((this (bookmark-make-record)))
          (when-let (record (seq-find (lambda (record)
                                        (equal (remk record) (remk this)))
                                      bookmark-alist))
            ;; TODO This seem to be ineffective on bookmarks created using org-bookmark-heading.
            (bookmark--remove-fringe-mark
             (bookmark-get-bookmark (car record) 'noerror))
            (bookmark-delete (car record))
            (message "Deleted \"%s\"" (car record)))))))
#+end_src
*** browse-url
:PROPERTIES:
:CREATED_TIME: [2022-04-06 Wed 17:15]
:END:

#+begin_src emacs-lisp
  (setup browse-url
    ;;    (:org-open "\\.x?html?\\'" browse-url)

    (:status personal
      (advice-add 'browse-url-can-use-xdg-open
                  :override #'akirak-open-can-use-default-program)
      (advice-add 'browse-url-xdg-open
                  :override #'akirak-open-default)

      (:set browse-url-handlers `((,(rx bos "http" (?  "s") "://"
                                        (or "localhost"
                                            (and (+ digit) (* "." (+ digit))))
                                        (or (any ":/") eos))
                                   . akirak-browse-url-private-url)
                                  ;; Some web sites don't support alternative
                                  ;; browsers well. I don't blame those services.
                                  ;; It would be sometimes necessary to rely on
                                  ;; non-standard browser technologies in order to
                                  ;; implement an advanced user experience on web.
                                  ;; Instead of avoiding those services entirely,
                                  ;; I will force use of a chromium-compatible
                                  ;; browser only in specific web sites to keep
                                  ;; using my preferred browser elsewhere.
                                  (,(rx bos "http" (?  "s") "://"
                                        (or "airtable.com"
                                            "figma.com")
                                        (or "/" eos))
                                   . akirak-browse-url-chromium-default)))))
#+end_src
*** buffer.c                                     :formatting:visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:
#+begin_src emacs-lisp
  (setup buffer
    (:set buffer-file-coding-system 'utf-8
          fill-column 80
          indicate-empty-lines t
          ;; In some major modes, you should turn on truncate-lines.
          ;; They should be configured alongside individual modes.
          truncate-lines nil)
    (:with-mode shr-mode
      (:local-set truncate-lines t))

    ;; A more lightweight version of midnight
    (run-with-idle-timer
     600 nil
     (defun akirak/cleanup-buffers ()
       (dolist (buffer (buffer-list))
         (when (and (derived-mode-p 'dired-mode 'special-mode)
                    (not (file-directory-p (buffer-local-value
                                            'default-directory buffer))))
           (message "Kill buffer %s as the directory does not exist" buffer)
           (kill-buffer buffer))))))
#+end_src
**** Line spacing
#+begin_src emacs-lisp
  ;; buffer.c
  (setup line-spacing
    (:with-mode (org-mode markdown-mode)
      (:local-set line-spacing 0.5))
    (:with-mode (Help-mode helpful-mode Info-mode)
      (:local-set line-spacing 0.3))
    (:with-mode (eww-mode)
      (:local-set line-spacing 0.35))
    (:with-mode (nov-mode)
      (:local-set line-spacing 0.4)))
#+end_src
**** Tab width
#+begin_src emacs-lisp
  (setup tab-width
    (:set tab-width 2)
    (:with-mode (emacs-lisp-mode)
      (:local-set tab-width 8))
    (:with-mode (makefile-mode)
      (:local-set tab-width 4))
    (:with-mode (js-mode typescript-mode sh-mode python-mode)
      (:local-set tab-width 2)))
#+end_src
*** calc
:PROPERTIES:
:CREATED_TIME: [2022-07-03 Sun 15:16]
:END:

#+begin_src emacs-lisp
  (setup calc
    (:global "C-c q c" #'calc))
#+end_src
*** calendar
:PROPERTIES:
:CREATED_TIME: [2022-08-12 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup calendar
    (add-to-list 'display-buffer-alist
                 '((major-mode . calendar-mode)
                   (display-buffer-in-side-window)))

    (:global "C-z m"
             (defun akirak/calendar (&optional arg)
               (interactive "P")
               (if (and (derived-mode-p 'org-mode)
                        (bound-and-true-p org-dog-file-mode)
                        (memq (object-class (org-dog-buffer-object))
                              '(org-dog-datetree-file
                                org-dog-facade-datetree-file)))
                   (org-reverse-datetree-calendar)
                 (calendar arg)))))
#+end_src
*** callproc.c                                             :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup callproc
    (:only-if (eq system-type 'windows-nt))
    (:set shell-file-name (executable-find "bash")))
#+end_src
*** compile                                                :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup compile
    (:set compilation-ask-about-save nil
          compilation-save-buffers-predicate #'save-some-buffers-root
          compilation-auto-jump-to-first-error nil
          compilation-scroll-output t
          compilation-environment '("TERM=xterm-256color"))

    (:global "<f9>" #'recompile)

    ;; This code has been stolen from somewhere. I don't remember where, but the
    ;; same code can be found in many repositories on GitHub.
    (add-hook 'compilation-start-hook #'akirak/xterm-color-compilation-start)
    (defun akirak/xterm-color-compilation-start (proc)
      ;; We need to differentiate between compilation-mode buffers
      ;; and running as part of comint (which at this point we assume
      ;; has been configured separately for xterm-color)
      (when (eq (process-filter proc) 'compilation-filter)
        ;; This is a process associated with a compilation-mode buffer.
        ;; We may call `xterm-color-filter' before its own filter function.
        (set-process-filter
         proc
         (lambda (proc string)
           (funcall 'compilation-filter proc
                    (xterm-color-filter string)))))))
#+end_src
*** custom
:PROPERTIES:
:CREATED_TIME: [2022-09-12 Mon 15:13]
:END:
The following variable defines variables that can be saved to =custom-file=:

#+begin_src emacs-lisp
  (custom-declare-group
   'akirak/local
   (mapcar
    (lambda (sym)
      (list sym 'custom-variable))
    '(auth-sources                        ; Can be machine-dependent
      org-agenda-span                     ; Can be dependent on the work context
      ;; Work context
      user-full-name
      user-mail-address
      bookmark-default-file
      org-memento-workhour-alist
      org-memento-file
      org-memento-policy-file
      send-mail-function
      smtpmail-smtp-server
      smtpmail-stream-type
      smtpmail-smtp-service
      akirak-git-clone-root
      nix3-flake-clone-root
      akirak-log-private-file
      akirak-org-clock-history-threshold
      akirak-org-log-file
      akirak/font-height
      akirak/org-memento-export-directory
      ;; Dynamic
      safe-local-variable-values))
   "List of variables I save to custom-file.")

  (defun akirak/customize-local ()
    "Configure host-local custom variables."
    (interactive)
    (dolist (x (get 'akirak/local 'custom-group))
      (pcase x
        ((and `(,sym custom-variable)
              (guard (not (symbol-file sym))))
         (let ((name (symbol-name sym)))
           (catch 'loaded
             (while (string-match (rx bos (group (+ anything)) "-") name)
               (setq name (match-string 1 name))
               (when (require (intern name) nil t)
                 (throw 'loaded t))))))))
    (require 'cus-edit)
    (customize-group 'akirak/local))
#+end_src

The other variables must not be saved, and they should be put in configuration:

#+begin_src emacs-lisp
  (setup custom
    (:global "<f12> e v" #'customize-variable)
    (:global "<f12> e o" #'customize-variable-other-window)
    (:global "<f12> e g" #'customize-group)
    (:status personal
      ;; Don't allow saving a variable that is not included in the whitelist
      (advice-add 'custom-variable-mark-to-save
                  :before
                  (defun akirak/customize-save-variable-check (widget)
                    (unless (memq (widget-value widget)
                                  (mapcar #'car (get 'akirak/local 'custom-group)))
                      (error "Variable %s should not be saved to custom-file. \
  See akirak/custom-variable-whitelist"
                             (widget-value widget)))))))
#+end_src
*** delsel
:PROPERTIES:
:CREATED_TIME: [2023-07-07 Fri 21:30]
:END:

#+begin_src emacs-lisp
  (setup delsel
    (:with-mode delete-selection-mode
      (:hook-into after-init-hook)))
#+end_src
*** desktop
#+begin_src emacs-lisp
  (setup desktop
    (:when-loaded
      ;; Use `desktop-after-read-hook' to display a dashboard.
      (add-hook 'desktop-globals-to-save 'desktop-after-read-hook)))
#+end_src
*** dired                                                    :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:47]
:END:

#+begin_src emacs-lisp
  (setup dired
    (:set dired-recursive-copies 'always
          dired-recursive-deletes 'top
          dired-auto-revert-buffer t
          dired-listing-switches "-alh --time-style=long-iso")
    (:mode-repl akirak-shell-new-other-window))
#+end_src
*** display-fill-column-indicator
:PROPERTIES:
:CREATED_TIME: [2022-11-13 Sun 17:44]
:END:

#+begin_src emacs-lisp
  (setup display-fill-column-indicator
    (add-hook 'after-init-hook #'global-display-fill-column-indicator-mode))
#+end_src
*** edebug
:PROPERTIES:
:CREATED_TIME: [2022-11-09 Wed 23:59]
:END:

#+begin_src emacs-lisp
  (setup edebug
    (:global "<f12> e r" #'edebug-remove-instrumentation))
#+end_src
*** ediff-wind                                                :diff:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup ediff-wind
    (:set ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
*** eldoc                                         :help:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:08]
:END:

#+begin_src emacs-lisp
  (setup eldoc
    (:with-hook turn-on-eldoc-mode
      (:hook-into emacs-lisp-mode))

    (:set eldoc-documentation-strategy 'eldoc-documentation-compose)
    (:global "C-c e" #'eldoc-doc-buffer))
#+end_src
*** elec-pair                      :prog_mode:text_mode:parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup elec-pair
    (:with-mode electric-pair-mode
      (:hook-into after-init-hook)))
#+end_src

While the mode is generally useful, the exception is =lispy-mode=, which overrides =self-insert-command= and conflicts with the features of the package.
*** electric                                            :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

The built-in =electric= package provides the following modes:

- [ ] =electric-indent-mode= :: Use major-mode specific indentation functions instead?
- [ ] =electric-layout-mode= :: It may be useful in some programming modes
- [ ] =electric-quote-mode= :: Maybe I'll turn it on in some specific projects

#+begin_src emacs-lisp
  (setup electric)
#+end_src
*** elisp-mode                             :Emacs__Lisp:major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 17:55]
:END:

#+begin_src emacs-lisp
  (setup elisp-mode
    (:with-mode emacs-lisp-mode
      (:huan
        ("eval-after-load" "with-eval-after-load")
        ("add-hook" "remove-hook")
        ("advice-add" "advice-remove"))
      (:hook outline-minor-mode)
      (:local-set imenu-generic-expression
                  (append lisp-imenu-generic-expression
                          `(("Misc"
                             ,(rx bol "("
                                  (or (and "c" (not (any "l")))
                                      (any "ab" "d-z"))
                                  (* (any "-" alnum))
                                  "-"
                                  "def" (+ (not (any space)))
                                  (+ (any blank))
                                  (group (+ (not (any space control "\n()")))))
                             1)
                            ("Config"
                             "^(\\(?:setup\\|use-package\\)[[:blank:]]+\\_<\\([^[:space:]]+\\)"
                             1))))
      (:compilation-error
       ;; Emacs checkdoc/byte-compile, GHC, etc.
       ;; path:line:col: error:
       (emacs-lisp "\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*\\(?:Error\\|error\\):"
                   1 2 3 (4 . 4))))

    (:with-mode lisp-data-mode
      (:file-match "/melpa/recipes/"))

    (:auto-insert
     ("-tests?\\.el\\'" . (> ";;; -*- lexical-binding: t -*-\n\n"
                             "(require 'buttercup)\n"
                             "(require '" (replace-regexp-in-string
                                           "-tests?\\'" ""
                                           (file-name-base (buffer-file-name)))
                             ")\n\n"
                             _ "\n\n"
                             "(provide '" (file-name-base (buffer-file-name)) ")\n"))
     ("\\.el\\'" . (> ";;; "
                      (file-name-nondirectory (or buffer-file-name (buffer-name)))
                      " --- " _
                      " -*- lexical-binding: t -*-\n"
                      "\n\n\n"
                      "(provide '"
                      (file-name-base (or buffer-file-name (buffer-name)))
                      ")\n"
                      ";;; "
                      (file-name-nondirectory (or buffer-file-name (buffer-name)))
                      " ends here"))
     ("/recipes/.+\\'" . (> "(" (file-name-nondirectory (buffer-file-name))
                            " :fetcher github :repo \"" _ "\")")))

    (defun akirak/eval-buffer-or-load-file ()
      (interactive)
      (when (eq major-mode 'emacs-lisp-mode)
        (if buffer-file-name
            (load-file buffer-file-name)
          (eval-buffer)))))
#+end_src
*** eww
:PROPERTIES:
:CREATED_TIME: [2024-02-10 Sat 11:42]
:END:

#+begin_src emacs-lisp
  (setup eww
    (:bind "^"
           (defun akirak/eww-directory-up ()
             (interactive nil eww-mode)
             (let* ((url (eww-current-url))
                    (urlobj (url-generic-parse-url url))
                    (filename (url-filename urlobj)))
               (when (string-match-p "?" (car (url-path-and-query urlobj)))
                 (user-error "URL contains a query, so this command won't work"))
               (unless filename
                 (error "url-filename is nil"))
               (when (pcase (file-name-base filename)
                       (""
                        (setf (url-filename urlobj)
                              (file-name-directory (directory-file-name filename))))
                       ((rx bol "index" (or "." eol))
                        (let ((dir (file-name-directory (directory-file-name
                                                         (file-name-directory filename)))))
                          (if (equal (url-type urlobj) "file")
                              (let ((basename (file-name-base filename)))
                                (setf (url-filename urlobj)
                                      (concat (or (locate-dominating-file dir basename)
                                                  (user-error "No file named %s in ancestors"
                                                              basename))
                                              (file-name-base filename))))
                            (setf (url-filename urlobj)
                                  dir))))
                       (_
                        (setf (url-filename urlobj)
                              (file-name-directory filename))))
                 (eww (url-recreate-url urlobj)))))))
#+end_src
*** executable
:PROPERTIES:
:CREATED_TIME: [2022-07-09 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup executable
    (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))
#+end_src
*** ffap
:PROPERTIES:
:CREATED_TIME: [2023-07-22 Sat 21:26]
:END:

#+begin_src emacs-lisp
  (setup ffap
    (:set ffap-file-finder (defun akirak/ffap-file-finder (file)
                             (if (akirak/ffap-prefer-other-window-p file)
                                 (find-file-other-window file)
                               (find-file file)))
          ffap-directory-finder (defun akirak/ffap-directory-finder (dir)
                                  (if (akirak/ffap-prefer-other-window-p dir t)
                                      (dired-other-window dir)
                                    (dired dir))))

    (defun akirak/ffap-prefer-other-window-p (file &optional dirp)
      ;; If not visiting a file buffer directly, prefer other window.
      (not (and (buffer-file-name)
                ;; If not visiting a file in the same project, prefer other
                ;; window.
                (equal (when-let (pr (project-current nil
                                                      default-directory))
                         (project-root pr))
                       (when-let (pr (project-current nil
                                                      (if dirp
                                                          file
                                                        (file-name-directory file))))
                         (project-root pr))))))

    (:global "C-c f" (defun akirak/ffap (&optional arg)
                       (interactive "P")
                       (if-let (window (and (numberp arg)
                                            (akirak-window--other-window nil arg)))
                           (progn
                             (display-buffer-override-next-command
                              `(lambda (buffer _)
                                 (window--display-buffer buffer ,(selected-window)
                                                         'reuse)))
                             (with-selected-window window
                               (akirak-avy-ffap)))
                         (if arg
                             (akirak-avy-ffap)
                           (ffap))))))
#+end_src
*** fileio.c                                                 :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fileio
    (:set delete-by-moving-to-trash t))
#+end_src
*** filelock.c                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup filelock
    ;; lock files will kill `npm start'
    (:set create-lockfiles nil))
#+end_src
*** files                                                    :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup files
    (:set backup-by-copying t
          backup-directory-alist
          `(("." . ,(locate-user-emacs-file "backup/")))
          delete-old-versions t
          version-control t
          view-read-only t
          auto-mode-case-fold nil
          require-final-newline t
          ;; pkgs/top-level/all-packages.nix in nixpkgs: 1.5 MB
          large-file-warning-threshold (* 1024 1024 2)
          find-sibling-rules
          `((,(rx "lib/" (group (+ anything)) ".ex" (?  "s") eos)
             "test/\\1_test.ex"
             "test/\\1_test.exs")
            (,(rx "test/" (group (+ anything)) "_test.ex" (?  "s") eos)
             "lib/\\1.ex"
             "lib/\\1.exs")
            (,(rx "/__tests__/" (group (+ (not (any "/")))) ".ts" (?  "x") eos)
             "/\\1.ts"
             "/\\1.tsx")
            (,(rx "/" (group (+ (not (any "/")))) ".ts" (?  "x") eos)
             "/__tests__/\\1.ts"
             "/__tests__/\\1.tsx")))

    (:when-loaded
      ;; Based on https://lonely.town/@jvillasante@hachyderm.io/110232974766557148
      (add-to-list 'backup-directory-alist
                   (cons (rx bos (or "/tmp/"
                                     "/dev/shm/"
                                     "/run/"))
                         nil)))

    (define-key ctl-x-map "," #'find-sibling-file)

    (advice-add 'abort-if-file-too-large
                :before-while
                (defun akirak/ad-before-abort-if-file-too-large (_size
                                                                 _op-type
                                                                 filename &rest _)
                  (not (string-match-p (rx (or ".org"
                                               ".pdf"
                                               ".epub")
                                           eos)
                                       filename))))

    (define-key ctl-x-x-map (kbd "R") #'rename-visited-file)

    (:status opinionated
      (:global "<f5>" #'revert-buffer))

    (:status personal
      (let ((prettier '((eval . (prettier-on-save-mode t))))
            ;; (mix-format '((eval . (mix-format-on-save-mode t))))
            (sqlformat '((eval . (sqlformat-on-save-mode t))))
            (lsp '((eval . (eglot-ensure))))
            (flymake-eslint '((eval . (flymake-eslint-enable))))
            (ocamlformat '((eval . (ocamlformat-on-save-mode t))))
            (alejandra '((eval . (alejandra-on-save-mode t)))))
        (dir-locals-set-class-variables
         'personal
         `((nix-ts-mode . (,@alejandra))))
        (dir-locals-set-class-variables
         'default
         `((web-mode . (,@prettier ,@lsp))
           (css-mode . (,@prettier ,@lsp))
           (svelte-mode . (,@prettier ,@lsp ,@flymake-eslint))
           (elixir-ts-mode . (,@lsp))
           (heex-ts-mode . (,@lsp))
           (tsx-ts-mode . (,@prettier ,@lsp))
           (rust-ts-mode . (,@lsp))
           (typescript-ts-mode . (,@prettier ,@lsp))
           (tuareg-mode . (,@lsp ,@ocamlformat))
           (sql-mode . (,@sqlformat))
           (haskell-mode . (,@lsp)))))
      (dir-locals-set-directory-class "~/config/" 'personal)
      (dir-locals-set-directory-class "~/emacs-config/" 'personal)
      (dir-locals-set-directory-class "~/work2/learning/" 'default)
      (dir-locals-set-directory-class "~/work2/foss/" 'default)

      (:set ignored-local-variable-values
            ;; github:melpa/melpa
            '((eval . (and buffer-file-name
                           (not (eq major-mode 'package-recipe-mode))
                           (or (require 'package-recipe-mode nil t)
                               (let ((load-path (cons "../package-build" load-path)))
                                 (require 'package-recipe-mode nil t)))
                           (package-recipe-mode)))))))
#+end_src

- Use =akirak-files-ensure-abbrev-list= to update =directory-abbrev-alist=. (see [[*akirak][akirak]]).

*** find-func
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:18]
:END:

#+begin_src emacs-lisp
  (setup find-func
    (:global "C-x M-l" #'find-library)
    (add-hook 'find-function-after-hook
              (defun akirak/find-function-focus ()
                (recenter-top-bottom 0))))
#+end_src
*** flymake                                            :development:
:PROPERTIES:
:CREATED_TIME: [2022-03-19 Sat 16:33]
:END:

#+begin_src emacs-lisp
  (setup flymake
    (:set flymake-show-diagnostics-at-end-of-line nil)
    (:bind "M-g M-n" #'flymake-goto-next-error
           "M-g M-p" #'flymake-goto-prev-error))
#+end_src
*** COMMENT flyspell                                                           :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup flyspell
    (:nixpkgs "hunspell")
    (:hook-into markdown-mode
                ;; For org-mode, set up hooks in .dir-locals.el of individual
                ;; projects
                git-commit-mode-hook)
    (:unbind "C-," "C-." "C-;" "C-M-i" "C-c $"))
#+end_src
*** fns.c and xfns.c                                            :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fns
    (:set use-dialog-box nil
          use-short-answers t))

  (setup xfns
    (:set x-gtk-use-system-tooltips nil))
#+end_src
*** frame                                                   :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup frame
    (blink-cursor-mode -1)
    (set-frame-parameter nil 'alpha '(98 . 96))

    (:set window-divider-default-places 'bottom-only
          window-divider-default-bottom-width 1)
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'window-divider-mode)
      (window-divider-mode 1))

    (defconst akirak/base-frame-title-format
      '(" - GNU Emacs"
        (emacs-version
         (" " emacs-version))
        (twist-configuration-revision
         (" @ " twist-configuration-revision))
        (akirak/emacs-profile-name
         (" (" akirak/emacs-profile-name ")"))
        (system-name
         (" on " system-name))
        (akirak/os-pretty-name
         (", " akirak/os-pretty-name))))

    (defconst akirak/default-frame-title-format
      (cons '(org-memento-current-block
              org-memento-frame-title-format
              "%b")
            akirak/base-frame-title-format))

    (setq org-clock-frame-title-format
          (cons '(t org-mode-line-string)
                akirak/base-frame-title-format))

    (setq frame-title-format akirak/default-frame-title-format))
#+end_src
*** help
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup help
    (:set help-window-keep-selected t)
    (define-key help-map (kbd "C-h") nil))
#+end_src
*** hippie-exp
:PROPERTIES:
:CREATED_TIME: [2023-06-26 Mon 23:02]
:END:

#+begin_src emacs-lisp
  (setup hippie-exp
    (:global "C-M-/" #'hippie-expand)
    (:set hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-visible
            try-expand-dabbrev-from-kill)))
#+end_src
*** hl-line                                                 :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup hl-line
    (:with-mode hl-line-mode
      (:hook-into prog-mode-hook
                  text-mode-hook)))
#+end_src
*** image
:PROPERTIES:
:CREATED_TIME: [2022-04-27 Wed 07:16]
:END:

#+begin_src emacs-lisp
  (setup image
    (:nixpkgs "graphicsmagick")
    (:set image-use-external-converter t))
#+end_src
*** indent
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:08]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:set tab-always-indent 'complete)

    ;; Unbind `tab-to-tab-stop'
    (:global "M-i" nil))
#+end_src
*** indent.c                                            :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:set indent-tabs-mode nil)

    (defun akirak/turn-on-indent-tabs-mode ()
      (interactive)
      (setq indent-tabs-mode 1))

    (dolist (mode-hook '(makefile-mode-hook go-ts-mode-hook cue-mode-hook))
      (add-hook mode-hook 'akirak/turn-on-indent-tabs-mode)))
#+end_src
*** isearch
:PROPERTIES:
:CREATED_TIME: [2023-03-30 Thu 21:42]
:END:

#+begin_src emacs-lisp
  (setup isearch
    (:bind "M-q" #'isearch-query-replace
           "M-RET" (defun akirak/isearch-quit-with-region ()
                     (interactive)
                     (pcase-exhaustive isearch-match-data
                       (`(,begin ,end ,_)
                        (isearch-exit)
                        (goto-char begin)
                        (push-mark)
                        (goto-char end)
                        (activate-mark))))))
#+end_src
*** jit-lock
#+begin_src emacs-lisp
  (setup jit-lock
    (:set jit-lock-defer-time 0))
#+end_src
*** COMMENT js-jsx-mode                                                        :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 23:14]
:END:

#+begin_src emacs-lisp
  (setup js-jsx-mode
    (:file-match "\\.jsx\\'")

    (:hook (defun akirak/setup-js-jsx-mode ()
             (require 'sgml-mode)))

    (:with-feature js
      (:bind "C-c C-e" #'akirak-sgml-close-tag)))
#+end_src
*** js-mode
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 23:43]
:END:

#+begin_src emacs-lisp
  (setup js-mode
    (:file-match "\\.c?js\\'")
    (:set js-indent-level 2))
#+end_src
*** keymap.c                                           :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-03-19 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup keymap.c
    (:status opinionated
      (:with-map minibuffer-local-map
        (:bind "C-u" #'backward-kill-sentence
               "C-w" #'backward-kill-word))))
#+end_src
*** mailcap
:PROPERTIES:
:CREATED_TIME: [2023-07-22 Sat 12:49]
:END:

#+begin_src emacs-lisp
  (setup mailcap
    (:when-loaded
      (advice-add 'mailcap-parse-mimetypes
                  :around
                  (defun akirak/ad-around-mailcap-parse-mimetypes (orig &rest args)
                    (require 'akirak-mime)
                    (if (and (not args)
                             (not mailcap-mimetypes-parsed-p))
                        (or (akirak-mime-set-mime-extensions)
                            (funcall orig))
                      (apply orig args))))
      (advice-add 'mailcap-parse-mailcaps
                  :around
                  (defun akirak/ad-around-mailcap-parse-mailcaps (orig &rest args)
                    (require 'akirak-mime)
                    (if (and (not args)
                             (not mailcap-parsed-p))
                        (or (akirak-mime-set-mime-extensions)
                            (funcall orig))
                      (apply orig args))))))
#+end_src
*** menu-bar
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:22]
:END:

#+begin_src emacs-lisp
  (setup menu-bar
    (:status opinionated
      (:global "<f12> <f12>" #'toggle-debug-on-error)))
#+end_src
*** minibuf.c                                           :minibuffer:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:06]
:END:

Use the recommended settings for vertico.

#+begin_src emacs-lisp
  (setup minibuf.c
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq read-extended-command-predicate #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

*** minibuffer                              :minibuffer:keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:05]
:END:

#+begin_src emacs-lisp
  (setup minibuffer
    (:set completion-category-defaults nil
          completion-category-overrides
          '((file (styles partial-completion))
            (url (styles substring))))

    (define-key minibuffer-mode-map
                "~"
                (defun akirak/minibuffer-tilde ()
                  "During `find-file', replace the minibuffer input with the home directory."
                  (interactive)
                  (if minibuffer-completing-file-name
                      (progn
                        (delete-region (minibuffer-prompt-end) (point-max))
                        (goto-char (point-max))
                        (insert "~/"))
                    (insert "~"))))
    (define-key minibuffer-mode-map
                "/"
                (defun akirak/minibuffer-slash ()
                  "During `find-file', replace the minibuffer input with the root directory."
                  (interactive)
                  (if (and minibuffer-completing-file-name
                           (eq ?/ (char-after (1- (point)))))
                      (let ((ident (file-remote-p (buffer-substring-no-properties
                                                   (minibuffer-prompt-end) (point-max))
                                                  'ident)))
                        (delete-region (minibuffer-prompt-end) (point-max))
                        (goto-char (point-max))
                        (when ident
                          (insert ident))
                        (insert "/"))
                    (insert "/")))))
#+end_src
*** misc
:PROPERTIES:
:CREATED_TIME: [2022-11-02 Wed 23:59]
:END:

#+begin_src emacs-lisp
  (setup misc
    (:global "C-c d" #'duplicate-dwim))
#+end_src
*** mule
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    (set-language-environment "UTF-8"))
#+end_src
*** mule-cmds
:PROPERTIES:
:CREATED_TIME: [2022-12-21 Wed 18:05]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    ;; (add-hook 'set-language-environment-hook
    ;;           (defun akirak/post-set-language-environment ()
    ;;             "Turn off `flyspell-mode' depending on the language."
    ;;             (when (member current-language-environment
    ;;                           '("Japanese"))
    ;;               (flyspell-mode -1))))
    )
#+end_src
*** outline                                                :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup outline
    (:with-mode outline-minor-mode
      (:status opinionated
        (:bind "M-RET" #'outline-insert-heading))))
#+end_src
*** paragraphs                                                :text:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paragraphs
    (:set sentence-end-double-space nil))
#+end_src
*** paren                                              :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paren
    (:with-mode show-paren-mode
      (:hook-into after-init-hook)))
#+end_src
*** pixel-scroll
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 17:27]
:END:

#+begin_src emacs-lisp
  (setup pixel-scroll
    (:only-if (version<= "29" emacs-version)
              (:with-mode pixel-scroll-precision-mode
                ;; TODO: Find a better way to hook the minor mode
                (:hook-into find-file-hook
                            eww-mode-hook
                            help-mode-hook))))
#+end_src
*** process.c                                              :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup process
    ;; Expand read-process-output-max for lsp-mode
    (:set read-process-output-max (* 1024 1024)))
#+end_src
*** profiler                                       :Emacs:profiling:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 07:49]
:END:

#+begin_src emacs-lisp
  (setup profiler
    (defun akirak/profiler-toggle ()
      (interactive)
      (require 'profiler)
      (if (profiler-running-p)
          (progn
            (profiler-report)
            (profiler-stop)
            (profiler-reset))
        (call-interactively #'profiler-start)))

    (:status opinionated
      (:global "<f12> e p" akirak/profiler-toggle)))
#+end_src
*** project
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 17:00]
:ID:       f9efbe39-b9f9-4b15-93d6-b7b2433aca36
:END:
#+begin_quote
Operations on the current project
#+end_quote

#+begin_src emacs-lisp
  (setup project
    (:when-loaded
      (add-hook 'project-find-functions
                (defun akirak/project-nix-store-finder (dir)
                  (save-match-data
                    (when (string-match (rx bol "/nix/store/" (+ (not (any "/"))) "/")
                                        dir)
                      `(nix-store ,(match-string 0 dir))))))
      (cl-defmethod project-root ((project (head nix-store)))
        (cadr project)))

    (:status opinionated
      (:when-loaded
        (:with-map ctl-x-map
          ;; Don't use c-x p for the prefix map.
          (:unbind "p")
          ;; Rebind the key
          (:bind "p" #'akirak-consult-project-file))
        (global-set-key (kbd "C-x M") project-prefix-map)

        (add-hook 'project-find-functions
                  (defun akirak/project-worktree-group-finder (dir)
                    (when (string-match-p (rx bol "~/work2/"
                                              (+ (not (any "/")))
                                              "/"
                                              (+ (not (any "/")))
                                              "/"
                                              eol)
                                          dir)
                      `(worktree-group ,dir))))
        (cl-defmethod project-root ((project (head worktree-group)))
          (cadr project)))))
#+end_src
*** prolog                                      :major__mode:Prolog:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:33]
:END:

#+begin_src emacs-lisp
  (setup prolog
    (:file-match "\\.pl\\'"))
#+end_src
*** pulse
:PROPERTIES:
:CREATED_TIME: [2022-11-13 Sun 18:00]
:END:

#+begin_src emacs-lisp
  (setup pulse
    (:set pulse-momentary-iterations 10
          pulse-delay .2))
#+end_src
*** re-builder                                              :regexp:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 21:01]
:END:

#+begin_src emacs-lisp
  (setup re-builder
    (:set reb-re-syntax 'rx)

    (advice-add 'reb-empty-regexp
                :override
                (lambda ()
                  (cond ((reb-lisp-syntax-p) (el-patch-swap "'()" "`(and bol)"))
                        (t "")))))
#+end_src
*** recentf                                          :history:files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup recentf
    (:hook-into after-init-hook)
    (:set recentf-max-saved-items 1000
          recentf-auto-cleanup 'never
          ;; Default value. Some packages add extra entries after the package is
          ;; loaded.
          recentf-exclude (list (concat "^" (regexp-opt (list "/nix/store/"
                                                              (abbreviate-file-name
                                                               user-emacs-directory))
                                                        :group)))))
#+end_src
*** register
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:05]
:END:

#+begin_src emacs-lisp
  (setup register
    (:set register-preview-delay 0.5))
#+end_src
*** repeat
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 23:53]
:END:

#+begin_src emacs-lisp
  (setup repeat
    (:hook-into after-init-hook)
    (:set repeat-echo-function #'ignore)

    ;; Based on a snippet from
    ;; https://karthinks.com/software/it-bears-repeating/#adding-a-hydra-like-prompt-to-repeat-mode
    (advice-add 'repeat-post-hook :after
                (defun repeat-help--which-key-popup ()
                  (when (require 'which-key nil t)
                    (if-let (keymap (or repeat-map
                                        (repeat--command-property 'repeat-map)))
                        (when (eq keymap 'diff-hl-command-map)
                          (run-at-time
                           which-key-idle-delay nil
                           `(lambda ()
                              (which-key--create-buffer-and-show
                               nil (symbol-value ',keymap)))))
                      (which-key--hide-popup))))))
#+end_src
*** savehist                                               :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:08]
:END:

#+begin_src emacs-lisp
  (setup savehist
    (:hook-into after-init-hook))
#+end_src

This is a recommended setting for use with vertico. See https://github.com/minad/vertico#configuration.
*** saveplace                                              :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup saveplace
    (:with-mode save-place-mode
      (:hook-into after-init-hook)))
#+end_src
*** sgml-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 21:08]
:END:

#+begin_src emacs-lisp
  (setup sgml-mode
    (:with-map html-mode-map
      ;; I don't use facemenu commands, so save M-o
      (:unbind "M-o"))

    (:with-map sgml-mode-map
      (:bind "C-j" #'newline-and-indent
             [remap sgml-close-tag] #'akirak-sgml-close-tag))

    (defun akirak-sgml-close-tag ()
      (interactive)
      (let ((tag (car (save-excursion
                        (sgml-get-context)))))
        (when (and tag (sgml-tag-p tag))
          (if (and (> (point) (sgml-tag-start tag))
                   (< (point) (sgml-tag-end tag)))
              (progn
                (goto-char (sgml-tag-end tag))
                (save-excursion
                  (sgml-close-tag)))
            (sgml-close-tag))))))
#+end_src
*** shr
:PROPERTIES:
:CREATED_TIME: [2022-04-05 Tue 23:13]
:END:

#+begin_src emacs-lisp
  (setup shr
    (:set shr-bullet " ‣ "))
#+end_src
*** sh-script
:PROPERTIES:
:CREATED_TIME: [2023-11-25 Sat 11:36]
:END:

#+begin_src emacs-lisp
  (setup sh-script
    (:set sh-indentation 2))
#+end_src
*** simple                                      :formatting:writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup simple
    (:set suggest-key-bindings nil
          ;; Don't auto-save remote files.
          remote-file-name-inhibit-auto-save t)

    (:global [remap count-words-region] #'akirak/count-words-dwim
             [remap delete-horizontal-space] #'cycle-spacing
             [remap upcase-word] #'upcase-dwim
             [remap downcase-word] #'downcase-dwim
             [remap capitalize-word] #'capitalize-dwim)

    ;; I often type this sequence unintensionally. I never use this command, so
    ;; just disable the keybinding.
    (:global "C-x C-n" nil)

    (defun akirak/count-words-dwim ()
      (interactive)
      (save-restriction
        (when (derived-mode-p 'org-mode)
          (narrow-to-region (save-excursion
                              (org-back-to-heading)
                              (org-end-of-meta-data t)
                              (point))
                            (save-excursion
                              (org-end-of-subtree)
                              (when (looking-at (rx bol))
                                (end-of-line 0))
                              (point))))
        (call-interactively #'count-words)))

    (:status opinionated
      (:global "C-w"
               (defun akirak/kill-region-or-backward-kill-word (&optional arg)
                 "If a region is active, run `kill-region'. Otherwise, run `backward-kill-word'."
                 (interactive "p")
                 (if (region-active-p)
                     (kill-region (region-beginning) (region-end))
                   (backward-kill-word arg)))
               ;; In place of zap-to-char
               "M-z" #'zap-up-to-char)
      (:with-mode prog-mode
        (:bind "C-a"
               (defun akirak/back-to-indentation-or-bol ()
                 (interactive)
                 (if (or (looking-at "^")
                         (string-match-p (rx (not (any space)))
                                         (buffer-substring-no-properties
                                          (line-beginning-position)
                                          (point))))
                     (back-to-indentation)
                   (beginning-of-line)))))))
#+end_src
*** skeleton
:PROPERTIES:
:CREATED_TIME: [2022-10-08 Sat 10:55]
:END:

#+begin_src emacs-lisp
  (setup skeleton
    (:set skeleton-end-newline nil)

    (add-hook 'skeleton-end-hook
              (defun akirak/skeleton-start ()
                (setq skeleton-positions (cdr (nreverse skeleton-positions)))
                (when skeleton-positions
                  (local-set-key [tab] #'akirak/skeleton-pop-positions))))

    (defun akirak/skeleton-pop-positions ()
      (interactive)
      (when-let (pos (pop skeleton-positions))
        (goto-char pos)
        (if skeleton-positions
            (message "Remaining %d positions" (length skeleton-positions))
          (local-unset-key [tab])))))
#+end_src
*** sqlite-mode
:PROPERTIES:
:CREATED_TIME: [2023-07-22 Sat 11:17]
:END:

#+begin_src emacs-lisp
  (setup sqlite-mode
    (:org-open "\\.sqlite3?\\'" sqlite-mode-open-file :file t))
#+end_src
*** startup
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 19:45]
:END:
#+begin_src emacs-lisp
  (setup startup
    (:set inihibit-startup-screen t
          inhibit-default-init t
          inhibit-startup-echo-area-message t
          initial-buffer-choice (lambda () (or (get-buffer "*dashboard*")
                                               (get-buffer "*Messages*")))
          initial-scratch-message nil
          initial-major-mode 'fundamental-mode))
#+end_src

=*scratch*= buffer is shown at startup.
You can set =initial-buffer-choice= to a function or a buffer name depending on the context.
**** Initialization time
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collection(s)"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
*** subr                                                        :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup subr
    (:status opinionated
      ;; (:global "C-h" 'backward-delete-char)
      ))
#+end_src

=C-h= is one of the sh-emulation bindings.
*** subword
:PROPERTIES:
:CREATED_TIME: [2022-12-27 Tue 19:55]
:END:

#+begin_src emacs-lisp
  (setup subword
    ;; (:global "M-SPC" #'akirak/run-with-superword-inversed)

    ;; Deprecated.
    (defun akirak/run-with-superword-inversed (key)
      "Run a command with `superword-mode' inversed."
      (interactive "K")
      (let ((cmd (lookup-key (current-active-maps) key)))
        (superword-mode)
        (unwind-protect
            (call-interactively cmd)
          (superword-mode)))))
#+end_src
*** tab-bar
:PROPERTIES:
:CREATED_TIME: [2023-04-09 Sun 23:03]
:END:

#+begin_src emacs-lisp
  (setup tab-bar
    (define-key akirak/c-z-map "=" #'tab-bar-duplicate-tab)
    (define-key akirak/c-z-map "-" #'tab-bar-close-tab)

    (define-key tab-prefix-map "R"
                (defun akirak/tab-bar-rename-to-default ()
                  (interactive)
                  (if (and (featurep 'org-clock)
                           (org-clocking-p))
                      (tab-bar-rename-tab org-clock-heading)
                    (user-error "Not clocking")))))
#+end_src
*** tempo
:PROPERTIES:
:CREATED_TIME: [2022-08-09 Tue 23:30]
:END:

#+begin_src emacs-lisp
  (setup tempo
    (advice-add 'tempo-insert-prompt-compat
                :before
                (defun akirak/tempo-bind-tab (&rest _args)
                  (local-set-key [tab] #'akirak/tempo-forward-mark)))

    (defun akirak/tempo-forward-mark ()
      (interactive)
      (unless (tempo-forward-mark)
        (local-unset-key [tab]))))
#+end_src
*** terminal.c                                                  :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup terminal
    (:set ring-bell-function 'ignore))
#+end_src
*** thingatpt
:PROPERTIES:
:CREATED_TIME: [2023-01-05 Thu 23:59]
:END:

#+begin_src emacs-lisp
  (setup thingatpt
    (define-prefix-command 'akirak/thingatpt-map)
    (global-set-key (kbd "M-m") akirak/thingatpt-map)

    (defmacro akirak/thingatpt-def-region (thing)
      `(defun ,(intern (format "akirak/select-%s" thing)) ()
         (interactive)
         (pcase (bounds-of-thing-at-point ',thing)
           (`(,beg . ,end)
            (goto-char beg)
            (push-mark)
            (goto-char end)
            (activate-mark)))))

    (akirak/thingatpt-def-region sentence)
    (define-key akirak/thingatpt-map "s" #'akirak/select-sentence)
    (akirak/thingatpt-def-region paragraph)
    (define-key akirak/thingatpt-map "p" #'akirak/select-paragraph))
#+end_src
*** timer
:PROPERTIES:
:CREATED_TIME: [2023-08-05 Sat 09:16]
:END:

#+begin_src emacs-lisp
  (setup timer
    ;; Suspending may run after 5 minutes of idle, so the buffers should be saved
    ;; sooner than that.
    (run-with-idle-timer 240 nil
                         (defun akirak/save-all-buffers-non-interactively ()
                           (when (fboundp 'akirak-org-clock-snooze)
                             (akirak-org-clock-snooze 3))
                           (save-some-buffers 'force)))
    ;; Also run when the user explicitly leaves the computer.
    (add-hook 'akirak/system-leave-hook
              #'akirak/save-all-buffers-non-interactively
              50))
#+end_src
*** tooltip                                                     :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup tooltip
    (tooltip-mode -1))
#+end_src
*** tramp
:PROPERTIES:
:CREATED_TIME: [2023-04-21 Fri 15:30]
:END:

#+begin_src emacs-lisp
  (setup tramp
    (:when-loaded
      ;; Based on https://lonely.town/@jvillasante@hachyderm.io/110232974766557148
      (add-to-list 'backup-directory-alist
                   (cons tramp-file-name-regexp nil))))
#+end_src
*** transient
:PROPERTIES:
:CREATED_TIME: [2022-04-26 Tue 08:51]
:END:
#+begin_quote
Transient commands
#+end_quote

#+begin_src emacs-lisp
  (setup transient)
#+end_src

Because transient is developed by the maintainer of magit, it is better to update them together.
Thus I will explicitly install this package rather than using the built-in version.
*** treesit
:PROPERTIES:
:CREATED_TIME: [2022-12-21 Wed 23:59]
:END:

#+begin_src emacs-lisp
  (setup treesit)
#+end_src
*** vc-hooks                                                    :VC:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup vc-hooks
    (:set vc-follow-symlinks t
          vc-make-backup-files t))
#+end_src
*** view                                                :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup view
    (:set view-inhibit-help-message t)

    (:with-map view-mode-map
      ;; conflict with a binding in lispy-mode
      (:unbind "d")
      (:bind
       [remap scroll-up-command] #'View-scroll-half-page-forward
       [remap scroll-down-command] #'View-scroll-half-page-backward)))
#+end_src
*** warnings
:PROPERTIES:
:CREATED_TIME: [2023-12-01 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup warnings
    (:set warning-minimum-level :error))
#+end_src
*** which-func
:PROPERTIES:
:CREATED_TIME: [2022-09-09 Fri 12:28]
:END:

#+begin_src emacs-lisp
  (setup which-func
    ;; Some packages create a temporary buffer for building transient content. in
    ;; which a major mode is turned on. `which-function' can be slow even in such
    ;; a small content, so it should be turned off.
     (defun akirak/which-func-enable-if-file ()
       (when (buffer-file-name)
         (which-function-mode t)))
     (:with-function akirak/which-func-enable-if-file
       (:hook-into prog-mode-hook
                   conf-mode-hook)))
#+end_src
*** whitespace                                   :visual:formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup whitespace
    (:set whitespace-style
          '(face trailing missing-newline-at-eof tab-mark))
    (:hook-into prog-mode
                text-mode
                conf-mode
                sgml-mode)

    (:status theme
      (:set whitespace-trailing
            '(((t (:underline (:color "firebrick"
                                      :style wave
                                      :position nil))))))))
#+end_src
*** COMMENT windmove                                       :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 20:16]
:END:

#+begin_src emacs-lisp
  (setup windmove
    (:status opinionated
      (add-hook 'after-init-hook
                (defun akirak/setup-windmove ()
                  (windmove-default-keybindings 'control)))

      ;; extra keybindings
      ;; See also windswap
      (:global "C-c [" #'windmove-left
               "C-c ]" #'windmove-right)))
#+end_src
*** window                                              :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup window
    (:set recenter-positions '(top middle bottom))

    ;; Delay setting of `switch-to-buffer-obey-display-actions' so initial buffers
    ;; are displayed using `switch-to-buffer'.
    (defun akirak/after-frame-window-setup ()
      ;; Enable display-buffer-alist in many unsupported functions.
      (setq switch-to-buffer-obey-display-actions t))
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'akirak/after-frame-window-setup)
      (add-hook 'emacs-startup-hook #'akirak/after-frame-window-setup))

    (defun akirak/ad-no-obey-display-actions (orig &rest args)
      (let ((switch-to-buffer-obey-display-actions nil))
        (apply orig args)))
    (advice-add 'consult-buffer :around #'akirak/ad-no-obey-display-actions)
    (advice-add 'org-dog-find-file :around #'akirak/ad-no-obey-display-actions)
    (advice-add 'org-src-switch-to-buffer
                :override
                (defun akirak/org-src-switch-to-buffer (buffer context)
                  (unless (eq org-src-window-setup 'current-window)
                    (message "This function should be used only when
   `org-src-window-setup' is \='current-window, but it is %s"
                             org-src-window-setup))
                  (let ((switch-to-buffer-obey-display-actions nil))
                    (switch-to-buffer buffer))))

    (defun akirak/scroll-half-height (&optional window)
      (/ (1- (window-height (or window (selected-window)))) 2))

    ;; I use a normal keyboard, so it is hard to access cursor keys.
    (define-key ctl-x-map "9" #'previous-buffer)
    (:repeat ctl-x-map previous-buffer)

    (:global
     ;; TODO: scroll-other-window and scroll-other-window-down
     [remap scroll-up-command]
     (defun akirak/scroll-half-page-forward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-up arg)
         (scroll-up (akirak/scroll-half-height))))
     [remap scroll-down-command]
     (defun akirak/scroll-half-page-backward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-down arg)
         (scroll-down (akirak/scroll-half-height))))))
#+end_src
*** window.c
#+begin_src emacs-lisp
  (setup window
    (:set fast-but-imprecise-scrolling t))
#+end_src
*** winner                                         :history:windows:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup winner
    (:hook-into after-init-hook)
    (:when-loaded
      (cl-pushnew "*Calendar*" winner-boring-buffers))

    (:status opinionated
      (:global "<f7>" #'winner-undo
               "<S-f7>" #'winner-redo)))
#+end_src
*** woman
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:16]
:END:

#+begin_src emacs-lisp
  (setup woman
    (:global "<f1> M-m" #'woman))
#+end_src
*** word-wrap-mode
:PROPERTIES:
:CREATED_TIME: [2022-11-03 Thu 05:14]
:END:

#+begin_src emacs-lisp
  (setup word-wrap-mode
    (:with-mode word-wrap-whitespace-mode
      (:hook-into shr-mode)))
#+end_src
*** xdisp.c
:PROPERTIES:
:CREATED_TIME: [2022-01-09 Sun 23:22]
:END:

#+begin_src emacs-lisp
  (setup xdisp
    ;; I have never encountered a situation where I need to deal with R-L
    ;; direction so far
    (:set bidi-inhibit-bpa t
          bidi-display-reordering 'left-to-right
          bidi-paragraph-direction 'left-to-right))
#+end_src
** Typography settings                                       :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.


**** modus-themes
:PROPERTIES:
:CREATED_TIME: [2022-09-20 Tue 20:43]
:END:
#+begin_quote
Elegant, highly legible and customizable themes
[[https://git.sr.ht/~protesilaos/modus-themes]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package modus-themes)
    ;; See [[info:modus-themes#Override colors]]
    ;; and [[info:modus-themes#Customization Options]]
    (:set modus-operandi-palette-overrides
          '((bg-main "#e1d9c2")
            (fg-main "#333333")
            (bg-heading-1 bg-dim)
            (overline-heading-2 border))

          modus-themes-bold-constructs nil
          modus-themes-italic-constructs t
          modus-themes-paren-match '(bold intence)
          modus-themes-org-blocks 'gray-background
          modus-themes-disable-other-themes t

          modus-themes-links '(neutral-underline)

          modus-themes-headings
          '((1 . (medium variable-pitch 1.5))
            (2 . (rainbow variable-pitch 1.1))
            (4 . (variable-pitch))))

    (when (or window-system
              (daemonp))
      (require 'modus-themes)
      (load-theme 'modus-operandi :no-confirm)))
#+end_src
*** Font families
You need to install the fonts separately.

#+begin_src emacs-lisp
  (defun akirak/enable-fonts (&optional value skip-check)
    (let ((families (font-family-list))
          (value (or value akirak/font-family-alist)))
      (pcase-dolist (`(,face ,family . ,plist) value)
        (if (or (member family families)
                skip-check)
            (if-let (fontset (plist-get plist :fontset))
                (set-fontset-font fontset face family nil
                                  (plist-get plist :add))
              (set-face-attribute face nil :family family))
          (message "Font family %s is not installed" family)
          ;; (delq (assq face value) value)
          ;; (set symbol value)
          ))))

  (defcustom akirak/font-family-alist
    '((default "Cascadia Code")
      (fixed-pitch "Cascadia Code")
      (variable-pitch "Inter")
      (kana "Source Han Sans HC" :fontset t)
      (han "Source Han Sans HC" :fontset t)
      (emoji "Noto Color Emoji" :fontset t :add prepend)
      (symbol "Symbola" :fontset t :add append))
    "Alist of font families for faces."
    :type '(repeat (list symbol
                         string
                         (plist :inline t
                                :options
                                (((const :fontset)
                                  (choice (const :tag "Default" t)
                                          (string :tag "Name of a fontset")))))))
    :set (lambda (symbol value)
           (set symbol value)
           (when (or window-system
                     (daemonp))
             (akirak/enable-fonts value (daemonp)))))

  (when (daemonp)
    (add-hook 'server-after-make-frame-hook
              (defun akirak/server-set-fonts ()
                (akirak/enable-fonts nil t)
                (remove-hook 'server-after-make-frame-hook #'akirak/server-set-fonts))))

  (eval-after-load 'outline
    (defun akirak/set-outline-families ()
      (when-let (family (cadr (assq 'variable-pitch akirak/font-family-alist)))
        (dolist (x '(outline-1
                     outline-2
                     outline-3
                     outline-4
                     outline-5
                     outline-6
                     outline-7
                     outline-8))
          (set-face-attribute x nil :family family)))))

  (eval-after-load 'org
    (defun akirak/set-org-faces ()
      (set-face-attribute 'org-tag nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-todo nil :inherit 'fixed-pitch)))
#+end_src
*** Font size and line spacing
Override font heights for certain faces.

I think it would be better to create my own theme, but I don't have enough time for it.

#+begin_src emacs-lisp
  (defcustom akirak/font-height 107
    "Default height of the font."
    :group 'akirak
    :type 'integer
    :set (lambda (sym value)
           (set sym value)
           (set-face-attribute 'default nil :height value)))

  ;; In Emacs 29.1, the default height of `variable-pitch-text' is 1.1, but it
  ;; should be the same as other text, especially in a mixed pitch environment.
  (set-face-attribute 'variable-pitch-text nil :height 1.0)

  ;; (eval-after-load 'outline
  ;;   (defun akirak/apply-outline-font-heights ()
  ;;     (set-face-attribute 'outline-1 nil :height 1.54)
  ;;     (set-face-attribute 'outline-2 nil :height 1.41)
  ;;     (set-face-attribute 'outline-3 nil :height 1.3)
  ;;     (set-face-attribute 'outline-4 nil :height 1.19)
  ;;     (set-face-attribute 'outline-5 nil :height 1.1)
  ;;     (set-face-attribute 'outline-6 nil :height 1.07)
  ;;     (set-face-attribute 'outline-7 nil :height 1.03)
  ;;     (set-face-attribute 'outline-8 nil :height 1.0)))

  (eval-after-load 'shr
    (defun akirak/apply-shr-font-heights ()
      (set-face-attribute 'shr-text nil :height 1.15)
      (set-face-attribute 'shr-h1 nil :height 1.54)
      (set-face-attribute 'shr-h2 nil :height 1.45)
      (set-face-attribute 'shr-h3 nil :height 1.4)
      (set-face-attribute 'shr-h4 nil :height 1.33)
      (set-face-attribute 'shr-h5 nil :height 1.2)
      (set-face-attribute 'shr-h6 nil :height 1.2)))

  (eval-after-load 'org
    (defun akirak/apply-org-font-heights ()
      (set-face-attribute 'org-tag nil :height (ceiling (* 1.05 akirak/font-height)))))
#+end_src
*** Other outline styles (e.g. colors)
#+begin_src emacs-lisp
  (with-eval-after-load 'shr
    ;; Inherit styles from org headings.
    ;; The result is dependent on the theme.
    (pcase-dolist (`(,face . ,parent)
                   '((shr-h1 . org-level-1)
                     (shr-h2 . org-level-2)
                     (shr-h3 . org-level-3)
                     (shr-h4 . org-level-4)
                     (shr-h5 . org-level-5)
                     (shr-h6 . org-level-6)))
      (set-face-attribute face nil :inherit parent)))
#+end_src
*** Width and wrap
#+begin_src emacs-lisp
  (setq akirak/default-body-width 86)
#+end_src
** Org                                                     :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
Embrace Org as a common document format for Emacs.

These variables need to be set in prior to any package settings related to org:

#+begin_src emacs-lisp
  (setq org-modules
        '(org-id
          org-clock
          org-crypt
          ;; Built-in link types I need
          ol-info
          ol-eww))
#+end_src
*** COMMENT citar                                         :bibliography:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-23 Wed 23:59]
:END:
#+begin_quote
Citation-related commands for org, latex, markdown
#+end_quote

#+begin_src emacs-lisp
(setup (:package citar))
#+end_src
*** doct                                                   :capture:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:08]
:END:
#+begin_quote
DOCT: Declarative Org capture templates
[[https://github.com/progfolio/doct]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package doct))
#+end_src
*** oahu
:PROPERTIES:
:CREATED_TIME: [2022-10-20 Thu 11:21]
:END:
#+begin_quote
Manage Org searches
[[https://git.sr.ht/~akirak/oahu.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package oahu)
    (:status personal
      (define-key akirak/c-z-map (kbd "SPC") #'oahu-view)
      (define-key ctl-x-map "g"
                  (defun akirak-oahu-goto-context (&optional view)
                    (interactive)
                    (require 'oahu)
                    (pcase (or view oahu-last-view)
                      (`(Project ,pr . ,_)
                       (akirak-project-switch (project-root pr)))
                      (`(Org ,x . ,_)
                       (when-let* ((file (seq-find #'stringp x))
                                   (file (org-dog-resolve-relative-file file)))
                         (find-file file)))
                      (`(OrgBookmark . ,bookmark)
                       (org-placeholder-view bookmark)))))
      (:global "<menu>" #'oahu-view
               "<S-menu>" #'oahu-alternative-view
               "<C-menu>" #'oahu-view-global)))
#+end_src
**** oahu-memento
:PROPERTIES:
:CREATED_TIME: [2022-10-20 Thu 12:06]
:ID:       d270ae25-077a-400f-a7a9-fee07ade34fd
:END:
#+begin_quote
Org-Memento integration for oahu
[[https://git.sr.ht/~akirak/oahu.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package oahu-memento)
    (:status personal
      (:set org-memento-agenda-files (lambda ()
                                       (require 'oahu-memento)
                                       (when-let (context (oahu-memento-context))
                                         (apply #'oahu-org-files context))))

      (add-hook 'org-memento-block-before-exit-hook #'oahu-memento-save)
      (add-hook 'org-memento-block-exit-hook
                (lambda () (setq oahu-last-view nil)))
      (add-hook 'org-memento-block-start-hook #'oahu-memento-load)

      (:with-feature org-memento-timeline
        (:with-map org-memento-timeline-mode-map
          (:bind "v" #'oahu-memento-group-view)))
      (:with-feature org-memento-zone
        (:with-map org-memento-zone-mode-map
          (:bind "v" #'oahu-memento-group-view)))))
#+end_src
*** ob-graphql
:PROPERTIES:
:CREATED_TIME: [2023-05-06 Sat 13:57]
:END:
#+begin_quote
Org-Babel execution backend for GraphQL source blocks
[[https://github.com/jdormit/ob-graphql]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ob-graphql)
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(graphql . t))))
#+end_src
*** ob-mermaid
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 13:53]
:END:
#+begin_quote
org-babel support for mermaid evaluation
[[https://github.com/arnm/ob-mermaid]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package ob-mermaid))
#+end_src
*** ob-restclient
:PROPERTIES:
:CREATED_TIME: [2022-06-14 Tue 18:27]
:END:
#+begin_quote
org-babel functions for restclient-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ob-restclient)
    (with-eval-after-load 'org
      (add-to-list 'org-babel-load-languages '(restclient . t))))
#+end_src
*** org
#+begin_quote
Outline-based notes management and organizer
[[https://orgmode.org]]
#+end_quote

#+begin_src emacs-lisp
  (setup org
    (:with-mode org-mode
      (:set org-log-done 'time
            org-log-into-drawer t
            org-startup-folded 'content
            ;; If necessary, set up startup indent in individual files
            org-startup-indented nil
            org-startup-truncated nil
            org-enforce-todo-dependencies t
            org-use-speed-commands t
            ;; Enlarge for olivetti-mode
            org-tags-column -80
            org-track-ordered-property-with-tag t
            org-extend-today-until 6
            ;; Consider org-extend-today-until in org-reverse-datetree
            org-use-effective-time t
            ;; Use the last clocked time in org-todo
            org-use-last-clock-out-time-as-effective-time t
            ;; https://yiufung.net/post/org-mode-hidden-gems-pt1/
            org-cycle-separator-lines 0
            org-blank-before-new-entry '((heading . nil)
                                         (plain-list-item . auto))
            org-imenu-depth 6
            ;; Prevent an annoying behaviour probably due to org's bug.
            org-link-search-must-match-exact-headline t
            org-catch-invisible-edits 'show-and-error
            ;; Prevent from saving org-refile and org-capture locations to bookmarks
            org-bookmark-names-plist nil)

      (:when-loaded
        (when (require 'akirak-org nil t)
          (:hook #'akirak-org-protected-mode)))

      (:global "C-c o" #'org-open-at-point-global)

      (defvar akirak/org-file-apps-set-from-mime nil)
      (advice-add 'org-open-file
                  :before
                  (defun akirak/ad-org-open-file-set-apps (&rest _)
                    (unless akirak/org-file-apps-set-from-mime
                      (akirak-mime-update-org-file-apps)
                      (setq akirak/org-file-apps-set-from-mime t))))

      (:when-loaded
        (:status personal
          (when (require 'akirak-org-config nil t)
            (akirak-org-config-setup)
            (run-with-idle-timer 240 nil #'akirak-org-scan-type-tags)))

        (add-to-list 'org-file-apps '(t . mailcap) t)

        (add-to-list 'display-buffer-alist
                     '("\\*Org Select\\*"
                       (display-buffer-in-side-window
                        '((side . bottom))))
                     t)
        (setq org-structure-template-alist
              (seq-sort-by #'car #'string-collate-lessp
                           (cl-remove-duplicates
                            (append '(("d" . "definition")
                                      ("p" . "prompt")
                                      ;; Override CENTER block
                                      ("c" . "toc")
                                      ("t" . "takeaway"))
                                    org-structure-template-alist)
                            :key #'car
                            ;; Needed to override existing bindings
                            :from-end t
                            :test #'equal))))))
#+end_src
**** Completion
#+begin_src emacs-lisp
  (setup org-mode
    ;; When `org-tag-persistent-alist' is non-nil,
    ;; `org-current-tag-alist' is set, and tags from
    ;; `org-get-buffer-tags' are unavailable in completion.
    ;;
    ;; To provide non-persistent tags, enable this option to
    ;; feed tags from all agenda files.
    ;;
    ;; This will be safe, since I use categories instead of
    ;; tags to identify work projects.
    (:set org-complete-tags-always-offer-all-agenda-tags t)

    ;; https://emacs.stackexchange.com/questions/21171/company-mode-completion-for-org-keywords
    (:hook (defun akirak-org-add-completion-at-point ()
             (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point
                       nil t))))
#+end_src
**** Display settings
#+begin_src emacs-lisp
  (setup org
    ;; Based on https://lepisma.xyz/2017/10/28/ricing-org-mode/
    (:set org-ellipsis " ⌄ "
          org-pretty-entities t
          org-hide-emphasis-markers nil
          org-hide-leading-stars nil
          org-fontify-whole-heading-line t
          org-fontify-done-headline nil
          org-fontify-quote-and-verse-blocks t)

    (:when-loaded
      ;; This evaluation is a bit slow, so defer it to the library load time.
      org-image-actual-width (ignore-errors
                               (* 80 (/ (frame-text-width)
                                        (frame-width))))))
#+end_src
**** Keybindings
#+begin_src emacs-lisp
  (setup org
    (:with-mode org-mode
      (:status opinionated
        (:set org-special-ctrl-a/e t
              org-M-RET-may-split-line nil)

        (:when-loaded
          (when (require 'akirak-org nil t)
            (:hook #'akirak-org-eldoc-setup)))

        (:global "M-g h" #'akirak-org-avy-heading)

        (:unbind "C-'"
                 ;; I don't use any of these bindings and want to use them for other purposes
                 "C-c ["
                 "C-c ]"
                 ;; C-c C-x u is bound to org-metaup, but I use another binding
                 ;; (currently M-P) for the command.
                 "C-c C-x u")
        (:bind akirak/mode-prefix-key (lookup-key org-mode-map (kbd "C-c C-x"))
               "<" #'akirak-org-angle-open
               "[" #'akirak-org-square-open
               "*" #'akirak-org-bold
               "/" #'akirak-org-italic
               "_" #'akirak-org-underlined
               "=" #'akirak-org-verbatim
               "`" #'akirak-org-inline-code
               "~" #'akirak-org-code
               "+" #'akirak-org-strike-through
               "C-c b" #'akirak-org-select-region-dwim
               "C-c C-x h" #'org-edit-headline
               "C-c C-x t" #'akirak-org-table-create-or-edit
               "C-c C-x y" #'akirak-org-yank-into-new-block
               "C-c C-x ' c" #'akirak-org-avy-clone-subtree
               "C-c C-x ' r" #'avy-org-refile-as-child
               "C-c C-x C-w" #'org-cut-subtree
               ;; Overrides the default binding to org-next-link, but I will drop
               ;; it in favor of link-hint
               "C-c C-x C-p" #'akirak-org-copy-property-value
               "C-c C-x u r" #'org-update-radio-target-regexp
               "C-c C-x u _" #'akirak-org-auto-decorate-words
               "M-s o" #'org-pivot-search-from-files
               ;; M-up/down/left/right is unavailable on Chromebooks, so I need
               ;; alternative bindings for commands bound on those keys.
               "M-N" #'org-metadown
               "M-P" #'org-metaup
               "M-H" #'org-shiftmetaleft
               "M-L" #'org-shiftmetaright
               "M-g a" #'akirak-org-goto-beginnning-of-content
               "M-g e" #'akirak-org-goto-before-next-heading
               "C-M-u" (defun akirak/org-up-element ()
                         (interactive)
                         (if (org-match-line org-heading-regexp)
                             (progn
                               (org-up-element)
                               (org-fold-show-entry))
                           (require 'org-element)
                           (let ((context (org-element-context)))
                             (while (= (point) (org-element-property :begin context))
                               (setq context (org-element-property :parent context)))
                             (goto-char (org-element-property :begin context))
                             (org-show-context)))))

        (:with-map org-read-date-minibuffer-local-map
          (:bind "C-p" (defun akirak/org-calendar-previous-week ()
                         (interactive)
                         (org-eval-in-calendar '(calendar-forward-week -1)))
                 "C-n" (defun akirak/org-calendar-next-week ()
                         (interactive)
                         (org-eval-in-calendar '(calendar-forward-week 1)))
                 "<tab>" (defun akirak/org-calendar-next-day ()
                           (interactive)
                           (org-eval-in-calendar '(calendar-forward-day 1)))
                 "<S-iso-lefttab>" (defun akirak/org-calendar-previous-day ()
                                     (interactive)
                                     (org-eval-in-calendar '(calendar-forward-day -1))))))))
#+end_src
**** org-agenda
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:12]
:END:

#+begin_src emacs-lisp
  (setup org-agenda
    (:set org-agenda-start-with-clockreport-mode nil
          org-agenda-remove-tags nil
          org-agenda-use-tag-inheritance t
          org-agenda-sticky nil
          org-agenda-restore-windows-after-quit t
          org-agenda-window-setup 'current-window)
    (:status personal
      (:set org-agenda-start-on-weekday 1))
    (:local-set truncate-lines t)
    ;; It is confusing to have `delete-other-windows' bound to o.
    (:unbind "o")
    (:bind "C-c ." #'akirak-org-edit-active-ts)

    ;; Keybinding compatibility with org-mode.
    (defvar akirak/org-agenda-prefix-map (make-sparse-keymap))
    (with-eval-after-load 'org-agenda
      (define-key org-agenda-mode-map (kbd akirak/mode-prefix-key)
                  akirak/org-agenda-prefix-map))

    (defmacro akirak/org-agenda-wrap-orig-command (org-command)
      `(defun ,(intern (format "akirak/%s-from-agenda" org-command)) ()
         (interactive)
         (org-agenda-with-point-at-orig-entry (buffer-substring (pos-bol) (pos-eol))
           (call-interactively ',org-command))))

    (:with-map akirak/org-agenda-prefix-map
      (:bind "r" #'octopus-refile
             "S" (akirak/org-agenda-wrap-orig-command
                  org-super-links-store-link)
             "C" (defun akirak/org-agenda-make-check-list ()
                   (interactive)
                   (let (result)
                     (save-excursion
                       (while (text-property-search-forward 'org-agenda-structural-header)
                         (push (string-trim (buffer-substring-no-properties
                                             (pos-bol) (pos-eol)))
                               result)))
                     (kill-new (mapconcat (lambda (s)
                                            (concat "- [ ] " s))
                                          (nreverse result)
                                          "\n"))
                     (message "Stored a check list to the kill ring")))))

    (define-key help-map (kbd "M-a")
                (defun akirak/org-default-agenda ()
                  (interactive)
                  (unless (bound-and-true-p org-clock-history)
                    (akirak-org-clock-add-agenda-files 7))
                  (let ((org-agenda-custom-commands
                         `(("a" "The agenda"
                            ((agenda)
                             ,(org-memento-make-agenda-block))))))
                    (org-agenda nil "a")))))
#+end_src
**** org-babel (ob)
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:37]
:END:

#+begin_src emacs-lisp
  (setup ob
    (:set org-confirm-babel-evaluate nil
          org-babel-load-languages
          '((shell . t)
            (emacs-lisp . t)
            (sqlite . t)
            (sql . t)))

    ;; By default, org-babel can't execute source block in an indirect buffer,
    ;; which I find frustrating. This function advice enables that.
    (advice-add 'org-babel-result-to-file
                :around
                (defun akirak/ad-around-org-babel-result-to-file (orig &rest args)
                  (let ((point (point)))
                    (with-current-buffer (org-base-buffer (current-buffer))
                      (save-excursion
                        (goto-char point)
                        (apply orig args)))))))
#+end_src
**** org-capture
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:

#+begin_src emacs-lisp
  (setup org-capture
    ;; org-capture adds an item after a note in the logbook. This is likely to be
    ;; a bug, but I will work around it for now.
    (advice-add 'org-capture-place-item
                :before
                (defun akirak/ad-before-org-capture-place-item (&rest _)
                  (org-end-of-meta-data t)
                  (when (and (looking-at-p org-heading-regexp)
                             (re-search-backward (rx anything "\n") nil t))
                    (beginning-of-line 2))))

    (add-hook 'org-capture-prepare-finalize-hook
              (defun akirak/org-capture-maybe-fill-headline ()
                "Edit the headline if it is missing."
                (unless (eq this-command 'org-capture-kill)
                  (goto-char (point-min))
                  (let ((headline (org-get-heading t t t t)))
                    (when (string-empty-p headline)
                      (org-edit-headline))))))

    (add-hook 'org-capture-prepare-finalize-hook #'akirak-org-capture-push-history))
#+end_src
**** org-clock
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:13]
:END:

#+begin_src emacs-lisp
  (setup org-clock
    (:set org-clock-history-length 50
          org-clock-goto-may-find-recent-task nil
          org-clock-mode-line-total 'today
          org-clock-out-remove-zero-time-clocks t
          org-clock-in-resume t

          org-clock-persist t
          ;; I may simply close Emacs to leave the work
          org-clock-persist-query-save t
          org-clock-persist-query-resume nil
          org-clock-auto-clockout-timer (* 15 60)
          ;; Don't ask about exiting but about saving
          org-clock-ask-before-exiting nil

          ;; I use mini-modeline extensively
          org-clock-clocked-in-display 'both
          org-clock-string-limit 0
          ;; org-clock-string-limit 40 ; mini-modeline

          ;; Use `org-clock-display' to track time on projects weekly or monthly
          org-clock-display-default-range 'thisweek

          org-clock-heading-function
          (defun akirak/org-clock-mode-line-heading ()
            (concat (file-name-base (buffer-name)) ": "
                    (org-link-display-format
                     (org-no-properties (org-get-heading t t t t)))))

          org-clocktable-defaults
          (list :fileskip0 t :stepskip0 t :tcolumns 1
                ;; Remaining arguments are the same as defaults
                :maxlevel 2 :lang "en" :scope 'file :block nil
                :wstart 1 :mstart 1 :tstart nil :tend nil :step nil
                :tags nil :match nil :emphasize nil :link nil
                :narrow '40! :indent t :filetitle nil :hidefiles nil
                :formula nil :timestamp nil :level nil
                :formatter nil))

    (add-hook 'akirak/system-leave-hook
              (defun akirak/org-clock-out-maybe ()
                (when (org-clocking-p)
                  (org-clock-out)))
              10)

    (defcustom akirak-org-clock-allow-in-buffer nil
      "Whether to allow `org-clock-in' in the current buffer.

  Set this variable to t locally if you want to enable `org-clock-in'."
      :type 'boolean
      :local t)

    (advice-add 'org-clock-in :before #'akirak/block-org-clock-in)
    (defun akirak/block-org-clock-in (&rest _args)
      "An advice to block unindesirable `org-clock-in'."
      (when (and (memq this-command '(org-clock-in
                                      org-agenda-clock-in))
                 (require 'org-dog-core nil t)
                 (not (bound-and-true-p akirak-org-clock-allow-in-buffer)))
        (if-let* ((filename (buffer-file-name (org-base-buffer (current-buffer))))
                  (filename (thread-last
                              filename
                              (abbreviate-file-name)
                              (expand-file-name))))
            ;; Skip unconditionally if org-dog is unavailable
            (when (or (not (string-match-p org-dog--root-regexp filename))
                      (and (bound-and-true-p org-memento-file)
                           (equal filename (expand-file-name org-memento-file))))
              (user-error "You cannot clock in to this file"))
          (user-error "You cannot clock in to a heading without a file")))))
#+end_src
**** org-element
#+begin_src emacs-lisp
  (setup org-element
    ;; Disable the cache entirely. Note that this variable is not a custom
    ;; variable.
    (:set org-element-cache-persistent nil))
#+end_src
**** org-habit
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:15]
:END:

#+begin_src emacs-lisp
  (setup org-habit
    (:set org-habit-following-days 7
          org-habit-graph-column 55
          org-habit-preceding-days 14
          org-habit-scheduled-past-days 7
          org-habit-show-done-always-green t))
#+end_src
**** org-id
#+begin_src emacs-lisp
  (setup org-id
    (:set org-id-link-to-org-use-id t))
#+end_src
**** org-link (ol)
#+begin_src emacs-lisp
  (setup ol
    ;; Workaround for a bug of missing autoload
    (autoload 'org-bibtex-store-link "ol-bibtex")

    (:status opinionated
      (:global "C-c l" #'org-store-link)
      (with-eval-after-load 'org-agenda
        (define-key org-agenda-mode-map
                    (kbd "C-c l")
                    (defun akirak/org-agenda-store-link-to-entry ()
                      (interactive)
                      (org-agenda-with-point-at-orig-entry
                          (thing-at-point 'line)
                        (org-store-link nil 'interactive)))))))
#+end_src
**** org-refile
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:15]
:END:

#+begin_src emacs-lisp
  (setup org-refile
    (:set org-log-refile nil
          org-refile-targets '((nil :maxlevel . 99)
                               (org-agenda-files :maxlevel . 99))
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-use-outline-path 'file))
#+end_src
**** org-src
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 22:16]
:END:

#+begin_src emacs-lisp
  (setup org-src
    (:set org-src-tab-acts-natively t
          org-src-window-setup 'current-window))
#+end_src
**** Tags
#+begin_src emacs-lisp
  (setup org-tags
    (:set org-group-tags t
          org-tags-exclude-from-inheritance '("ORDERED" "crypt")))
#+end_src
*** orgabilize
:PROPERTIES:
:CREATED_TIME: [2022-04-15 Fri 23:59]
:END:
#+begin_quote
Converts web pages into Org
[[https://github.com/akirak/orgabilize.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package orgabilize)
    (:nixpkgs "readability-cli")
    (add-hook 'org-ctrl-c-ctrl-c-hook #'orgabilize-update-link-title)
    ;; (with-eval-after-load 'embark
    ;;   (define-key embark-url-map (kbd "r")
    ;;               (defun akirak/embark-archive-url-to-org (url)
    ;;                 (interactive "s")
    ;;                 (orgabilize-org-archive url))))
    (:embark embark-url-map "s"
      ("r" orgabilize-org-archive akirak/embark-url-archive-org))
    (:when-loaded
      (setq orgabilize-title-escape-alist
            (append (eval (car (get 'orgabilize-title-escape-alist 'standard-value)))
                    '(("[｜│|][^z-a]+[｜│|]" . "│")
                      ("([^z-a]+)" . "")
                      ("^[^。]+。" . "")
                      ("|" . "│")
                      ("[【】]" . ""))))))
#+end_src
*** org-autolist
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:26]
:END:
#+begin_quote
Improved list management in org-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-autolist)
    (:hook-into org-mode-hook)
    (:when-loaded
      ;; Inside a block, org-autolist splits the block instead of adding a new
      ;; item. This advice is a workaround for the issue.
      (advice-add 'org-meta-return
                  :around
                  (defun akirak/org-autolist-ad-around-org-meta-return (orig &rest args)
                    (if (and (eq this-command 'org-return)
                             (org-at-item-p)
                             (eolp))
                        (org-insert-item)
                      (apply orig args))))))
#+end_src
*** org-bb
:PROPERTIES:
:CREATED_TIME: [2022-04-13 Wed 23:59]
:END:
#+begin_quote
Defining todo blockers in a block
[[https://github.com/akirak/org-blockers-block]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-bb)
    (with-eval-after-load 'org
      (org-bb-mode t)))
#+end_src
*** org-bookmark-heading
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:26]
:END:
#+begin_quote
Emacs bookmark support for Org mode
[[http://github.com/alphapapa/org-bookmark-heading]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-bookmark-heading)
    (:set org-bookmark-heading-make-ids t)
    ;; Ensure the library is used when creating a bookmark
    (add-to-list 'org-modules 'org-bookmark-heading))
#+end_src
*** org-crypt
:PROPERTIES:
:CREATED_TIME: [2023-03-17 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup org-crypt
    (defun akirak/setup-org-crypt ()
      (setq-local buffer-auto-save-file-name nil)
      (add-hook 'before-save-hook #'org-encrypt-entries nil t)))
#+end_src
*** org-dog
:PROPERTIES:
:CREATED_TIME: [2022-03-03 Thu 16:26]
:END:
#+begin_quote
A programmable workflow layer for Org mode
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog)
    (with-eval-after-load 'org-id
      (org-dog-id-mode t))
    (add-hook 'org-mode-hook #'org-dog-file-mode-maybe)

    (:set org-dog-context-path-patterns
          `(("^\\.github/" . "services/github.com")
            ("\\.h?eex\\'" . "programming/elixir")
            ("package\\.yaml\\'" . "programming/haskell")
            ("tsconfig\\." . "programming/typescript")
            ("\\.envrc\\'" . "programming/envrc")
            ("dune\\(?:-[^/]+\\)?\\'" . "programming/ocaml")
            ("hie\\.yaml\\'" . "programming/haskell")
            ("\\.editorconfig\\'" . "programming/editorconfig"))
          org-dog-clock-in-fallback-fn #'akirak-capture-clock-in
          org-dog-clock-default-query-filter
          (lambda (query)
            (concat "!tags:ARCHIVE " query)))

    (add-to-list 'recentf-exclude
                 (defun akirak/org-dog-recentf-p (file)
                   (when (featurep 'org-dog)
                     (string-match-p (concat (regexp-opt (mapcar #'car org-dog-repository-alist)
                                                         :paren)
                                             "[^z-a]+\\.org$")
                                     file))))

    (defun akirak/org-dog-turn-on-transclusion ()
      (org-transclusion-mode t))
    (add-hook 'org-dog-find-file-hook #'akirak/org-dog-turn-on-transclusion)
    (add-hook 'org-dog-before-search-hook #'akirak/org-dog-turn-on-transclusion)

    (add-hook 'org-dog-file-mode-hook #'org-dog-header-line-enable)

    (add-hook 'org-dog-file-registration-hook
              (defun akirak/org-dog-add-agenda-file (file-obj)
                (when (string-match-p (rx bol
                                          (or "meta"
                                              (and "personal/" (+ (not (any "/"))) eol)
                                              "employment/"
                                              "errands"))
                                      (oref file-obj relative))
                  (add-to-list 'org-agenda-files (oref file-obj absolute)))))

    ;; Add all file tags in the registered files to the persistent tag alist.
    ;; This is important for the propagation feature of org-dog-datetree.el.
    (add-hook 'org-dog-file-registration-hook
              (defun akirak/org-dog-add-file-tags (file-obj)
                (org-dog-with-file-header (oref file-obj absolute)
                  (dolist (tag org-file-tags)
                    (unless (assoc tag org-tag-persistent-alist)
                      (setq org-tag-persistent-alist
                            (append org-tag-persistent-alist
                                    (list (list (substring-no-properties tag))))))))))

    (add-hook 'org-dog-reload-hook
              (defun akirak/org-dog-add-extra-agenda-files ()
                (require 'org-dog-overview)
                (setq org-agenda-files
                      (thread-last
                        (org-dog-overview-scan org-agenda-files :fast t)
                        (mapcar #'car)
                        (reverse)))
                (when (bound-and-true-p org-memento-file)
                  (add-to-list 'org-agenda-files org-memento-file t))))

    (add-hook 'org-dog-clock-in-hook
              (defun akirak/org-dog-clock-in-push ()
                (akirak-org-clock-push org-dog-clock-last-marker)))

    (:status personal
      (add-hook 'org-dog-clock-in-success-hook
                #'akirak-org-clock-add-git-properties-if-none))

    (:when-loaded
      (:also-load org-dog-embark
                  org-dog-facade))

    (add-to-list 'display-buffer-alist
                 '("*Org Dog Tablist Files*"
                   (display-buffer-in-tab)))

    (with-eval-after-load 'org-dog-overview
      (define-key org-dog-overview-mode-map
                  (kbd "+") #'org-dog-add-header-link))

    (:status personal
      (:auto-insert
       (("\\.org\\'" . "Org Dog files")
        . akirak/org-dog-auto-insert))
      (with-eval-after-load "autoinsert"
        (add-to-list 'auto-insert-alist
                     `
                     t))

      (defun akirak/org-dog-auto-insert ()
        (when-let (obj (org-dog-buffer-object))
          (cl-typecase obj
            (org-dog-facade-datetree-file
             (skeleton-insert
              `(> "#+title: " _
                  n "#+REVERSE_DATETREE_USE_WEEK_TREE: nil"
                  n "#+REVERSE_DATETREE_DATE_FORMAT: %Y-%m-%d %A"
                  n "#+REVERSE_DATETREE_MONTH_FORMAT: %Y-%m"
                  n "#+REVERSE_DATETREE_YEAR_FORMAT: %Y"
                  n
                  n "* Backlog"
                  n "* " (format-time-string "%Y")
                  n "* Activities"
                  ,@(when (string-prefix-p "programming/" (oref obj relative))
                      '(n "* Libraries"))
                  n "* Index"
                  n "* Resources"))))))

      (when (daemonp)
        (:defer 1
                (defun akirak/org-dog-load-on-startup ()
                  ;; I don't want to hide the init time in the echo area.
                  (let ((inhibit-message t))
                    (require 'org-dog)
                    (org-dog-reload-files t)
                    (akirak-org-clock-rebuild-history)
                    (when (fboundp 'akirak/dashboard-init-on-startup)
                      (akirak/dashboard-init-on-startup))))))))
#+end_src
**** consult-org-dog
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 20:33]
:END:
#+begin_quote
 
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-org-dog)
    (:global "M-g M-/" #'consult-org-dog)
    (:set consult-org-dog-tag-super-groups
          '(("@epic"
             (:todo "DONE")
             (:todo "UNDERWAY")
             (:auto-category t)))))
#+end_src
**** octopus
:PROPERTIES:
:CREATED_TIME: [2022-08-21 Sun 16:36]
:END:
#+begin_quote
Transient commands for Org Dog
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package octopus)
    (:global "M-g M-o" #'octopus-find-file
             "M-s M-o" #'octopus-find-node)

    (define-key akirak/c-z-map "I" #'octopus-clock-in)
    (define-key akirak/c-z-map "C-i" #'octopus-clock-in)

    (:set octopus-find-node-verbs
          '((?f "Display a node" nil org-pivot-search-from-files)
            (?v "Display a search view" nil akirak-org-ql-search-files)
            (?o "Open a heading link" nil akirak-org-ql-open-link)
            (?i "Insert a target" nil org-nlink-insert-plain))
          octopus-super-link-drawer-list '("BLOCKING")
          octopus-category-max-entries 4)

    (:with-feature org
      (:when-loaded
        (:with-map org-mode-map
          (:bind "C-c C-x l" #'octopus-insert-link)
          (:bind "C-c C-x r" #'octopus-refile))))

    (:with-feature org-agenda
      (:when-loaded
        (:with-map org-agenda-mode-map
          (:bind [remap org-agenda-refile] #'octopus-refile))))

    (:when-loaded
      (transient-append-suffix #'octopus-find-node
        'octopus-clocked-file-suffix
        '("b" "Placeholder" org-placeholder-find-or-create))

      (transient-append-suffix #'octopus-clock-in
        'octopus-read-dog-file-suffix
        '("." "Project" akirak-org-clock-in-to-project))))
#+end_src
**** org-dog-context
#+begin_src elisp
  (setup org-dog-context
    (:status personal
      (:when-loaded
        (org-dog-context-set-alist 'project
          :callback #'akirak-org-dog-project-context))))
#+end_src
**** org-dog-embark
:PROPERTIES:
:CREATED_TIME: [2022-03-03 Thu 16:26]
:END:
#+begin_quote
An example embark configuration for org-dog
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-embark)
    (:with-map org-dog-embark-file-map
      (:bind "v" (defun akirak/oahu-view-org-file (file)
                   (interactive "sFile: ")
                   (oahu-view 'Org (list file))))))
#+end_src
**** org-dog-export
#+begin_quote
Export Org contents to various formats
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-export))
#+end_src
**** org-dog-facade
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 20:33]
:END:
#+begin_quote
Facade Org files
[[https://github.com/akirak/org-dog]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-dog-facade)
    (add-hook 'org-capture-prepare-finalize-hook
              #'akirak/org-dog-datetree-propagate)
    (:set org-dog-datetree-propagate-on-refile t
          org-dog-datetree-generate-id-on-refile t
          org-dog-datetree-tag-predicate
          (defun akirak/org-dog-datetree-tag-propagated-p (tag)
            (string-match-p (rx bol (or "@tldr"
                                        (not (any "@"))))
                            tag)))

    (defun akirak/org-dog-datetree-propagate ()
      (require 'org-reverse-datetree)
      (require 'org-dog-datetree)
      (when (org-reverse-datetree-guess-date)
        (org-dog-datetree-propagate-by-tag nil :local t))))
#+end_src
**** org-dog-root
#+begin_src emacs-lisp
  (setup org-dog-root
    (:when-loaded
      (add-hook 'mode-line-misc-info org-dog-root-mode-item)))
#+end_src
*** COMMENT org-dynamic-bullets                 :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-dynamic-bullets)
    (:hook-into org-mode-hook))
#+end_src
*** org-epubinfo
:PROPERTIES:
:CREATED_TIME: [2022-04-12 Tue 11:03]
:END:
#+begin_quote
Integrate Org with epubinfo program
[[https://github.com/akirak/org-epubinfo]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-epubinfo)
    (:nixpkgs epubinfo))
#+end_src
*** org-hyprctl
:PROPERTIES:
:CREATED_TIME: [2023-04-22 Sat 14:22]
:END:
#+begin_quote
Manage Hyprctl workspaces from Org mode
[[https://github.com/akirak/org-hyprctl/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-hyprctl)
    (when (equal "Hyprland" (getenv "XDG_CURRENT_DESKTOP"))
      (define-key akirak/c-z-map "w" #'org-hyprctl-popup)
      (with-eval-after-load 'org
        (add-hook 'org-ctrl-c-ctrl-c-hook #'org-hyprctl-update))))
#+end_src
*** org-indent
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup org-indent
    (:set org-indent-mode-turns-on-hiding-stars t))
#+end_src
*** COMMENT org-journal                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:

#+begin_src emacs-lisp
(setup (:package org-journal))
#+end_src
*** org-lang-env
:PROPERTIES:
:CREATED_TIME: [2022-08-19 Fri 23:57]
:END:
#+begin_quote
Per-entry language environment
[[https://github.com/akirak/org-lang-env]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-lang-env))
#+end_src
*** COMMENT orglink                                  :links:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:28]
:END:
#+begin_quote
use Org Mode links in other modes
#+end_quote

=orglink-mode= lets you open links as in Org mode.

#+begin_src emacs-lisp
(setup (:package orglink))
#+end_src

*** org-make-toc                                     :documentation:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:
#+begin_quote
Automatic tables of contents for Org files
[[http://github.com/alphapapa/org-make-toc]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-make-toc))
#+end_src
*** org-memento
:PROPERTIES:
:CREATED_TIME: [2022-10-06 Thu 18:50]
:END:
#+begin_quote
Time blocking with Org
[[https://github.com/akirak/org-memento]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-memento)
    (:set org-memento-idle-time 15
          org-memento-timeline-window-width akirak/default-body-width
          org-memento-state-trigger-alist
          '(("HALFWAY" :todo-keyword "EXTENDED")
            ("FAILED" :todo-keyword "RETRY"))
          org-memento-timeline-hide-planning
          (lambda (group)
            (not (equal (car group) "organising"))))
    (:with-feature org-memento-timeline
      (:with-map org-memento-timeline-mode-map
        (:bind "C-c ." #'akirak-org-edit-active-ts)))

    (defun akirak/org-memento-cleanup-buffers ()
      (interactive)
      (cl-flet
          ((pred (buffer)
             (and (not (buffer-file-name buffer))
                  (or (buffer-base-buffer buffer)
                      (derived-mode-p 'special-mode
                                      'org-agenda-mode)))))
        (if-let (buffers (thread-last
                           (buffer-list)
                           (seq-filter #'pred)
                           (mapc #'akirak/kill-buffer-in-directory)))
            (message "Killed %d indirect buffers" (length buffers))
          (message "No buffer to kill"))))

    (defun akirak/kill-buffer-in-directory (buffer)
      (let ((default-directory (buffer-local-value 'default-directory buffer))
            (exec-path (or (buffer-local-value 'exec-path buffer)
                           exec-path)))
        (with-existing-directory
          (kill-buffer buffer))))

    (:status personal
      (:when-loaded
        (org-memento-mode t))

      (:with-feature org-memento-timeline
        (:with-map org-memento-timeline-mode-map
          (:bind "j" (defun akirak-oahu-goto-context-from-timeline ()
                       (interactive)
                       (akirak-oahu-goto-context (oahu-memento-group-view-at-point))))))

      (define-key help-map (kbd "<tab>") #'org-memento-next-action)
      (define-key akirak/c-z-map (kbd "<tab>") #'org-memento-next-action)
      (define-key akirak/c-z-map "!" #'org-memento-quick-start-event)
      (define-key akirak/c-z-map "a" #'org-memento-agenda)
      (define-key akirak/c-z-map "i" #'org-memento-policy-find-in-source)
      (define-key akirak/c-z-map "j" #'org-memento-open-journal)
      (define-key akirak/c-z-map "k" #'akirak/org-memento-cleanup-buffers)
      (define-key akirak/c-z-map "n" #'org-memento-pick-next-action)
      (define-key akirak/c-z-map "t" #'org-memento-timeline)
      (define-key akirak/c-z-map (kbd "C-z") #'org-memento-status)
      (define-key akirak/c-z-map (kbd "C-o") #'org-memento-finish-block)
      (define-key akirak/c-z-map "5"
                  (defun akirak/org-memento-switch-to-tab (&optional arg)
                    (interactive "P")
                    (if (bound-and-true-p org-memento-current-block)
                        (let* ((name (if (string-match (rx bol "Cont. "
                                                           (?  "(" (+ digit) ")" (* blank)))
                                                       org-memento-current-block)
                                         (substring org-memento-current-block
                                                    (match-end 0))
                                       org-memento-current-block))
                               (tab-index (tab-bar--tab-index-by-name name)))
                          (if tab-index
                              (tab-bar-select-tab (1+ tab-index))
                            (tab-bar-new-tab)
                            (tab-bar-rename-tab org-memento-current-block))
                          (when (or (not tab-index)
                                    arg)
                            (delete-other-windows)
                            (akirak-oahu-goto-context)
                            (call-interactively #'oahu-view)))
                      (user-error "No current block"))))

      (:set org-memento-agenda-excluded-tags '("ARCHIVE" "@epic")
            org-memento-timeline-hidden-sections '((daily-progress .t))
            org-memento-group-taxonomy
            '((:read
               (lambda (element) (org-element-property :MEMENTO_CATEGORY element))
               :format (lambda (x) (or x "No category"))
               :template (lambda (category)
                           (when category
                             `(:properties (("MEMENTO_CATEGORY" . ,category))))))
              (:read
               ;; Customize `oahu-process-alist'
               (lambda (_) (require 'oahu-memento) (oahu-memento-context))
               :format (lambda (x)
                         (pcase x
                           (`(Project ,pr)
                            (thread-last
                              (project-root pr)
                              (string-remove-suffix "/")
                              (file-name-nondirectory)
                              (concat "project:")))
                           (`(Org ,files)
                            (mapconcat #'file-name-nondirectory
                                       (seq-filter #'stringp files)
                                       ","))
                           (`(Review ,span)
                            (format "review %s" span))
                           (`(OrgBookmark ,bookmark)
                            bookmark)
                           (`nil
                            "✲")
                           (_
                            (prin1-to-string x))))
               :template oahu-memento-template-arguments)
              (:read
               (lambda (element) (org-element-property :tags element))
               :format (lambda (x)
                         (if x
                             (org-make-tag-string x)
                           "✲"))
               :template (lambda (tags)
                           (when tags
                             `(:tags ,tags)))))
            org-memento-order-group
            (defun akirak/org-memento-group-order (x)
              (car-safe (org-memento-order-group x))))

      (add-hook 'org-memento-open-journal-hook
                (defun akirak/org-memento-goto-entry-end ()
                  (goto-char (org-entry-end-position)))
                90)

      (add-hook 'org-memento-checkout-hook
                (defun akirak/org-memento-save-some-buffers ()
                  (when (bound-and-true-p akirak-org-clock-mode)
                    (ignore-errors (akirak-org-clock-snooze)))
                  (save-some-buffers)))

      (add-hook 'org-memento-extra-activity-sources
                #'akirak-log-memento-activities)

      (defcustom akirak/org-memento-export-directory nil
        ""
        :type '(choice directory (const nil)))

      (add-hook 'org-memento-checkout-hook
                (defun akirak/org-memento-export-day-at-point ()
                  (when akirak/org-memento-export-directory
                    (if (file-equal-p org-memento-file (buffer-file-name))
                        (let ((date (org-get-heading t t t t)))
                          (unless (file-directory-p akirak/org-memento-export-directory)
                            (make-directory akirak/org-memento-export-directory t))
                          (org-memento-export-to-json date date
                            (expand-file-name (concat "org-memento_" date ".json")
                                              akirak/org-memento-export-directory)))
                      (message "Not in org-memento-file buffer")))))

      (add-hook 'org-memento-block-exit-hook #'akirak/org-memento-cleanup-buffers)))
#+end_src

=org-memento-file= must be added to =org-agenda-files=. See [[*org-dog][org-dog]].
*** org-ml                                                 :library:
:PROPERTIES:
:CREATED_TIME: [2022-03-17 Thu 20:26]
:END:
#+begin_quote
Functional Org Mode API
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-ml))
#+end_src
*** org-nlink
:PROPERTIES:
:CREATED_TIME: [2022-09-27 Tue 23:59]
:END:
#+begin_quote
Utilities for in-file links
[[https://github.com/akirak/org-nlink.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-nlink)
    (:with-feature org
      (:with-map org-mode-map
        (:bind "M-s l" #'org-nlink-occur)))

    (:set org-nlink-extra-files
          (defun akirak/org-nlink-extra-org-files ()
            (require 'org-dog-context)
            (require 'org-dog-overview)
            (append (thread-last
                      (org-dog-context-file-objects
                       (org-dog-context-org-tags-1 (org-get-tags)))
                      (mapcar (lambda (obj)
                                (oref obj absolute))))
                    (when-let (filename (buffer-file-name (org-base-buffer (current-buffer))))
                      (thread-last
                        (org-dog-overview-scan (list (abbreviate-file-name filename))
                                               :clear t)
                        (mapcar #'car)))))
          org-nlink-target-verify-function
          (defun akirak/org-nlink-verify-location ()
            (require 'org-dog)
            (let ((obj (org-dog-buffer-object)))
              (if (and obj
                       (object-of-class-p obj 'org-dog-facade-datetree-file)
                       (looking-at org-complex-heading-regexp)
                       (= 1 (- (match-end 1) (match-beginning 1)))
                       (not (equal "Index" (match-string 4))))
                  (progn
                    (org-end-of-subtree)
                    nil)
                t))))

    (add-hook 'org-open-link-functions #'org-nlink-open-link))
#+end_src
**** consult-org-nlink
#+begin_quote
Consult interface for org-nlink
[[https://github.com/akirak/org-nlink.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-org-nlink)
    (:set consult-org-nlink-insert-super-link 'ask)
    (:with-feature org
      (:with-map org-mode-map
        (:bind "C-x i" #'consult-org-nlink-insert)))
    (:with-feature isearch
      (:with-map isearch-mode-map
        (:bind "C-x i" #'consult-org-nlink-isearch))))
#+end_src
*** COMMENT org-noter                                                          :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:
#+begin_quote
A synchronized, Org-mode, document annotator
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-noter))
#+end_src
*** org-pivot-search
:PROPERTIES:
:CREATED_TIME: [2023-07-16 Sun 23:59]
:END:
#+begin_quote
Experimental search command for Org files
[[https://github.com/akirak/org-pivot-search]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-pivot-search)
    (:set org-pivot-search-annotation-function #'akirak-org-entry-annotation))
#+end_src
*** org-placeholder
:PROPERTIES:
:CREATED_TIME: [2022-11-12 Sat 18:39]
:END:
#+begin_quote
Placeholders for Org
[[https://github.com/akirak/org-placeholder]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-placeholder)
    (:set org-placeholder-show-archived-entries-in-view t)
    (:when-loaded
      (require 'akirak-org-capture)
      (:set org-placeholder-default-capture-template
            (concat "* %i\n"
                    akirak-org-capture-default-drawer
                    "%?")))
    (:global "M-s M-p" #'org-placeholder-find-or-create))
#+end_src
*** COMMENT org-pretty-table                                                   :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-23 Sat 23:59]
:END:
#+begin_quote
Replace org-table characters with box-drawing unicode glyphs.
#+end_quote

#+begin_src emacs-lisp
(setup (:package org-pretty-table))
#+end_src
*** org-ql                                                 :library:
:PROPERTIES:
:CREATED_TIME: [2022-01-22 Sat 20:50]
:END:
#+begin_quote
Org Query Language, search command, and agenda-like view
[[https://github.com/alphapapa/org-ql]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-ql)
    (:also-load akirak-org-ql)
    ;; Temporarily workaround
    (autoload 'org-dblock-write:org-ql "org-ql-search")

    (:set org-ql-completing-read-reverse-paths nil)

    (:with-feature org
      (:bind "C-c C-x /" #'org-ql-sparse-tree)))
#+end_src
**** org-ql-view
#+begin_src emacs-lisp
  (setup org-ql-view
    ;; I don't want this function to be called every time `org-capture' is fired.
    (advice-add 'org-ql-view--link-store
                :before-while
                (defun akirak/org-ql-view-link-needed-p (&rest _args)
                  (eq this-command 'org-store-link)))

    (:when-loaded
      (require 'akirak-org-ql-view)
      (:set akirak-org-ql-view-super-group-alist
            (akirak-org-ql-view-update-super-group-alist))
      (transient-replace-suffix 'org-ql-view-dispatch
        'org-ql-view--transient-super-groups
        '("g" "Groups" akirak-org-ql-view-set-super-groups))))
#+end_src
*** org-recur
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 14:17]
:END:
#+begin_quote
Recurring org-mode tasks
[[https://github.com/mrcnski/org-recur]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-recur)
    (:status opinionated
      (with-eval-after-load 'org
        (when (require 'akirak-org-recur nil t)
          (akirak-org-recur-mode t)))))
#+end_src
*** org-reverse-datetree
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 20:15]
:END:
#+begin_quote
Create reverse date trees in org-mode
[[https://github.com/akirak/org-reverse-datetree]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-reverse-datetree)
    (:set org-reverse-datetree-month-format "%Y-%m")

    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-c C-x M-j") #'org-reverse-datetree-calendar))

    (with-eval-after-load 'calendar
      (define-key calendar-mode-map "]" #'org-reverse-datetree-calendar-next)
      (define-key calendar-mode-map "[" #'org-reverse-datetree-calendar-previous)
      (define-key calendar-mode-map (kbd "RET") #'org-reverse-datetree-display-entry)))
#+end_src
*** COMMENT org-starter                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 20:14]
:END:
#+begin_quote
A basic configuration framework for org mode
[[https://github.com/akirak/org-starter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-starter)
    (:set org-starter-require-file-by-default nil
          org-starter-load-config-files t
          org-starter-exclude-from-recentf '(known-files path)
          ;; org-starter-alternative-find-function #'helm-org-ql
          org-starter-find-file-visit-window t
          org-starter-override-agenda-window-setup 'other-window
          org-starter-enable-local-variables :all))
#+end_src
*** org-super-agenda
:PROPERTIES:
:CREATED_TIME: [2022-03-11 Fri 17:45]
:END:
#+begin_quote
Supercharge your agenda
[[http://github.com/alphapapa/org-super-agenda]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-super-agenda)
    (with-eval-after-load 'org-agenda
      (org-super-agenda-mode t))
    (:also-load akirak-org-super-agenda)
    (:status personal
      (:set org-super-agenda-groups '((:name "Timeline" :time-grid t)
                                      (:auto-category t)))))
#+end_src
*** org-super-links
:PROPERTIES:
:CREATED_TIME: [2022-08-19 Fri 15:36]
:END:
#+begin_quote
Make super links
[[https://github.com/toshism/org-super-links]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-super-links)
    (:with-feature org
      (:with-map org-mode-map
        (:bind "C-c C-x L" #'org-super-links-insert-link
               "C-c C-x S" #'org-super-links-store-link))))
#+end_src
*** org-transclusion
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:09]
:END:
#+begin_quote
Transclude text content via links
[[https://github.com/nobiot/org-transclusion]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-transclusion)
    ;; `org-transclusion-mode' is usually turned on by `org-dog'.
    (:set org-transclusion-add-all-on-activate t))
#+end_src
*** COMMENT org-visual-indent                   :aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-visual-indent)
    (:hook-into org-mode-hook))
#+end_src
*** org-volume
:PROPERTIES:
:CREATED_TIME: [2022-04-04 Mon 23:59]
:END:
#+begin_quote
Retrieve metadata of volumes from inside Org
[[https://github.com/akirak/org-volume]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package org-volume)
    (:set org-volume-image-download-method #'akirak-image-insert-offline-link
          org-volume-dblock-defaults '(:lang "en" :limit 1)))
#+end_src
*** ox-gfm
:PROPERTIES:
:CREATED_TIME: [2022-05-15 Sun 16:56]
:END:
#+begin_quote
Github Flavored Markdown Back-End for Org Export Engine
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ox-gfm)
    (add-to-list 'org-modules 'ox-gfm))
#+end_src
*** ox-hugo
:PROPERTIES:
:CREATED_TIME: [2023-01-02 Mon 23:26]
:END:
#+begin_quote
Hugo Markdown Back-End for Org Export Engine
[[https://ox-hugo.scripter.co]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package ox-hugo))
#+end_src
** Treesit-based major modes
:PROPERTIES:
:SORTING_TYPE: a
:END:
Generate settings by evaluating the following org-babel source block within
Emacs:

#+begin_src elisp :results value code :tangle no
  (let (ts-modes)
    (cl-do-all-symbols (sym)
      (when (and (commandp sym)
                 (string-suffix-p "-ts-mode" (symbol-name sym)))
        (push sym ts-modes)))
    `(when (treesit-available-p)
       (let ((alist ',(mapcar (lambda (ts-mode)
                                (cons (intern
                                       (concat (thread-last
                                                 (symbol-name ts-mode)
                                                 (string-remove-suffix "-ts-mode"))
                                               "-mode"))
                                      ts-mode))
                              ts-modes)))
         (if major-mode-remap-alist
             (dolist (x alist)
               (add-to-list 'major-mode-remap-alist x))
           (setq major-mode-remap-alist alist)))
       (with-eval-after-load 'org
         (dolist (x ',(mapcar (lambda (ts-mode)
                                (let ((name (symbol-name ts-mode)))
                                  (cons (string-remove-suffix "-ts-mode" name)
                                        (intern (string-remove-suffix "-mode" name)))))
                              ts-modes))
           (add-to-list 'org-src-lang-modes x)))))
#+end_src

#+RESULTS:
#+begin_src elisp
  (when (treesit-available-p)
    (let
        ((alist
          '((html-mode . html-ts-mode) (js-mode . js-ts-mode) (c-mode . c-ts-mode)
            (yaml-mode . yaml-ts-mode) (tsx-mode . tsx-ts-mode)
            (css-mode . css-ts-mode) (csharp-mode . csharp-ts-mode)
            (dockerfile-mode . dockerfile-ts-mode) (heex-mode . heex-ts-mode)
            (bash-mode . bash-ts-mode) (c-or-c++-mode . c-or-c++-ts-mode)
            (ruby-mode . ruby-ts-mode) (java-mode . java-ts-mode)
            (python-mode . python-ts-mode) (elixir-mode . elixir-ts-mode)
            (toml-mode . toml-ts-mode) (typescript-mode . typescript-ts-mode)
            (nix-mode . nix-ts-mode) (go-mod-mode . go-mod-ts-mode)
            (cmake-mode . cmake-ts-mode) (c++-mode . c++-ts-mode)
            (json-mode . json-ts-mode) (go-mode . go-ts-mode)
            (rust-mode . rust-ts-mode))))
      (if major-mode-remap-alist
          (dolist (x alist) (add-to-list 'major-mode-remap-alist x))
        (setq major-mode-remap-alist alist)))
    (with-eval-after-load 'org
      (dolist
          (x
           '(("html" . html-ts) ("js" . js-ts) ("c" . c-ts) ("yaml" . yaml-ts)
             ("tsx" . tsx-ts) ("css" . css-ts) ("csharp" . csharp-ts)
             ("dockerfile" . dockerfile-ts) ("heex" . heex-ts) ("bash" . bash-ts)
             ("c-or-c++" . c-or-c++-ts) ("ruby" . ruby-ts) ("java" . java-ts)
             ("python" . python-ts) ("elixir" . elixir-ts) ("toml" . toml-ts)
             ("typescript" . typescript-ts) ("nix" . nix-ts)
             ("go-mod" . go-mod-ts) ("cmake" . cmake-ts) ("c++" . c++-ts)
             ("json" . json-ts) ("go" . go-ts) ("rust" . rust-ts)))
        (add-to-list 'org-src-lang-modes x))))
#+end_src

The generated remappings do have limitations, but it is possible to work around
manually by adding extra entries in the following subsections.

*** dockerfile-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-09-23 Sat 11:30]
:END:

#+begin_src emacs-lisp
  (setup dockerfile-ts-mode
    (:file-match "Dockerfile\\'" "\\.dockerfile\\'"))
#+end_src
*** elixir-ts-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-29 Fri 19:08]
:END:
#+begin_quote
Major mode for Elixir with tree-sitter support
[[https://github.com/wkirschbaum/elixir-ts-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup elixir-ts-mode
    (:file-match "\\.exs?\\'")

    (:reformatters
     (mix-format :program "mix"
                 :args (list "format" "--stdin-filename" (buffer-file-name) "-")))

    (:auto-insert
     ("/config/config\\.exs\\'"
      . (> "use Mix.Config\n\n"
           _))
     ("/lib/.+\\.ex\\'"
      . (> "defmodule " (akirak/elixir-module-name-from-file) " do\n"
           "  @moduledoc \"\"\"\n"
           "  " - n
           "  \"\"\"" n n
           "  " _ n
           "end\n"))
     ("/test/.+_test\\.exs\\'"
      . (> "defmodule " (akirak/elixir-module-name-from-file) " do\n"
           "  use ExUnit.Case\n\n"
           "  alias " (string-remove-suffix
                       "Test" (akirak/elixir-module-name-from-file))
           "\n"
           "  doctest " (string-remove-suffix
                         "Test" (akirak/elixir-module-name-from-file))
           "\n"
           "  " _
           "\nend\n")))

    (:when-loaded
      (define-abbrev elixir-ts-mode-abbrev-table
        "case" "" (define-skeleton akirak-elixir-case
                    "Insert case"
                    ""
                    > "case " - " do" n
                    > @ _ n
                    > -2 "end"))

      (define-abbrev elixir-ts-mode-abbrev-table
        "fn" "" (define-skeleton akirak-elixir-fn
                  "Insert fn"
                  ""
                  > "fn " - " ->" n
                  > @ _ n
                  > -2 "end"))
      (define-abbrev elixir-ts-mode-abbrev-table
        "do" "" (define-skeleton akirak-elixir-do
                  "do ... end"
                  ""
                  > "do" n
                  > @ _ n
                  > -2 "end")))

    (:compilation-error
     ;; ** (SyntaxError) xxx/xxx/xxx.ex:97:29: syntax error before: '{'
     (iex "^\\*+([^z-a]+)\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*"
          1 2 3 (4 . 4)))

    (defun akirak/elixir-module-name-from-file ()
      (require 'f)
      (require 'dash)
      (let ((segments (f-split (buffer-file-name))))
        (when-let (i (-find-last-index
                      (lambda (x) (member x '("lib" "test")))
                      segments))
          (mapconcat (lambda (s)
                       (->> (split-string s "_")
                            (mapcar #'capitalize)
                            (string-join)))
                     (append (-slice segments (1+ i) -1)
                             (list (f-base (-last-item segments))))
                     ".")))))
#+end_src
*** go-ts-mode                                                     :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-04-12 Tue 23:59]
:END:
#+begin_quote
Major mode for the Go programming language
#+end_quote

#+begin_src emacs-lisp
  (setup go-ts-mode
    (:auto-insert
     ("\\.go\\'"
      . (> "package "
           (file-name-base (or buffer-file-name (buffer-name)))
           "\n\nimport (\n"
           ")\n\n"))))
#+end_src
*** heex-ts-mode
#+begin_src elisp
  (setup heex-ts-mode
    (:file-match "\\.heex\\'")
    (:local-set electric-pair-pairs '((?% . ?%)))
    (:when-loaded
      ;; These workarounds are only necessary due to upstream inconsistencies.
      ;; Hopefully they will resolve the issues in the mean time.
      (unless (fboundp 'heex-ts-mode-treesit-ready-p)
        (defun heex-ts-mode-treesit-ready-p ()
          (treesit-ready-p 'heex)))
      (unless (boundp 'heex-ts-mode--indent-rules)
        (setq heex-ts-mode--indent-rules
              heex-ts--indent-rules))
      (unless (boundp 'heex-ts-mode--font-lock-settings)
        (setq heex-ts-mode--font-lock-settings
              heex-ts--font-lock-settings))))
#+end_src
*** java-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-06-27 Tue 23:21]
:END:

#+begin_src emacs-lisp
  (setup java-ts-mode)
#+end_src
*** json-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-04-01 Sat 18:52]
:END:

#+begin_src emacs-lisp
  (setup json-ts-mode
    (:file-match "\\.lock\\'")
    (:hook (defun akirak/json-ts-setup ()
             (add-hook 'eldoc-documentation-functions
                       (defun akirak/json-ts-path-eldoc (cb)
                         (when-let (points (cdr (ppss-open-parens (syntax-ppss))))
                           (funcall cb (mapconcat
                                        (lambda (pos)
                                          (let* ((node (treesit-node-parent
                                                        (treesit-node-at pos)))
                                                 (prev-sibling (treesit-node-prev-sibling node)))
                                            (pcase (treesit-node-type prev-sibling)
                                              (":"
                                               (thread-first
                                                 prev-sibling
                                                 (treesit-node-prev-sibling)
                                                 (treesit-node-text)
                                                 (substring-no-properties)))
                                              (","
                                               "[]"))))
                                        points
                                        "."))))
                       nil t))))
#+end_src
*** js-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-02-23 Thu 23:59]
:END:

#+begin_src emacs-lisp
  (setup js-ts-mode
    (:org-src-lang "javascript")
    (:file-match "\\.[cm]?js$"))
#+end_src
*** nix-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-08-26 Sat 11:56]
:END:
#+begin_quote
Major mode for Nix expressions, powered by tree-sitter
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nix-ts-mode)
    (:file-match "\\.nix\\'")
    (:mode-repl nix-repl)
    (:bind [remap devdocs-lookup] #'akirak-nix-manix)
    (:reformatters
     (alejandra :program "alejandra")))
#+end_src
*** rust-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-10-02 Mon 21:09]
:END:

#+begin_src emacs-lisp
  (setup rust-ts-mode
    (:file-match "\\.rs\\'"))
#+end_src
*** toml-ts-mode
:PROPERTIES:
:CREATED_TIME: [2023-03-19 Sun 21:27]
:END:

#+begin_src emacs-lisp
  (setup toml-ts-mode
    (:file-match "\\.toml\\'"))
#+end_src
*** typescript-ts-mode                                              :major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 18:39]
:END:
#+begin_quote
Major mode for editing typescript
[[http://github.com/ananthakumaran/typescript.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup typescript-ts-mode
    (:file-match "\\.ts\\'")

    ;; (:also-load akirak-typescript)
    (:hook (defun akirak/typescript-setup ()
             (add-to-list (make-local-variable 'electric-pair-pairs)
                          '(?< . ?>))))

    (:with-mode typescript-ts-base-mode
      (:local-set block-comment-start "/*"
                  block-comment-end "*/"))

    (:with-mode tsx-ts-mode
      (:file-match "\\.tsx\\'")
      (:org-src-lang "react")
      (:bind "C-c C-e" #'akirak-treesit-jsx-close-tag))

    (:compilation-error
     (tsc "\\([^z-a]+\\.tsx?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\) - \\(error\\) "
          1 2 3 (4 . 4))
     (eslint "^\\(\\(?:ERROR\\|WARNING\\)\\) in \\([^z-a]*?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
             2 3 4 (1 . 1))
     (eslint-fix "^\\(/home/.+\\)\n[[:space:]]+\\([[:digit:]]+\\):\\([[:digit:]]+\\)[[:space:]]+\\(\\(?:WARNING\\|error\\)\\)"
                 1 2 3 (4 . 4))
     (prettier "^\\[\\(\\(?:WARNING\\|error\\)\\)] \\([^z-a]*?\\): [^z-a]+(\\([[:digit:]]+\\):\\([[:digit:]]+\\))"
               2 3 4 (1 . 1))))
#+end_src
**** COMMENT akirak-typescript                                                 :ARCHIVE:
#+begin_src emacs-lisp
  (setup akirak-typescript
    (:with-mode typescript-mode
      (:local-set beginning-of-defun-function #'akirak-typescript-beginning-of-defun
                  end-of-defun-function #'akirak-typescript-end-of-defun)))
#+end_src
**** COMMENT typescript-tsx-mode                                               :ARCHIVE:
#+begin_src emacs-lisp
  (setup tsx-mode
    (:file-match "\\.tsx\\'")

    ;; https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-849355222
    (define-derived-mode tsx-mode typescript-mode
      "tsx")

    (with-eval-after-load 'typescript-mode
      (define-key tsx-mode-map (kbd "C-c C-e") #'akirak-jsx-close-tag)))
#+end_src
*** yaml-ts-mode
:PROPERTIES:
:CREATED_TIME: [2022-03-07 Mon 16:07]
:END:
#+begin_quote
Major mode for editing YAML files
[[https://github.com/yoshiki/yaml-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup yaml-ts-mode
    (:file-match "\\.ya?ml\\'")
    (:hook (defun akirak/yaml-setup ()
             "Enable extra settings for YAML."
             (interactive nil (yaml-mode yaml-ts-mode))
             (pcase (buffer-file-name)
               (`nil)
               ((rx "/.github/workflows/")
                (message "YAML: Detected GitHub workflow")
                (when (fboundp 'flymake-actionlint1-enable)
                  (flymake-actionlint1-enable)))))))
#+end_src
** Working with specific services
*** GitHub
**** flymake-actionlint1
:PROPERTIES:
:CREATED_TIME: [2023-11-05 Sun 19:29]
:END:
#+begin_quote
Another flymake backend for actionlint
[[https://github.com/akirak/flymake-actionlint1]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flymake-actionlint1)
    (:nixpkgs "actionlint"))
#+end_src
** User package (akirak-*.el)
:PROPERTIES:
:SORTING_TYPE: a
:END:
This is a collection of various utilities to enhance the experience.
#+begin_src emacs-lisp
  (setup (:package akirak)
    (:global "C-x d" #'akirak-consult-dir
             "C-c i" #'akirak-scratch-elisp
             "<f12> j" #'akirak-scratch-japanese)

    (with-eval-after-load 'embark
      (require 'akirak-embark)
      (add-to-list 'embark-keymap-alist
                   '(directory . akirak-embark-directory-map))
      (add-to-list 'embark-keymap-alist
                   '(project-root . akirak-embark-project-root-map))
      ;; Since I am not using package.el, it is better to override the default
      ;; embark map.
      (add-to-list 'embark-keymap-alist
                   '(package . akirak-embark-package-map)))

    ;; These settings are specific to my environment.
    (:status personal
      (:defer 1 #'akirak-files-ensure-abbrev-list)))
#+end_src
*** akirak-avy
#+begin_src emacs-lisp
  (setup akirak-avy
    (:global "C-;" #'akirak-avy-insert-symbol
             "C-\"" #'akirak-avy-symbol-overlay-put
             "M-g `" #'akirak-avy-org-block))
#+end_src
*** akirak-capture
#+begin_src emacs-lisp
  (setup akirak-capture
    (:global "C-c c" #'akirak-capture))
#+end_src
*** akirak-comment
#+begin_src emacs-lisp
  (setup akirak-comment
    (:set comment-region-function #'akirak-comment-region-1
          uncomment-region-function #'akirak-uncomment-region-1)
    (:global "M-;" #'akirak-comment-toggle))
#+end_src
*** akirak-compile
:PROPERTIES:
:CREATED_TIME: [2024-02-04 Sun 11:34]
:END:
#+begin_src elisp
  (setup akirak-compile
    (:global "C-x c" #'akirak-compile))
#+end_src
*** akirak-consult
#+begin_src emacs-lisp
  (setup akirak-consult
    (:status opinionated
      (:with-map ctl-x-map
        (:bind "p" #'akirak-consult-project-file))))
#+end_src
*** akirak-consult-elisp
#+begin_src emacs-lisp
  (setup akirak-consult-elisp
    (:global [remap finder-by-keyword] #'akirak-consult-elisp-package))
#+end_src
*** akirak-consult-org
#+begin_src emacs-lisp
  (setup akirak-consult-org
    (:global "M-s M-j" #'akirak-consult-org-clock-history))
#+end_src
*** akirak-disk
#+begin_src elisp
  (setup akirak-disk
    (:global "<f12> d m" #'akirak-disk-findmnt))
#+end_src
*** akirak-elec-pair                                               :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:39]
:END:
#+begin_src emacs-lisp
  (setup akirak-elec-pair
    (:status opinionated
      (:global "M-i" nil
               "M-i c" #'akirak-elec-pair-replace
               "M-i d" #'akirak-elec-pair-delete
               "M-i y" #'akirak-elec-pair-wrap-post-yank
               "M-i #" #'akirak-elec-pair-self-insert
               "M-i $" #'akirak-elec-pair-self-insert
               "M-i %" #'akirak-elec-pair-self-insert
               "M-i {" #'akirak-elec-pair-self-insert
               "M-i [" #'akirak-elec-pair-self-insert
               "M-i (" #'akirak-elec-pair-self-insert)))
#+end_src

I once used [[https://github.com/cute-jumper/embrace.el][embrace.el]], but it had dependency on expand-region I wanted to get rid of, so I implemented a simpler alternative.
*** akirak-elisp
#+begin_src emacs-lisp
  (setup akirak-elisp
    (:with-map emacs-lisp-mode-map
      (:bind "C-c t l" #'akirak-elisp-let-exp)
      (:bind "C-c t (" #'akirak-elisp-wrap-exp)))
#+end_src
*** akirak-expand-region
#+begin_src elisp
  (setup akirak-expand-region
    (:global "C-M-SPC" #'akirak-expand-region-default))
#+end_src
*** akirak-git-commit
#+begin_src emacs-lisp
  (setup akirak-git-commit
    (add-hook 'after-init-hook #'akirak-git-commit-log-to-org-clock-mode))
#+end_src
*** akirak-github
#+begin_src elisp
  (define-key help-map (kbd "C-g") #'akirak-github-search-code)
#+end_src
*** akirak-header-line                                                      :UI:
:PROPERTIES:
:CREATED_TIME: [2022-04-18 Mon 08:15]
:END:
#+begin_src emacs-lisp
  (setup akirak-header-line
    (:hook-into after-init-hook))
#+end_src
*** akirak-image

#+begin_src emacs-lisp
  (setup akirak-image
    (:nixpkgs "librsvg")
    (:embark embark-url-map "s"
      ("d" akirak-image-insert-offline-link akirak/embark-org-insert-image))
    (:embark embark-file-map nil
      ("C-c i" akirak-image-import-file akirak/embark-import-image-url))
    (add-hook 'org-ctrl-c-ctrl-c-hook #'akirak-image-org-update))
#+end_src
*** akirak-insert
#+begin_src emacs-lisp
  (setup akirak-insert
    (:global "C-c a" #'akirak-insert
             "C-x a f" #'akirak-insert-which-function
             "C-x a w" #'akirak-insert-window-title))
#+end_src
*** COMMENT akirak-japanese                                            :ARCHIVE:
#+begin_src emacs-lisp
  (setup akirak-japanese
    ;; Local search
    (:global "M-s M-l" #'akirak-japanese-search))
#+end_src
*** akirak-log
#+begin_src elisp
  (setup akirak-log
    (let ((file (locate-user-emacs-file "log/latest.org")))
      (when (file-readable-p file)
        (:set akirak-log-private-file file)
        (with-eval-after-load 'org-agenda
          (add-to-list 'org-agenda-files akirak-log-private-file)))))
#+end_src
*** akirak-magit
#+begin_src elisp
  (setup akirak-magit
    (:status personal
      (:set akirak-magit-worktree-category-function
            (defun akirak-git-worktree-category ()
              (or (akirak-git-clone--clock-category)
                  (progn
                    (require 'oahu)
                    (pcase oahu-last-view
                      (`(Project ,pr . ,_)
                       (thread-last
                         (project-root pr)
                         (string-remove-suffix "/")
                         (file-name-directory)
                         (string-remove-suffix "/")
                         (file-name-nondirectory)))
                      (`(Org ,x . ,_)
                       (when-let (file (seq-find #'stringp x))
                         (thread-last
                           (file-name-base file)
                           (string-remove-suffix "-dev"))))
                      (`(OrgBookmark . ,bookmark)
                       nil)
                      (_
                       (message "Unsupported type: %s"
                                oahu-last-view)
                       nil))))))))
#+end_src
*** akirak-narrow
#+begin_src emacs-lisp
  (setup akirak-narrow
    (:global "C-x n" #'akirak-narrow-or-widen-dwim)
    (advice-add 'org-defkey
            :before-while
            (defun akirak/ad-org-defkey-skip (_keymap key _def)
              (not (equal (kbd "C-x n")
                          (seq-take key 2)))))
    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-x n") #'akirak-narrow-or-widen-dwim)))
#+end_src
*** akirak-nix
#+begin_src emacs-lisp
  (setup akirak-nix
    (:global "<f12> n p" #'akirak-nix-search-nixpkgs))
#+end_src
*** akirak-org
#+begin_src emacs-lisp
  (setup akirak-org
    (:with-feature org
      (:with-map org-mode-map
        (:bind [remap point-to-register] #'akirak-org-point-to-register)))

    (advice-add #'org-insert-heading-respect-content
                :around #'akirak-org-ad-around-insert-heading)
    (advice-add #'org-insert-todo-heading-respect-content
                :around #'akirak-org-ad-around-insert-heading)
    (advice-add 'org-return
                :around #'akirak-org-ad-around-org-return)
    (advice-add 'org-meta-return
                :around #'akirak-org-meta-return-split-block-advice))
#+end_src
*** akirak-org-capture
#+begin_src elisp
  (setup akirak-org-capture
    (:global "M-s M-h" #'akirak-org-capture-history))
#+end_src
*** akirak-org-clock
#+begin_src emacs-lisp
  (setup akirak-org-clock
    (when (and (daemonp)
               ;; Don't enable the mode when troubleshooting.
               (or (getenv "WAYLAND_DISPLAY")
                   (getenv "DISPLAY")))
      (:hook-into emacs-startup-hook))
    (:hook akirak-log-mode)

    (advice-add 'save-buffers-kill-terminal
                :before
                (defun akirak/snooze-before-kill (&rest _)
                  (when (bound-and-true-p akirak-org-clock-mode)
                    (akirak-org-clock-snooze 20))))

    (:global "M-g M-j" #'akirak-org-clock-goto)

    (:with-feature org
      (:with-map org-mode-map
        [remap org-clock-in] #'akirak-org-clock-in))

    (define-key akirak/c-z-map "o" #'akirak-org-clock-open)
    (define-key akirak/c-z-map "p" #'akirak-org-clock-in-to-project)
    (define-key akirak/c-z-map "c" #'akirak-org-clock-reclock-commit-entry)
    (define-key akirak/c-z-map "g" #'akirak-org-clock-display-commit-entry)
    ;; (define-key akirak/c-z-map "I" #'akirak-org-clock-in-dwim)
    ;; (define-key akirak/c-z-map "C-i" #'akirak-org-clock-in-dwim)
    (define-key akirak/c-z-map "S" #'akirak-org-clock-snooze)
    (define-key akirak/c-z-map "C-s" #'akirak-org-clock-snooze)

    (define-key akirak/c-z-map "O" #'akirak-org-clock-out)
    (define-key akirak/c-z-map "C-o" #'akirak-org-clock-out)
    (define-key akirak/c-z-map "d" #'akirak-org-clock-done)
    (define-key akirak/c-z-map "r" #'akirak-org-clock-set-review))
#+end_src
*** akirak-org-log
#+begin_src emacs-lisp
  (setup akirak-org-log
    (:status personal
      (define-key help-map (kbd "w") #'akirak-org-log-goto-week-entry)))
#+end_src
*** akirak-org-reg
#+begin_src emacs-lisp
  (setup akirak-org-reg
    (:global "C-c j" #'akirak-org-reg-transient))
#+end_src
*** akirak-org-secrets                                                 :secrets:
#+begin_src emacs-lisp
  (setup akirak-org-secrets
    (:global "<f12> S i" #'akirak-org-secrets-insert
             "<f12> S w" #'akirak-org-secrets-copy
             "<f12> S s" #'akirak-org-secrets-show
             "<f12> S c" #'akirak-org-secrets-capture))
#+end_src
*** akirak-org-special
#+begin_src elisp
  (setup akirak-org-special
    (with-eval-after-load 'org
      (add-hook 'org-ctrl-c-ctrl-c-hook #'akirak-org-special-prompt-send)))
#+end_src
*** akirak-pandoc
#+begin_src emacs-lisp
  (setup akirak-pandoc
    (:nixpkgs "pandoc"))
#+end_src
*** akirak-paren
#+begin_src elisp
  (setup akirak-paren
    (defun akirak/turn-on-paren-jump-mode ()
      (unless (derived-mode-p 'elixir-ts-mode 'heex-ts-mode)
        (akirak-paren-jump-mode t)))

    (:with-mode akirak/turn-on-paren-jump-mode
      ;; Don't turn on the mode in special modes, e.g. vterm.
      (:hook-into prog-mode-hook text-mode-hook))
    (add-hook 'akirak-paren-match-hook #'akirak-paren-syntax-table-match)
    (add-hook 'org-mode-hook
              (defun akirak/setup-org-pair-match ()
                (add-hook 'akirak-paren-match-hook 'akirak-org-matching-pair-location
                          nil t))))
#+end_src
*** akirak-project
#+begin_src emacs-lisp
  (setup akirak-project
    (run-with-idle-timer 70 nil #'akirak-project-remember-this)
    (run-with-idle-timer 180 nil #'akirak-project-rescan)
    (with-eval-after-load 'magit
      (add-hook 'kill-emacs-hook #'akirak-project-import-from-magit))

    (with-eval-after-load "bindings"
      ;; (define-key ctl-x-x-map "p" #'akirak-project-switch-to-recent-buffer)
      ;; (define-key ctl-x-x-map "o" #'akirak-project-switch-between-impl-and-test)
      ;; (define-key ctl-x-x-map "C" #'akirak-project-find-css)
      ;; (define-key ctl-x-x-map "T" #'akirak-project-find-test)
      ;; (define-key ctl-x-x-map "S" #'akirak-project-find-stories)
      )

    (with-eval-after-load 'embark
      (define-key embark-file-map (kbd "+") #'akirak-project-init)))
#+end_src
*** akirak-quick-thing
#+begin_src elisp
  (setup akirak-quick-thing
    (:global "M-SPC" #'akirak-quick-thing))
#+end_src
*** akirak-scratch
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c x") #'akirak-scratch-from-selection)
#+end_src
*** akirak-shr
#+begin_src elisp
  (setup akirak-shr
    (:hook-into nov-mode-hook))
#+end_src
*** akirak-snippet
#+begin_src emacs-lisp
  (setup akirak-snippet
    (define-key ctl-x-r-map "/" #'akirak-snippet-search))
#+end_src
*** akirak-systemctl
#+begin_src elisp
  (setup akirak-systemctl
    (:global "<f12> s s" #'akirak-systemctl-toggle-unit
             "<f12> s d" #'akirak-systemctl-daemon-reload))
#+end_src
*** akirak-treesit
#+begin_src elisp
  (setup akirak-treesit
    (:bind "C-M-SPC" #'akirak-treesit-expand-region)
    (add-hook 'after-change-major-mode-hook
              (defun akirak/enable-treesit-mode ()
                (when (string-suffix-p "-ts-mode" (symbol-name major-mode))
                  (akirak-treesit-mode t)))))
#+end_src
*** akirak-twist
#+begin_src emacs-lisp
  (setup akirak-twist
    (with-eval-after-load 'embark
      (define-key embark-library-map
                  "f" #'akirak-twist-find-git-source))
    (:global "<f12> e u" #'akirak-twist-update-emacs-inputs))
#+end_src
*** akirak-unknown
#+begin_src emacs-lisp
  (setup akirak-unknown
    (:global "C-c m" #'akirak-unknown)
    (:when-loaded
      (akirak-unknown-setup-embark)))
#+end_src
*** akirak-url                                                       :clipboard:
Complete a URL from the clipboard and the kill ring and insert as a link

#+begin_src emacs-lisp
  (setup akirak-url
    (:global "C-c w" #'akirak-url-insert-dwim)
    (:embark embark-url-map "s"
      ("m" akirak-url-insert-as-markdown akirak/embark-markdown-insert-link)
      ("c" akirak-capture-url akirak/embark-capture-url)
      ("g" akirak-git-clone akirak/embark-git-clone-from-url))
    (:embark embark-file-map "s"
      ("C-l" akirak-org-store-link-to-file akirak/embark-org-store-file-link)))
#+end_src
*** akirak-visual-scroll
#+begin_src emacs-lisp
  (setup akirak-visual-scroll
    (:hook-into org-mode-hook shr-mode-hook))
#+end_src
*** akirak-wayshot                                                  :screenshot:
#+begin_src emacs-lisp
  (when (getenv "WAYLAND_DISPLAY")
    (global-set-key (kbd "<f12> c s w") #'akirak-wayshot))
#+end_src
*** akirak-wf-recorder
#+begin_src emacs-lisp
  (when (getenv "WAYLAND_DISPLAY")
    (global-set-key (kbd "<f12> c r w") #'akirak-wf-recorder))
#+end_src
*** akirak-window                                                      :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 14:10]
:END:

This is an extra functions for window management.

#+begin_src emacs-lisp
  (setup akirak-window
    (cl-macrolet
        ((major-modes (&rest modes)
           `'(or ,@(mapcar (lambda (mode)
                             (cons 'major-mode mode))
                           modes)))
         (reuse-mode-window (modes function &rest alist)
           `(lambda (buffer alist)
              (or (display-buffer-reuse-mode-window buffer '((mode . ,modes)))
                  (,function buffer ',alist)))))
      (dolist (entry `((,(major-modes help-mode devdocs-mode)
                        ,(reuse-mode-window
                          (help-mode devdocs-mode)
                          akirak-window-display-document-buffer))
                       ((or ,(major-modes vterm-mode eat-mode)
                            "^\\*Nix-REPL\\*")
                        ,(reuse-mode-window
                          (vterm-mode eat-mode nix-repl-mode)
                          akirak-window-display-buffer-split-below
                          (dedicated . t)))
                       (,(major-modes nov-mode pdf-view-mode eww-mode Info-mode)
                        akirak-window-display-document-buffer)
                       ((major-mode . org-agenda-mode)
                        akirak-window-display-org-agenda-buffer
                        (mode org-agenda-mode))
                       ("^CAPTURE-"
                        akirak-window-display-org-capture-buffer)
                       ("^org-dog header"
                        akirak-window-display-buffer-split-1)
                       ((major-mode . org-mode)
                        akirak-window-display-org-buffer-other-window)
                       ("^\\*deadgrep"
                        display-buffer-use-least-recent-window)
                       ("^\\*Async Shell Command\\*"
                        display-buffer-no-window)))
        (if-let (cell (assoc (car entry) display-buffer-alist))
            (setcdr cell (cdr entry))
          (setq display-buffer-alist (append display-buffer-alist (list entry))))))

    (:status opinionated
      (:with-map ctl-x-map
        ;; I don't need kill-buffer when I have consult-buffer
        (:bind "k" #'akirak-window-kill-this-buffer))
      (:global "C-2" #'akirak-window-split-vertically
               "C-3" #'akirak-window-split-and-select
               "C-4" #'akirak-window-setup-columns
               "C-x o" #'akirak-window-cycle-two-windows
               "C-x M-o" #'akirak-window-swap-two-windows
               "C-x `" #'akirak-window-column-prefix
               "C-c v" #'akirak-window-open-in-new-tab
               "M-o" #'akirak-window-moderate-1
               [remap delete-window] #'akirak-window-delete-window
               [remap abort-recursive-edit] #'akirak-window-cleanup)))
#+end_src
*** akirak-wordnet
#+begin_src elisp
  (setup akirak-wordnet
    (:nixpkgs "sqlite"))
#+end_src
** Packages                                                :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** academic-phrases                                       :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:28]
:END:
#+begin_quote
Bypass that mental block when writing your papers.
#+end_quote

#+begin_src emacs-lisp
(setup (:package academic-phrases))
#+end_src
*** COMMENT ace-window                                             :keybindings:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Quickly switch windows.
[[https://github.com/abo-abo/ace-window]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ace-window)
    (:set aw-keys (string-to-list "qwertyui")
          aw-background nil
          aw-ignore-on t
          aw-ignored-buffers '(" *LV*"
                               minibuffer-mode
                               "*Calc Trail*")
          aw-scope 'frame
          aw-dispatch-always t)

    (:status opinionated
      (:global "M-o" #'ace-window)
      (:with-feature lispy
        (:when-loaded
          (:with-map (lispy-mode-map)
            (:unbind "M-o"))))
      (:set aw-dispatch-alist
            `((?o aw-swap-window "Swap Windows")
              (?c aw-copy-window "Duplicate the current window")
              (?v aw-split-window-horz "Split horizontally")
              (?s aw-split-window-vert "Split vertically")
              (?p aw-delete-window "Delete Window")
              (?x akirak/aw-replace-window "Replace window")
              (?m akirak/aw-mirror-window "Mirror window")
              ;; Unused.
              ;; (?k akirak/aw-quit-window "Quit window")
              (32 fwb-toggle-window-split)
              ;; tab-bar-mode.
              (?Q tab-bar-close-tab)
              (?R tab-bar-rename-tab)
              (?T tab-bar-new-tab)
              ;; Deprecated in favour of tab-bar-mode.
              ;; (?T tear-off-window)
              (?D delete-frame)
              (?F make-frame-command)
              (?? aw-show-dispatch-help)))

      (defun akirak/aw-quit-window (window)
        "Delete window WINDOW."
        (let ((frame (window-frame window)))
          (when (and (frame-live-p frame)
                     (not (eq frame (selected-frame))))
            (select-frame-set-input-focus (window-frame window)))
          (if (= 1 (length (window-list)))
              (progn
                (bury-buffer (window-buffer window))
                (delete-frame frame))
            (if (window-live-p window)
                (quit-window window)
              (error "Got a dead window %S" window)))))

      (defun akirak/aw-mirror-window (window)
        "Display the current window in WINDOW but keep the current focus."
        (let* ((buffer (current-buffer))
               (start (window-start))
               (cur-window (get-buffer-window buffer)))
          (set-window-buffer window buffer)
          (set-window-start window start)))

      (defun akirak/aw-replace-window (window)
        (let* ((buffer (current-buffer))
               (cur-window (get-buffer-window buffer)))
          (aw-switch-to-window window)
          (switch-to-buffer buffer)
          (delete-window cur-window)))
      (custom-theme-set-faces 'user
                              '(aw-leading-char-face
                                ((default
                                  :background "gray18" :foreground "tan"
                                  :height 250))))
      (advice-add 'aw-delete-window
                  :after
                  (defun akirak/ad-after-aw-delete-window (&rest _args)
                    (balance-windows)))
      (advice-add 'aw-delete-window
                  :around
                  (defun akirak/ad-around-aw-delete-window (origfun &rest args)
                    (let ((initial-window (selected-window)))
                      (prog1 (apply origfun args)
                        (when (window-live-p initial-window)
                          (select-window initial-window))))))))
#+end_src
*** COMMENT acm                                                                :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-09-28 Thu 14:38]
:END:

#+begin_src emacs-lisp
  ;; only installed alongside lsp-bridge
  (setup acm
    (:set acm-enable-doc t
          acm-enable-doc-markdown-render t
          acm-enable-search-file-words t
          acm-enable-search-sdcv-words nil
          acm-enable-telega nil
          acm-enable-tabnine nil
          acm-enable-yas t
          acm-enable-copilot nil
          acm-enable-codeium nil))
#+end_src
*** COMMENT adaptive-wrap                                               :visual:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 17:56]
:END:
#+begin_quote
Smart line-wrapping with wrap-prefix
#+end_quote

#+begin_src emacs-lisp
  (setup (:package adaptive-wrap))
#+end_src
*** COMMENT add-node-modules-path                                              :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-02-19 Sun 09:09]
:END:
#+begin_quote
Add node_modules to your exec-path
[[https://github.com/codesuki/add-node-modules-path]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package add-node-modules-path)
    (add-hook 'web-mode-hook #'add-node-modules-path)
    (add-hook 'typescript-ts-mode-hook #'add-node-modules-path))
#+end_src
*** COMMENT affe                           :completion:grep:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-28 Thu 05:52]
:END:
#+begin_quote
Asynchronous Fuzzy Finder for Emacs
#+end_quote

#+begin_src emacs-lisp
(setup (:package affe))
#+end_src
*** aggressive-indent                                   :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:26]
:END:
#+begin_quote
Minor mode to aggressively keep your code always indented
[[https://github.com/Malabarba/aggressive-indent-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package aggressive-indent)
    (:hook-into emacs-lisp-mode-hook
                dune-mode-hook))
#+end_src
*** COMMENT all-the-icons                               :UI:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:28]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons))
#+end_src
**** COMMENT all-the-icons-completion                     :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:29]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-completion)
    (with-eval-after-load 'marginalia
      (all-the-icons-completion-mode t)
      (add-hook 'marginalia-mode
                #'all-the-icons-completion-marginalia-setup)))
#+end_src
**** COMMENT all-the-icons-dired                          :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:30]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-dired)
    (:hook-into dired-mode))
#+end_src
*** anzu                                            :editing:regexp:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 21:00]
:END:
#+begin_quote
Show number of matches in mode-line while searching
[[https://github.com/emacsorphanage/anzu]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package anzu)
    (:with-mode global-anzu-mode
      (:hook-into after-init-hook))

    (:global [remap query-replace] #'anzu-query-replace
             [remap query-replace-regexp] #'anzu-query-replace-regexp))
#+end_src
*** apprentice                                                          :Elixir:
:PROPERTIES:
:CREATED_TIME: [2023-03-18 Sat 15:40]
:END:
#+begin_quote
Elixir tooling integration
[[https://github.com/Sasanidas/Apprentice]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package apprentice)
    (:hook-into elixir-ts-mode-hook)
    (:set apprentice-key-command-prefix (kbd "C-, ,"))
    (:when-loaded
      (when (require 'which-key nil t)
        (let ((prefix (key-description apprentice-key-command-prefix)))
          (pcase-dolist (`(,key ,replacement)
                         '(("m" "mix")
                           ("c" "compile")
                           ("e" "execute")
                           ("h" "help")
                           ("p" "project files")
                           ("i" "iex")
                           ("X" "hex")))
            (which-key-add-keymap-based-replacements
              apprentice-mode-map (concat prefix " " key) replacement)))))
    (:with-mode elixir-ts-mode
      (:mode-repl apprentice-iex-project-run))

    (:bind "C-c C-l" #'apprentice-iex-reload-module
           "C-c C-c" #'apprentice-iex-compile-this-buffer
           "C-c C-r" (defun akirak/apprentice-send-line-or-region (&optional arg)
                       (interactive "P")
                       (require 'whole-line-or-region)
                       (whole-line-or-region-wrap-beg-end
                        ;; #'apprentice-iex-send-region-and-go
                        #'apprentice-iex-send-region
                        (if (numberp arg)
                            arg
                          1)))
           ;; undefined
           ;; "C-c C-v" (defun akirak/apprentice-eval-line-or-region (&optional arg)
           ;;             (interactive "P")
           ;;             (require 'whole-line-or-region)
           ;;             (whole-line-or-region-wrap-modified-region
           ;;              #'apprentice-eval-region
           ;;              ;; #'apprentice-eval-print-region
           ;;              (if (numberp arg)
           ;;                  arg
           ;;                1)))
           "C-c C-q" #'apprentice-eval-close-popup)

    (:el-patch
      (el-patch-defun apprentice-iex-command (arg)
        (split-string-and-unquote
         (if (null arg) apprentice-iex-program-name
           (el-patch-swap
             (read-string "Command to run Elixir IEx: " (concat apprentice-iex-program-name arg))
             (concat apprentice-iex-program-name arg)))))))
#+end_src
*** auto-minor-mode
:PROPERTIES:
:CREATED_TIME: [2023-05-07 Sun 16:21]
:END:
#+begin_quote
Enable minor modes by file name and contents
[[https://github.com/joewreschnig/auto-minor-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package auto-minor-mode)
    (:require))
#+end_src
*** auto-yasnippet                                       :expansion:
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 15:39]
:END:
#+begin_quote
Quickly create disposable yasnippets
[[https://github.com/abo-abo/auto-yasnippet]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package auto-yasnippet)
    (:global "C-x r e" #'aya-expand
             "C-x r M-e" #'aya-expand-from-history
             "C-x r a" #'aya-create))
#+end_src
*** avy
:PROPERTIES:
:CREATED_TIME: [2022-02-25 Fri 19:10]
:END:
#+begin_quote
Jump to arbitrary positions in visible text and select text quickly.
[[https://github.com/abo-abo/avy]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package avy)
    (:global "C-'" #'avy-goto-char-timer
             "M-g z" #'avy-goto-char-in-line))
#+end_src
*** beancount                                     :@extra:beancount:
#+begin_quote
A major mode to edit Beancount input files.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package beancount)
    (:nixpkgs "beancount")

    ;; I don't like the default keybindings on C-c, so change the prefix.
    (:set beancount-mode-map-prefix (kbd akirak/mode-prefix-key))

    (:reformatters
     (bean-format :program "bean-format"))

    (:with-mode beancount-mode
      (:file-match "\\.beancount\\'" "\\.bean\\'")
      (:hook bean-format-on-save-mode
             flymake-bean-check-enable)

      (:when-loaded
        (:bind "C-c C-o" #'akirak-beancount-locate-account-transactions)
        (define-key beancount-mode-map
                    (vconcat beancount-mode-map-prefix [?d])
                    #'akirak-beancount-insert-date)

        (:hook
         (defun akirak/beancount-turn-on-outline-mode ()
           (outline-minor-mode t))))))
#+end_src
*** blamer                                                      :VC:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 17:48]
:END:
#+begin_quote
Show git blame info about current line
[[https://github.com/artawower/blamer.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package blamer)
    (:set blamer-max-lines 50
          blamer-max-commit-message-length 50)

    (define-key ctl-x-x-map (kbd "b") #'blamer-mode)
    (define-key help-map (kbd "M-g") #'blamer-show-commit-info))
#+end_src
*** bookmark-frecency
:PROPERTIES:
:CREATED_TIME: [2023-11-20 Mon 12:48]
:END:
#+begin_quote
Sort bookmarks by frecency
[[https://github.com/akirak/bookmark-frecency.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package bookmark-frecency)
    (:hook-into after-init-hook))
#+end_src
*** browse-at-remote
:PROPERTIES:
:CREATED_TIME: [2022-07-08 Fri 12:35]
:END:
#+begin_quote
Open github/gitlab/bitbucket/stash/gist/phab/sourcehut page from Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package browse-at-remote)
    (:global "<f12> g g" #'browse-at-remote
             "<f12> g w" #'browse-at-remote-kill))
#+end_src
*** COMMENT bufler                                         :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 22:51]
:END:

#+begin_src emacs-lisp
  (setup (:package bufler)
    (bufler-mode t)
    ;; Use it as a replacement for ibuffer
    (:global "C-x C-b" #'bufler))
#+end_src
*** COMMENT burly                                                              :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-28 Wed 23:59]
:END:
#+begin_quote
Save and restore frame/window configurations with buffers
[[https://github.com/alphapapa/burly.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package burly))
#+end_src

*** buttercup                      :Emacs__Lisp:testing:development:
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 18:14]
:END:
#+begin_quote
Behavior-Driven Emacs Lisp Testing
[[https://github.com/jorgenschaefer/emacs-buttercup]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package buttercup)
    (:with-hook emacs-lisp-mode-hook
      (:hook (defun akirak/buttercup-setup ()
               (when (and (buffer-file-name)
                          (string-match-p (rx (any "-/") "test" (?  "s") ".el" eol)
                                          (buffer-file-name)))
                 (buttercup-minor-mode t)))))

    (:when-loaded
      ;; Work around the duplicate lines issue.
      ;; See https://github.com/jorgenschaefer/emacs-buttercup/issues/181
      ;; (advice-add #'buttercup-reporter-interactive
      ;;             :before-while
      ;;             (defun akirak/ad-bf-reporter-interactive (event arg)
      ;;               (not (eq event `spec-started))))

      ;; (advice-add #'buttercup-colorize :filter-return #'xterm-color-filter)
      ))
#+end_src

*** cape                                                :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:17]
:END:
#+begin_quote
Completion At Point Extensions
#+end_quote

#+begin_src emacs-lisp
  (setup (:package cape)
    ;; This is a custom convention. You need to create a words file in the
    ;; directory for yourself.
    (:when-loaded
      (require 'xdg)
      (:set cape-dict-file (expand-file-name "dict/words" (xdg-data-home))))

    (:global "C-x r M-f" #'cape-file
             "C-x r M-l" #'cape-line
             "C-M-/" #'cape-dabbrev))
#+end_src
*** COMMENT codeium                                                 :completion:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-02-22 Wed 22:41]
:END:

#+begin_src emacs-lisp
  (setup (:package codeium)
    (add-to-list 'completion-at-point-functions #'codeium-completion-at-point))
#+end_src
*** COMMENT code-review                                                        :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-23 Fri 21:19]
:END:
#+begin_quote
Perform code review from Github, Gitlab, and Bitbucket Cloud
#+end_quote

#+begin_src emacs-lisp
(setup (:package code-review))
#+end_src
*** consult                                             :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:33]
:END:
#+begin_quote
Consulting completing-read
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult)
    (:with-mode consult-preview-at-point-mode
      (:hook completion-list-mode))

    ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    (:set consult-narrow-key "<"
          consult-project-root-function (defun akirak/consult-project-root ()
                                          (when-let (project (project-current))
                                            (project-root project))))

    (:when-loaded
      (:set consult-buffer-sources `(consult--source-project-buffer
                                     consult--source-project-recent-file
                                     ,@(when (require 'akirak-consult nil t)
                                         '(akirak-consult-source-help-buffer
                                           akirak-consult-source-indirect-buffer
                                           akirak-consult-source-narrowed-buffer
                                           akirak-consult-source-org-agenda-buffer
                                           akirak-consult-source-modified-buffer))
                                     consult--source-buffer
                                     consult--source-recent-file)
            ;; Use only relevant bookmark groups.
            consult-bookmark-narrow '((?f "File or directory" bookmark-default-handler)
                                      (?h "Help" help-bookmark-jump)
                                      (?i "Info" Info-bookmark-jump)
                                      ;; (?p "Picture" image-bookmark-jump)
                                      ;; (?d "Docview" doc-view-bookmark-jump)
                                      ;; (?m "Man" Man-bookmark-jump)
                                      (?w "Woman" woman-bookmark-jump)
                                      ;; (?g "Gnus" gnus-summary-bookmark-jump)
                                      ;; (?s "Eshell" eshell-bookmark-jump)
                                      (?e "Eww" eww-bookmark-jump)
                                      ;; (?v "VC Directory" vc-dir-bookmark-jump)

                                      ;; Non-default
                                      (?o "Org" org-bookmark-heading-jump)
                                      (?v "Org Placeholder" org-placeholder-view))
            consult-ripgrep-args (concat (eval (car (get 'consult-ripgrep-args 'standard-value)) t)
                                         ;; Show files in .github directory, for example.
                                         " --hidden --ignore-file=.gitignore --iglob=!.git")))

    (:global [remap switch-to-buffer] #'consult-buffer
             [remap bookmark-jump] #'consult-bookmark
             [remap yank-pop] #'consult-yank-pop
             "M-s o" #'consult-outline
             "C-S-s" #'consult-line
             "M-s l" #'consult-focus-lines
             "C-x /" #'consult-ripgrep)

    (:with-feature consult-imenu
      (:global "M-s i" #'consult-imenu
               [remap imenu] #'consult-imenu
               "M-s M-i" #'consult-imenu-multi))

    ;; (:with-feature consult-flymake
    ;;   (:global "M-s f" #'consult-flymake))

    (:with-feature consult-xref
      (:set xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)))
#+end_src
*** consult-ls-git
:PROPERTIES:
:CREATED_TIME: [2022-05-03 Tue 21:31]
:END:
#+begin_quote
Consult integration for git
[[https://github.com/rcj/consult-ls-git]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-ls-git)
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist
                   '(consult-ls-git-status . akirak-embark-git-file-map))))
#+end_src
*** consult-recoll
:PROPERTIES:
:CREATED_TIME: [2022-11-18 Fri 16:25]
:END:
#+begin_quote
Recoll queries using consult
#+end_quote

#+begin_src emacs-lisp
  (setup (:package consult-recoll)
    (:global "M-s M-c" #'consult-recoll)
    (:set consult-recoll-open-fn
          (defun akirak/consult-recoll-open-file (file &optional _page)
            (org-open-file file))

          consult-recoll-format-candidate
          (defun akirak/consult-recoll-format-candidate (title urln _mime)
            (concat title
                    (propertize (format " (%s)"
                                        (thread-last
                                          urln
                                          (file-name-directory)
                                          (string-remove-prefix "file://")
                                          (abbreviate-file-name)))
                                'face 'font-lock-doc-face)))))
#+end_src
*** copilot                                                     :@extra:copilot:
:PROPERTIES:
:CREATED_TIME: [2023-01-11 Wed 05:46]
:END:
#+begin_quote
An unofficial Copilot plugin for Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package copilot)
    (:nixpkgs "nodejs")
    (:bind [remap expand-abbrev] #'akirak-copilot-abbrev-or-complete
           ;; Remap repl-toggle in the minor mode map.
           "M-RET" #'akirak-copilot-accept-dwim
           "C-M-n" #'copilot-next-completion
           "C-M-p" #'copilot-previous-completion
           "M-F" #'copilot-accept-completion-by-word
           "M-E" #'copilot-accept-completion-by-line)
    (:when-loaded
      ;; Look up the command bound in global-map and use it as the fallback
      ;; command.
      (when-let* ((keys (where-is-internal #'akirak-copilot-accept-dwim
                                           copilot-mode-map))
                  (command (lookup-key global-map (car keys))))
        (setq akirak-copilot-accept-fallback command)))

    ;; Enable copilot if LSP (eglot) is turned on. This is directory-local.
    (dir-locals-set-class-variables
     'copilot-if-lsp
     '((nil . ((eval . (add-hook 'eglot-managed-mode-hook 'copilot-mode nil t))))))
    (:status personal
      ;; Enable copilot by setting the directory class.
      (dir-locals-set-directory-class "~/work2/foss/" 'copilot-if-lsp)))
#+end_src
*** corfu                                            :completion:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:19]
:END:
#+begin_quote
COmpletion in Region FUnction
#+end_quote

#+begin_src emacs-lisp
  (setup (:package corfu)
    (:with-mode (prog-mode text-mode comint-mode)
      (:hook corfu-mode))

    (:with-hook minibuffer-setup-hook
      (:hook
       (defun corfu-enable-in-minibuffer ()
         "Enable Corfu in the minibuffer if `completion-at-point' is bound."
         (when (where-is-internal #'completion-at-point (list (current-local-map)))
           (corfu-mode 1)))))

    (:with-mode (prog-mode text-mode)
      (:bind "M-/" #'completion-at-point))
    (:with-feature comint
      (:bind "M-/" #'completion-at-point)))
#+end_src
*** cue-mode
:PROPERTIES:
:CREATED_TIME: [2024-01-01 Mon 15:17]
:END:
#+begin_quote
Major mode for CUE language files
[[https://github.com/russell/cue-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package cue-mode)
    (:file-match "\\.cue\\'"))
#+end_src
*** dashboard
:PROPERTIES:
:CREATED_TIME: [2023-11-18 Sat 23:10]
:END:
#+begin_quote
A startup screen extracted from Spacemacs
[[https://github.com/emacs-dashboard/emacs-dashboard]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dashboard)
    (:set dashboard-center-content t
          dashboard-show-shortcuts t
          dashboard-set-init-info nil
          dashboard-set-footer nil
          dashboard-banner-logo-title nil
          dashboard-display-icons-p #'ignore
          dashboard-projects-backend 'project-el
          dashboard-item-shortcuts '((recents . "r")
                                     (bookmarks . "m")
                                     ;; Don't use p
                                     (projects . "j")
                                     (org-clock . "o")
                                     ;; Unused
                                     (agenda . "a")
                                     (registers . "e"))
          dashboard-items '((recents . 15)
                            (projects . 8)
                            (org-clock . 7)
                            (bookmarks . 10)))
    (:when-loaded
      (require 'akirak-dashboard)
      (add-to-list 'dashboard-item-generators
                   (cons 'org-clock
                         (defun akirak/dashboard-org-clock-insert (list-size)
                           (dashboard-insert-section
                            "Org Clock (unfinished todo items)"
                            (when (boundp 'org-clock-history)
                              (akirak-dashboard-org-clock-items list-size))
                            list-size
                            'org-clock
                            (dashboard-get-shortcut 'org-clock)
                            `(lambda (&rest _)
                               (require 'org-dog)
                               (with-current-buffer (org-dog-indirect-buffer
                                                     (org-element-property :hd-marker ',el))
                                 (run-hooks 'akirak-org-clock-open-hook)
                                 (pop-to-buffer (current-buffer))))
                            (akirak-dashboard-org-clock-format-item el))))))

    ;; I'm no longer an evil user. Prefer n/p over j/k.
    (:bind "n" 'dashboard-next-line
           "p" #'dashboard-previous-line)
    (:unbind "j" "k")

    (:global "C-z b" #'dashboard-open)

    (defun akirak/dashboard-init-on-startup ()
      (require 'dashboard)
      (dashboard-insert-startupify-lists)
      (add-hook 'server-after-make-frame-hook
                (defun akirak/server-dashboard-initialize ()
                  (unless (seq-find
                           (lambda (buf)
                             (buffer-local-value 'server-buffer-clients buf))
                           (buffer-list))
                    (dashboard-initialize))))))
#+end_src
*** COMMENT dash-docs                        :documentation:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-20 Wed 17:28]
:END:
#+begin_quote
Offline documentation browser using Dash docsets.
[[http://github.com/areina/helm-dash]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package dash-docs))
#+end_src
**** consult-dash
:PROPERTIES:
:CREATED_TIME: [2022-04-25 Mon 20:26]
:END:
#+begin_quote
Consult front-end for dash-docs
[[https://codeberg.org/ravi/consult-dash]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package consult-dash))
#+end_src
*** deadgrep                                                  :grep:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
fast, friendly searching with ripgrep
[[https://github.com/Wilfred/deadgrep]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package deadgrep)
    (:set deadgrep-display-buffer-function #'pop-to-buffer
          ;; Show hidden files as well
          deadgrep-extra-arguments '("--no-config"
                                     ;; Show files in .github directory, for example.
                                     "--hidden"
                                     "--ignore-file=.gitignore"
                                     "--iglob=!.git")))
#+end_src
*** devdocs                                              :reference:
:PROPERTIES:
:CREATED_TIME: [2022-08-28 Sun 13:31]
:END:
#+begin_quote
Emacs viewer for DevDocs
[[https://github.com/astoff/devdocs.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package devdocs)
    (define-key help-map (kbd "d") #'devdocs-lookup))
#+end_src
*** diff-hl
:PROPERTIES:
:CREATED_TIME: [2022-12-21 Wed 23:01]
:END:
#+begin_quote
Highlight uncommitted changes using VC
[[https://github.com/dgutov/diff-hl]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package diff-hl)
    (add-hook 'after-init-hook #'global-diff-hl-mode)
    (add-hook 'dired-mode-hook #'diff-hl-dired-mode)
    (:set diff-hl-command-prefix (kbd "C-c g")
          diff-hl-show-staged-changes t)

    ;; Prevent dispatch of repeat-mode.
    (defalias 'akirak/diff-hl-next-hunk #'diff-hl-next-hunk)
    (defalias 'akirak/diff-hl-previous-hunk #'diff-hl-previous-hunk)

    (:global "M-g j" #'akirak/diff-hl-next-hunk
             "M-g k" #'akirak/diff-hl-previous-hunk)

    (:when-loaded
      (define-key diff-hl-command-map "c" #'magit-commit)
      (defun akirak/diff-hl-after-navigation (orig &rest args)
        ;; (when (buffer-narrowed-p)
        ;;   (widen))
        (let ((pos (point)))
          (prog1 (apply orig args)
            (unless (eq pos (point))
              (when (derived-mode-p 'org-mode)
                (if (org-at-heading-p)
                    (org-fold-show-entry)
                  (org-fold-show-context)))))))

      (advice-add 'diff-hl-next-hunk
                  :around #'akirak/diff-hl-after-navigation)
      (advice-add 'diff-hl-previous-hunk
                  :around #'akirak/diff-hl-after-navigation)))
#+end_src
*** COMMENT dired-auto-readme                        :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-23 Sat 23:59]
:END:
#+begin_quote
Auto-display README files in Dired biffers
[[https://github.com/amno1/org-view-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-auto-readme)
    (:hook-into dired-mode))
#+end_src
*** dired-collapse                                           :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:44]
:END:
#+begin_quote
Collapse unique nested paths in dired listing
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-collapse))
#+end_src

I will manually turn on =dired-collapse-mode= when necessary.
*** dired-du
:PROPERTIES:
:CREATED_TIME: [2022-08-23 Tue 17:21]
:END:
#+begin_quote
Dired with recursive directory sizes
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-du))
#+end_src
*** dired-filter                                             :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:50]
:END:
#+begin_quote
Ibuffer-like filtering for dired
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-filter)
    (:hook-into dired-mode-hook)
    (:hook dired-filter-group-mode)

    (:set dired-omit-extensions nil)
    (:when-loaded
      (:set dired-filter-group-saved-groups
            `(("default" ,@(akirak-dired-filter-build-default-groups))))))
#+end_src
*** dired-hacks-utils                                        :dired:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:49]
:END:
#+begin_quote
Utilities and helpers for dired-hacks collection
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dired-hacks-utils)
    (:with-map dired-mode-map
      ;; Remap 'n' and 'p'
      "n" 'dired-hacks-next-file
      "p" 'dired-hacks-previous-file))
#+end_src
*** COMMENT dired-hide-dotfiles                      :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 19:08]
:END:
#+begin_quote
Hide dotfiles in dired
[[https://github.com/mattiasb/dired-hide-dotfiles]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package dired-hide-dotfiles))
#+end_src
*** COMMENT dired-k                                  :dired:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 18:45]
:END:

#+begin_src emacs-lisp
  (setup (:package dired-k)
    (:set dired-k-style 'git)

    (:with-hook dired-k-no-revert
      (:hook-into dired-after-readin-hook))

    ;; Prevent from highlighting by file attributes.
    ;; Just add git status
    ;; (defun akirak/ad-override-dired-k--highlight-by-file-attribyte ()
    ;;   nil)
    ;; (advice-add #'dired-k--highlight-by-file-attribyte
    ;;             :override
    ;;             #'akirak/ad-override-dired-k--highlight-by-file-attribyte)
    )
#+end_src
*** dired-x
#+begin_src elisp
  (setup dired-x
    (:with-map dired-mode-map
      (:unbind "C-x M-o")))
#+end_src
*** docker
:PROPERTIES:
:CREATED_TIME: [2023-05-16 Tue 11:09]
:END:
#+begin_quote
Interface to Docker
[[https://github.com/Silex/docker.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package docker)
    (:global "<f12> k k" #'docker-containers
             "<f12> k i" #'docker-images
             "<f12> k v" #'docker-volumes
             "<f12> k n" #'docker-networks))
#+end_src
*** docopt
:PROPERTIES:
:CREATED_TIME: [2022-12-14 Wed 18:22]
:END:
#+begin_quote
A Docopt implementation in Elisp
#+end_quote

#+begin_src emacs-lisp
(setup (:package docopt))
#+end_src
*** COMMENT dogears                                                            :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-28 Wed 23:59]
:END:
#+begin_quote
Never lose your place again
[[https://github.com/alphapapa/dogears.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dogears)
    (:hook-into after-init-hook)

    (defvar dogears-mode-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "C-z") #'dogears-remember)
        (define-key map (kbd "M-g M-z") #'dogears-go)
        (define-key map (kbd "<C-left>") #'dogears-back)
        (define-key map (kbd "<C-right>") #'dogears-forward)
        map))

    (add-hook 'dogears-ignore-places-functions
              (defun akirak/dogears-org-capture-p ()
                (bound-and-true-p org-capture-mode)))

    (add-hook 'dogears-hooks 'org-capture-after-finalize-hook)

    (advice-add 'dogears-remember
                :around
                (defun akirak/ad-around-dogears-remember (orig &rest args)
                  ;; Some of my Org files must not contain IDs, so this option
                  ;; should be set nil.
                  (let ((org-bookmark-heading-make-ids nil))
                    (apply orig args)))))
#+end_src
*** dotenv-mode
:PROPERTIES:
:CREATED_TIME: [2022-09-04 Sun 23:59]
:END:
#+begin_quote
Major mode for .env files
[[https://github.com/preetpalS/emacs-dotenv-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dotenv-mode)
    (:file-match "\\.env\\(?:\\.[a-z]+\\)?\\'"))
#+end_src
*** duckduckgo                                              :search:
:PROPERTIES:
:CREATED_TIME: [2022-03-17 Thu 23:59]
:END:
#+begin_quote
Run DuckDuckGo search
[[https://github.com/akirak/duckduckgo.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package duckduckgo)
    ;; Replace `eww-search-words'
    (:global "M-s M-w" #'duckduckgo))
#+end_src
*** dumb-jump                                           :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Jump to definition for 50+ languages without configuration
[[https://github.com/jacktasia/dumb-jump]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dumb-jump)
    (:set dumb-jump-selector #'completing-read)

    ;; NOTE: The activation function should be added to the end
    ;; of the backend function. Is this really sufficient?
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

    (add-hook 'emacs-lisp-mode-hook
              ;; Make dumb-jump take precedence over the builtin backend,
              ;; to search the project code whenever possible.
              (defun akirak/elisp-setup-dumb-jump ()
                (add-hook 'xref-backend-functions
                          #'dumb-jump-xref-activate
                          80 'local))))
#+end_src
*** dune                                                    :OCaml:@extra:fstar:
:PROPERTIES:
:CREATED_TIME: [2023-01-10 Tue 17:26]
:END:
#+begin_quote
Integration with the dune build system
[[https://github.com/ocaml/dune]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package dune)
    (:mode-repl akirak/utop-project))
#+end_src
*** eat
:PROPERTIES:
:CREATED_TIME: [2023-10-09 Mon 13:39]
:END:
#+begin_quote
Emulate A Terminal, in a region, in a buffer and in Eshell
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eat)
    (:set eat-kill-buffer-on-exit t)

    (:with-map eat-semi-char-mode-map
      (:unbind "M-:" "M-g" "M-s" "C-z" "M-o")))
#+end_src
*** ediprolog                                                           :Prolog:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 19:24]
:END:
#+begin_quote
Emacs Does Interactive Prolog
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ediprolog)
    ;; Set `ediprolog-system' and `ediprolog-program' depending on the system

    (:with-feature prolog
      ;; In other modes, this key is bound to repl.
      (:bind "<C-return>" #'ediprolog-dwim)))
#+end_src

[[https://lib.rs/crates/scryer-prolog][scryer-prolog]] is the bleeding-edge implementation of Prolog (like GHC to Haskell), and it is installed with this package.
*** editorconfig                                        :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
EditorConfig Emacs Plugin
[[https://github.com/editorconfig/editorconfig-emacs#readme]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package editorconfig))
#+end_src

It is required only in specific projects, so I won't turn on the mode by default.
*** eglot                                                      :LSP:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
Client for Language Server Protocol (LSP) servers
[[https://github.com/joaotavora/eglot]]
#+end_quote

#+begin_src emacs-lisp
  (setup eglot

    ;; It depends on the project whether it is recommended to turn on LSP.
    ;;
    ;; (:with-mode eglot-ensure
    ;;   (:hook-into haskell-mode-hook
    ;;               rust-mode-hook))

    (:set eglot-confirm-server-initiated-edits nil)

    (:bind akirak/mode-prefix-key #'akirak/eglot-prefix-map)

    (:when-loaded
      (define-prefix-command 'akirak/eglot-prefix-map)
      (:with-map akirak/eglot-prefix-map
        (:bind "a" #'eglot-code-actions
               "i" #'eglot-code-action-inline
               "q" #'eglot-code-action-quickfix
               "o" #'eglot-code-action-organize-imports
               "R" #'eglot-reconnect
               "r" #'eglot-rename))

      (add-to-list 'eglot-server-programs
                   '(lean4-mode . ("lake" "serve")))
      (add-to-list 'eglot-server-programs
                   '(svelte-mode . ("svelteserver" "--stdio")))
      (add-to-list 'eglot-server-programs
                   '(hcl-mode . ("terraform-lsp" "--stdio")))
      (add-to-list 'eglot-server-programs
                   '(coq-mode . ("coq-lsp")))
      (add-to-list 'eglot-server-programs
                   `((elixir-ts-mode heex-ts-mode elixir-mode) .
                     ,(eglot-alternatives
                       '(("lexical")
                         ("nextls" "--stdio=true"
                          :initializationOptions
                          (:experimental (:completions (:enable t))))
                         ("elixir-ls")))))
      (add-to-list 'eglot-server-programs
                   `(web-mode . ,(eglot-alternatives
                                  '(("astro-ls" "--stdio")))))

      (put 'tsx-mode 'eglot-language-id "typescriptreact")
      (put 'lean4-mode 'eglot-language-id "lean")

      (add-hook 'eglot-managed-mode-hook #'akirak/eglot-setup-buffer)

      (defun akirak/eglot-setup-buffer ()
        (if (eglot-managed-p)
            (add-hook 'before-save-hook #'eglot-format-buffer nil t)
          (remove-hook 'before-save-hook #'eglot-format-buffer t)))))
#+end_src
*** eldoc-eval                                               :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 12:31]
:END:
#+begin_quote
Enable eldoc support when minibuffer is in use.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eldoc-eval)
    (:with-mode eldoc-in-minibuffer-mode
      (:hook-into after-init-hook)))
#+end_src

I use this package mostly because it uses =pp-eval-expression= for printing the result, but it also has some other nice features, and it works flawlessly.
*** COMMENT electric-operator                   :formatting:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Automatically add spaces around operators
[[https://github.com/davidshepherd7/electric-operator]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package electric-operator)
    (:hook-into python-mode
                sql-mode
                js-mode
                c-mode
                java-mode
                rust-mode))
#+end_src
*** elx                            :Emacs__Lisp:development:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:
#+begin_quote
Extract information from Emacs Lisp libraries
#+end_quote

#+begin_src emacs-lisp
(setup (:package elx))
#+end_src
*** COMMENT emacsql-sqlite                                             :library:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 13:46]
:END:
#+begin_quote
EmacSQL back-end for SQLite
#+end_quote

#+begin_src emacs-lisp
  (setup (:package emacsql-sqlite)
    (:nixpkgs "sqlite")
    (:when-loaded
      (:set emacsql-sqlite-executable (executable-find "sqlite3"))))
#+end_src
*** embark
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:53]
:END:
#+begin_quote
Conveniently act on minibuffer completions
#+end_quote

#+begin_src emacs-lisp
  (setup (:package embark)
    ;; MAYBE: Bind "C-;" or something to embark-dwim
    (:global "C-." #'embark-act)

    (:when-loaded
      (define-key minibuffer-mode-map (kbd "C-,") #'embark-become)
      (when (require 'akirak-embark nil t)
        (akirak-embark-setup))))
#+end_src

Some notes:

- =embark-next/previous-symbol= could replace =symbol-overlay= package.
- =embark-export= can be a useful alternative to =tabulated-list=.
- Binding =sudo-find-file= command may be useful, but I haven't done it yet.

The following resources are useful:

- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]
*** embark-consult
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 18:02]
:END:
#+begin_quote
Consult integration for Embark
#+end_quote

#+begin_src emacs-lisp
  (setup (:package embark-consult)

    (with-eval-after-load 'consult
      (require 'embark-consult))
    (with-eval-after-load 'embark
      (require 'embark-consult))

    (:with-mode embark-collect-mode
      (:hook consult-preview-at-point-mode)))
#+end_src
*** embark-org
:PROPERTIES:
:CREATED_TIME: [2023-03-25 Sat 23:59]
:END:

#+begin_src emacs-lisp
  (setup embark-org
    (with-eval-after-load 'org
      (when (require 'akirak-embark nil t)
        (akirak-embark-setup-org))))
#+end_src
*** COMMENT ement                                                       :social:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-12-30 Fri 12:44]
:END:
#+begin_quote
Matrix client
[[https://github.com/alphapapa/ement.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package ement))
#+end_src
*** COMMENT engine-mode                                    :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-07-18 Mon 12:32]
:END:
#+begin_quote
Define and query search engines from within Emacs.
[[https://github.com/hrs/engine-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package engine-mode))
#+end_src
*** envrc                                                   :direnv:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
Support for `direnv' that operates buffer-locally
#+end_quote

#+begin_src emacs-lisp
  (setup (:package envrc)
    (:with-mode envrc-global-mode
      (:hook-into after-init-hook)))
#+end_src
*** epkg                                                     :Emacs:
:PROPERTIES:
:CREATED_TIME: [2022-02-19 Sat 14:36]
:END:
#+begin_quote
Browse the Emacsmirror package database
#+end_quote

#+begin_src emacs-lisp
  (setup (:package epkg)
    (:set epkg-database-connector 'sqlite-builtin))
#+end_src
**** epkg-marginalia                             :Emacs:completion:
:PROPERTIES:
:CREATED_TIME: [2022-03-27 Sun 18:16]
:END:
#+begin_quote
Show Epkg information in completion annotations
#+end_quote

#+begin_src emacs-lisp
  (setup (:package epkg-marginalia)
    (with-eval-after-load 'marginalia
      (cl-pushnew 'epkg-marginalia-annotate-package
                  (alist-get 'package marginalia-annotator-registry))))
#+end_src
*** erlang                                                         :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-12-03 Sat 19:57]
:END:
#+begin_quote
Major modes for editing and running Erlang
#+end_quote

#+begin_src emacs-lisp
(setup (:package erlang))
#+end_src
*** COMMENT eros                                       :Emacs__Lisp:development:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:05]
:END:
#+begin_quote
Evaluation Result OverlayS for Emacs Lisp
[[https://github.com/xiongtx/eros]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package eros)
    (:hook-into emacs-lisp-mode))
#+end_src
*** COMMENT esup                         :startup:profiling:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:44]
:END:
#+begin_quote
The Emacs StartUp Profiler (ESUP)
[[https://github.com/jschaf/esup]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package esup))
#+end_src
*** COMMENT evil-nerd-commenter                    :editing:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:26]
:END:
#+begin_quote
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
[[http://github.com/redguardtoo/evil-nerd-commenter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package evil-nerd-commenter)
    (:global "M-;" #'evilnc-comment-or-uncomment-lines
             ;; "C-c p" #'evilnc-comment-or-uncomment-paragraphs
             ))
#+end_src
*** exec-path-from-shell
:PROPERTIES:
:CREATED_TIME: [2023-03-14 Tue 15:54]
:END:
#+begin_quote
Get environment variables such as $PATH from the shell
[[https://github.com/purcell/exec-path-from-shell]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package exec-path-from-shell)
    (when (and (or window-system
                   (daemonp))
               (not (equal akirak/os-id "nixos")))
      (require 'exec-path-from-shell)
      (unless (eq system-type 'darwin)
        (push "XDG_CONFIG_HOME" exec-path-from-shell-variables)
        (push "XDG_CACHE_HOME" exec-path-from-shell-variables)
        (push "XDG_DATA_HOME" exec-path-from-shell-variables))
      (exec-path-from-shell-initialize)))
#+end_src
*** COMMENT fancy-dabbrev                                           :completion:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:24]
:END:
#+begin_quote
Like dabbrev-expand with preview and popup menu
[[https://github.com/jrosdahl/fancy-dabbrev]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package fancy-dabbrev)
    ;; Useful for lisp
    (:set fancy-dabbrev-preview-context 'before-non-word
          fancy-dabbrev-expansion-context 'after-symbol)

    (defvar fancy-dabbrev-lispy-self-ins-cmds nil)
    (add-hook 'lispy-mode-hook
              (defun fancy-dabbrev-lispy-setup ()
                (let ((sym (make-variable-buffer-local 'fancy-dabbrev-self-insert-commands)))
                  (if fancy-dabbrev-lispy-self-ins-cmds
                      (set sym fancy-dabbrev-lispy-self-ins-cmds)
                    (dolist (key (number-sequence 33 ?z))
                      (add-to-list sym (key-binding (vector key))))
                    (setq fancy-dabbrev-lispy-self-ins-cmds (symbol-value sym))))))

    (:when-loaded
      (add-to-list 'fancy-dabbrev-self-insert-commands
                   'org-self-insert-command))

    (defcustom fancy-dabbrev-expansion-key "C-e"
      ""
      :type 'string)
    (defun fancy-dabbrev-remap (map)
      (let* ((mode-cmd (keymap-lookup map fancy-dabbrev-expansion-key))
             (remapped-cmd (or mode-cmd
                               (with-temp-buffer
                                 (keymap-lookup global-map fancy-dabbrev-expansion-key))))
             (fallback-cmd (or mode-cmd
                               (command-remapping remapped-cmd nil map)))
             (wrapper-cmd (intern (concat "fancy-dabbrev-expand-or-" (symbol-name fallback-cmd)))))
        (fset wrapper-cmd
              `(lambda ()
                 (interactive)
                 (if (memq last-command fancy-dabbrev-self-insert-commands)
                     (let ((fancy-dabbrev-indent-command ',fallback-cmd))
                       (fancy-dabbrev-expand-or-indent))
                   (call-interactively ',fallback-cmd))))
        (define-key map (vector 'remap remapped-cmd) wrapper-cmd)))

    (with-eval-after-load 'org-keys
      (fancy-dabbrev-remap org-mode-map))
    (with-eval-after-load 'lispy
      (fancy-dabbrev-remap lispy-mode-map)))
#+end_src
*** fanyi                                               :dictionary:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 23:59]
:END:
#+begin_quote
Not only English-Chinese translator
[[https://github.com/condy0919/fanyi.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package fanyi)
    (:set fanyi-providers '(fanyi-longman-provider
                            fanyi-etymon-provider))
    (with-eval-after-load 'org
      (add-to-list 'org-modules 'ol-fanyi))
    (:when-loaded
      (require 'fanyi-longman)
      (require 'fanyi-etymon))
    (define-key help-map (kbd "M-d") #'fanyi-dwim)

    (add-hook 'akirak-unknown-default-text-hook
              (defun akirak-unknown-fanyi-current-word ()
                (when (eq major-mode 'fanyi-mode)
                  fanyi-current-word))))
#+end_src

You should also load ol-fanyi library to enable fanyi link type.
See modules.
*** flycheck                                                   :lsp_mode:@extra:
:PROPERTIES:
:CREATED_TIME: [2023-01-11 Wed 22:53]
:END:
#+begin_quote
On-the-fly syntax checking
[[http://www.flycheck.org]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package flycheck))
#+end_src
*** flymake-eslint
:PROPERTIES:
:CREATED_TIME: [2022-07-01 Fri 23:59]
:END:
#+begin_quote
A Flymake backend for Javascript using eslint
[[https://github.com/orzechowskid/flymake-eslint]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flymake-eslint)
    (:set flymake-eslint-defer-binary-check t))
#+end_src
*** flymake-shellcheck
:PROPERTIES:
:CREATED_TIME: [2023-11-05 Sun 19:02]
:END:
#+begin_quote
A bash/sh Flymake backend powered by ShellCheck
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flymake-shellcheck)
    (:nixpkgs "shellcheck"))
#+end_src
*** COMMENT flyspell-correct                                                   :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:
#+begin_quote
Correcting words with flyspell via custom interface
[[https://github.com/d12frosted/flyspell-correct]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flyspell-correct)
    (with-eval-after-load "flyspell"
      (define-key flyspell-mode-map (kbd "C-M-;") #'flyspell-correct-wrapper)))
#+end_src
*** COMMENT flyspell-correct-avy-menu                                          :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-09-03 Sat 23:59]
:END:
#+begin_quote
Correcting words with flyspell via avy-menu interface
[[https://github.com/d12frosted/flyspell-correct]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package flyspell-correct-avy-menu)
    (with-eval-after-load "flyspell-correct"
      (require 'flyspell-correct-avy-menu)))
#+end_src
*** COMMENT forge                                                   :VC:project:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 13:22]
:END:
#+begin_quote
Access Git forges from Magit
#+end_quote

#+begin_src emacs-lisp
(setup (:package forge))
#+end_src
*** fstar-mode                                                    :@extra:fstar:
:PROPERTIES:
:CREATED_TIME: [2023-01-09 Mon 23:59]
:END:
#+begin_quote
Support for F* programming
[[https://github.com/FStarLang/fstar-mode.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package fstar-mode)
    (:file-match "\\.fst\\'")
    (:nixpkgs "fstar" "z3" "gnumake"))
#+end_src
*** fwb-cmds                                                :window:
:PROPERTIES:
:CREATED_TIME: [2022-03-08 Tue 16:02]
:END:
#+begin_quote
misc frame, window and buffer commands
#+end_quote

#+begin_src emacs-lisp
(setup (:package fwb-cmds))
#+end_src

I need this package for =fwb-toggle-window-split= command.
*** COMMENT ghelp                                        :reference:development:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:45]
:END:
#+begin_quote
Generic help
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ghelp)
    (:global "<f1> ." #'ghelp-describe-at-point
             [remap describe-symbol] #'ghelp-describe)

    ;; Temporary workaround
    (autoload 'ghelp-describe-at-point "ghelp"))
#+end_src
*** COMMENT ghelp-eglot                                                        :ARCHIVE:
#+begin_quote
Ghelp+Eglot
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ghelp-eglot))
#+end_src
*** COMMENT ghelp-helpful                                                      :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:16]
:END:
#+begin_quote
Ghelp+Helpful
#+end_quote

#+begin_src emacs-lisp
(setup (:package ghelp-helpful))
#+end_src
*** COMMENT gif-screencast                                   :screen__recording:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:38]
:END:
#+begin_quote
One-frame-per-action GIF recording
[[https://gitlab.com/ambrevar/emacs-gif-screencast]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gif-screencast)

    ;; TODO: Maybe use flameshot for creating screenshot on Wayland
    (:nixpkgs "gifsicle" "scrot"
              "graphicsmagick"
              "graphicsmagick-imagemagick-compat"))
#+end_src

*** git-attr                                                 :files:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Git attributes of buffer file
[[https://github.com/arnested/emacs-git-attr]]
#+end_quote

#+begin_quote
Make vendored and generated files read only.
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-attr)
    (add-hook 'find-file-hook #'git-attr-linguist))
#+end_src
*** git-auto-commit-mode                                        :VC:
:PROPERTIES:
:CREATED_TIME: [2022-03-26 Sat 20:33]
:END:
#+begin_quote
Emacs Minor mode to automatically commit and push
[[https://github.com/ryuslash/git-auto-commit-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-auto-commit-mode)
    (:set gac-silent-message-p t
          gac-default-message #'akirak/git-auto-commit-message)

    (defcustom akirak/git-auto-commit-directory-list nil
      "List of directories in which `git-auto-commit-mode' is turned on."
      :type '(repeat directory))

    (with-eval-after-load 'files
      (dir-locals-set-class-variables
       'git-auto-commit
       '((nil . ((eval . (git-auto-commit-mode t))
                 (gac-debounce-interval . 300)))))
      (dolist (dir akirak/git-auto-commit-directory-list)
        (dir-locals-set-directory-class dir 'git-auto-commit)))

    (defun akirak/git-auto-commit-enable-for-project ()
      "Enable `git-auto-commit-mode' in the directory."
      (interactive)
      (if-let (dir (abbreviate-file-name (project-root (project-current))))
          (progn
            (customize-push-and-save 'akirak/git-auto-commit-directory-list
                                     (list dir))
            (dir-locals-set-directory-class dir 'git-auto-commit
                                            (current-time))
            (let ((expanded-dir (expand-file-name (file-name-as-directory dir))))
              (dolist (buffer (buffer-list))
                (when-let (file (buffer-file-name buffer))
                  (when (string-prefix-p expanded-dir file)
                    (git-auto-commit-mode t))))))
        (user-error "No project")))

    (defun akirak/git-auto-commit-message (filename)
      (when-let* ((pr (project-current nil (file-name-directory filename)))
                  (root (project-root pr)))
        (thread-last
          (if (org-clocking-p)
              (let* ((clocking-file (buffer-file-name (org-base-buffer
                                                       (marker-buffer
                                                        org-clock-marker))))
                     (category (file-name-base clocking-file)))
                (cond
                 ((string-prefix-p "~/work/" root)
                  (org-link-display-format org-clock-current-task))
                 ((string-prefix-p "~/work2/" root)
                  (org-link-display-format org-clock-current-task))
                 ((string-prefix-p (expand-file-name root)
                                   clocking-file)
                  (format "%s: %s\n\n%s"
                          category
                          (org-link-display-format org-clock-current-task)
                          ;; By using the link format of Org, it will enable the
                          ;; user to navigate to the referenced entry.
                          (org-link-make-string
                           (concat "id:"
                                   (with-current-buffer (marker-buffer org-clock-marker)
                                     (org-with-wide-buffer
                                      (goto-char org-clock-marker)
                                      (org-id-get-create)))))))
                 (t
                  "!Working on a task in another repository")))
            (concat "Modified " (file-relative-name filename root)))
          ;; Add a prefix to indicate it is a machine commit
          (concat "(auto) "))))

    (with-eval-after-load 'org-clock
      (add-hook 'org-clock-out-hook
                (defun akirak/gac-org-clock-out ()
                  "Create an auto commit after `org-clock-out'."
                  (when (and (bound-and-true-p git-auto-commit-mode)
                             ;; If the entry has at least one auto commit
                             (> (org-clock-sum-current-item
                                 (- (float-time)
                                    gac-debounce-interval
                                    60))
                                0))
                    ;; I often refile the clocked entry immediately after clocking
                    ;; out from it, so rather than instantly creating a commit,
                    ;; defer it.
                    (when-let* ((pr (project-current))
                                (root (project-root pr)))
                      (if (file-directory-p root)
                          (run-with-timer
                           20 nil
                           `(lambda ()
                              (let ((default-directory ,root))
                                (save-some-buffers t (save-some-buffers-root))
                                (unless (zerop (call-process "git" nil nil nil
                                                             ;; Reuse the message
                                                             "commit" "-C" "HEAD"
                                                             "-a"))
                                  (message "Git auto commit failed in %s"
                                           default-directory)))))
                        (message "Directory %s does not exist" root))))))))
#+end_src

A recommended way to turn on automatic commits is to define local variables in =.dir-locals.el=, e.g.:

#+begin_src emacs-lisp :tangle no
  ((org-mode . ((gac-debounce-interval . 180)
                (eval . (git-auto-commit-mode t)))))
#+end_src
*** git-commit
:PROPERTIES:
:CREATED_TIME: [2022-10-06 Thu 18:21]
:END:
#+begin_quote
Edit Git commit messages
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-commit))
#+end_src
*** COMMENT git-gutter                                                      :VC:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-26 Sat 19:08]
:END:
#+begin_quote
Port of Sublime Text plugin GitGutter
[[https://github.com/emacsorphanage/git-gutter]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-gutter)
    (add-hook 'after-init-hook #'global-git-gutter-mode)

    (define-prefix-command 'akirak/git-gutter-map)

    ;; I don't want the original commands bound on other maps to repeat.
    (defalias 'akirak/git-gutter-next-hunk #'git-gutter:next-hunk)
    (defalias 'akirak/git-gutter-previous-hunk #'git-gutter:previous-hunk)

    (pcase-dolist (`(,key ,command)
                   '(("n" akirak/git-gutter-next-hunk)
                     ("p" akirak/git-gutter-previous-hunk)
                     ("s" git-gutter:stage-hunk)
                     ("-" git-gutter:revert-hunk)
                     ("o" git-gutter:popup-hunk)
                     ("g" git-gutter)))
      (define-key akirak/git-gutter-map key command)
      (put command 'repeat-map 'akirak/git-gutter-map))

    (define-key akirak/git-gutter-map "q" #'akirak/git-gutter-close)

    (defun akirak/git-gutter-close ()
      "Close the pop-up window of git-gutter."
      (interactive)
      (when-let (window (git-gutter:popup-buffer-window))
        (quit-window t window)))

    (:global "C-c g" #'akirak/git-gutter-map
             "M-g j" #'git-gutter:next-hunk
             "M-g k" #'git-gutter:previous-hunk)

    (:when-loaded
      (defun akirak/git-gutter-follow-up-navigation (orig &rest args)
        (when (buffer-narrowed-p)
          (widen))
        (let ((pos (point)))
          (prog1 (apply orig args)
            (unless (eq pos (point))
              (when (derived-mode-p 'org-mode)
                (org-show-context))))))

      (advice-add 'git-gutter:next-hunk
                  :around #'akirak/git-gutter-follow-up-navigation)
      (advice-add 'git-gutter:previous-hunk
                  :around #'akirak/git-gutter-follow-up-navigation)))
#+end_src
*** github-linguist
:PROPERTIES:
:CREATED_TIME: [2022-02-04 Fri 19:15]
:END:
#+begin_quote
Run GitHub Linguist on projects to collect information
[[https://github.com/akirak/github-linguist.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package github-linguist)
    (:nixpkgs "github-linguist")
    (:set github-linguist-executable "github-linguist"))
#+end_src
*** git-identity                                                    :VC:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 15:24]
:END:
#+begin_quote
Identity management for (ma)git
[[https://github.com/akirak/git-identity.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-identity)
    (:with-feature magit
      (:when-loaded
        ;; (git-identity-magit-mode 1)
        (:with-map magit-status-mode-map
          (:bind "I" #'git-identity-info))))

    (cl-defmacro akirak/git-identity-add (address &rest args)
      "Add a new entry to the identity list, avoiding duplicates.

  This macro should be used in extra init files which should be kept private."
      (declare (indent 1))
      `(let ((cell (assoc ,address git-identity-list)))
         (if cell
             (setcdr cell (quote ,args))
           (push (cons ,address (quote ,args))
                 git-identity-list)))))
#+end_src
*** git-modes                                        :VC:major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Major modes for editing Git configuration files
#+end_quote

#+begin_src emacs-lisp
  (setup (:package git-modes)
    (:with-mode gitattributes-mode)
    (:with-mode gitconfig-mode)
    (:with-mode gitignore-mode
      (:file-match "/\\.dockerignore\\'")))
#+end_src
*** COMMENT gleam-mode                                                         :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 11:53]
:END:
#+begin_quote
Major mode for Gleam
[[https://github.com/gleam-lang/gleam-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gleam-mode)
    (:file-match "\\.gleam\\'"))
#+end_src
*** go-translate                                                   :translation:
:PROPERTIES:
:CREATED_TIME: [2022-04-02 Sat 23:59]
:END:
#+begin_quote
Translation framework supports multiple engines such as Google/Bing/DeepL
[[https://github.com/lorniu/go-translate]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package go-translate)
    (:set gts-translate-list '(("ja" "en")
                               ("zh" "en"))))
#+end_src
*** gptel
:PROPERTIES:
:CREATED_TIME: [2023-03-20 Mon 23:59]
:END:
#+begin_quote
Interact with ChatGPT or other LLMs
[[https://github.com/karthink/gptel]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gptel)
    (:global "C-c p" #'gptel-send
             "<f12> a g" #'gptel
             "<f12> a C-g" #'gptel-abort)
    (:when-loaded
      (fset 'gptel--update-header-line #'ignore))

    (add-hook 'org-mode-hook
              (defun akirak/org-dog-setup-gpt-system ()
                (when-let* ((obj (org-dog-buffer-object))
                            (title (or (org-dog-file-title obj)
                                       (thread-first
                                         (file-name-base (oref obj absolute))
                                         (split-string "-")
                                         (string-join " "))))
                            (msg (pcase (oref obj relative)
                                   ;; System messages are based on examples in
                                   ;; `gptel-directives'.
                                   ((rx bos "programming/")
                                    (format "You are a large language model and\
   a programmer experienced in %s. Respond concisely."
                                            (or title
                                                (file-name-base (oref obj relative)))))
                                   ((and (rx bos "technology/")
                                         (guard title))
                                    (format "You are a large language model and\
   an engineer experienced in %s. Respond concisely." title))
                                   ((and (rx bos "languages/"
                                             (group (+ (not (any "/"))))
                                             (any "/.")))
                                    (format "You are a large language model and\
   an interpreter who are good at %s. Respond concisely."
                                            (match-string 1 (oref obj relative)))))))
                  ;; In case gptel.el has not been loaded yet, use
                  ;; `setq-local' to ensure it is set as a local variable.
                  (setq-local gptel--system-message msg)))))
#+end_src
*** graphql-mode                                               :web:
:PROPERTIES:
:CREATED_TIME: [2022-03-20 Sun 23:59]
:END:
#+begin_quote
Major mode for editing GraphQL schemas
#+end_quote

#+begin_src emacs-lisp
  (setup (:package graphql-mode)
    (:file-match "\\.gql\\'"))
#+end_src
*** graphviz-dot-mode
:PROPERTIES:
:CREATED_TIME: [2022-03-11 Fri 22:02]
:END:
#+begin_quote
Mode for the dot-language used by graphviz (att).
#+end_quote

#+begin_src emacs-lisp
  (setup (:package graphviz-dot-mode)
    (:nixpkgs "graphviz")
    (:file-match "\\.dot\\'"))
#+end_src
*** guess-language
:PROPERTIES:
:CREATED_TIME: [2022-06-04 Sat 15:05]
:END:
#+begin_quote
Robust automatic language detection
[[https://github.com/tmalsburg/guess-language.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package guess-language))
#+end_src
*** COMMENT haskell-mode                                           :major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-23 Sun 23:59]
:END:
#+begin_quote
A Haskell editing mode
[[https://github.com/haskell/haskell-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package haskell-mode)
    (:file-match "\\.hs\\'")
    (:with-mode haskell-cabal-mode
      (:file-match "\\.cabal\\'"))

    (:mode-repl haskell-interactive-bring)
    (:bind "C-c C-p" #'haskell-process-cabal
           "C-c C-m" #'haskell-compile
           "C-c C-g" #'haskell-session-change-target
           "C-c C-h" #'haskell-hoogle)
    (:hook interactive-haskell-mode
           haskell-auto-insert-module-template)

    (:reformatters
     (ormolu :program "ormolu"))

    ;; (:compilation-error
    ;;  ;; path:67:23-45:
    ;;  (hlint "^\\([/[:alnum:]][./[:alnum:]]*\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
    ;;         1 2 3 (4 . 4)))

    ;; Currently unused.
    (defun akirak/haskell-module-name (&optional filename)
      (let* ((filename (or filename (buffer-file-name)))
             (project (project-current nil (file-name-directory filename)))
             (root (if project
                       (project-root project)
                     "~"))
             (relative (file-relative-name
                        (file-name-sans-extension filename)
                        root))
             (segments (split-string relative "/"))
             (case-fold-search nil))
        (pcase (seq-drop-while (lambda (s) (string-match-p "^[^A-Z]" s))
                               segments)
          (`nil "Main")
          ((and `(,name) (guard (string-suffix-p "Main" name)))
           "Main")
          (module-segments (string-join module-segments "."))))))
#+end_src
*** COMMENT haskell-tng-mode           :Haskell:major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:02]
:END:

#+begin_src emacs-lisp
  (setup (:package haskell-tng-mode)
    (:file-match "\\.hs\\'"))
#+end_src
*** hcl-mode                                             :Terraform:
:PROPERTIES:
:CREATED_TIME: [2022-03-20 Sun 23:59]
:END:
#+begin_quote
Major mode for Hashicorp
[[https://github.com/purcell/emacs-hcl-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package hcl-mode)
    (:file-match "\\.tf\\'"
                 "\\.prisma\\'"
                 "\\.hcl\\'")
    (:reformatters
     (terraform-fmt :program "terraform"
                    :args (list "fmt" "--write=false" "-"))))
#+end_src
*** COMMENT helpful                                            :reference:Emacs:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 12:50]
:END:
#+begin_quote
A better *help* buffer
[[https://github.com/Wilfred/helpful]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package helpful)
    ;; Also: helpful-at-point, helpful-callable, helpful-macro, and
    ;; helpful-visit-reference.
    (:global [remap describe-function] #'helpful-callable
             [remap describe-variable] #'helpful-variable
             [remap describe-command] #'helpful-command
             [remap describe-key] #'helpful-key
             [remap describe-symbol] #'helpful-symbol))
#+end_src
*** highlight-indent-guides                                     :UI:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Minor mode to highlight indentation
[[https://github.com/DarthFennec/highlight-indent-guides]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package highlight-indent-guides)
    (:hook-into python-mode-hook
                yaml-mode-hook))
#+end_src

This is helpful in programming languages that depend on indentation levels.
*** hl-todo                                            :development:
:PROPERTIES:
:CREATED_TIME: [2022-03-02 Wed 15:58]
:END:
#+begin_quote
Highlight TODO and similar keywords
#+end_quote

#+begin_src emacs-lisp
  (setup (:package hl-todo)
    (:status opinionated
      (:global "M-i t" #'hl-todo-insert)))
#+end_src
*** huan                                                   :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 21:11]
:END:
#+begin_quote
Replace things with predefined alternatives
#+end_quote

#+begin_src emacs-lisp
  (setup (:package huan)
    (:global "C-=" #'huan-symbol
             "C-+" #'huan-defun)
    (with-eval-after-load 'embark
      (define-key embark-defun-map "`" #'huan-defun)
      (define-key embark-identifier-map "`" #'huan-symbol)))
#+end_src
*** COMMENT idris-mode                                                         :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-05-14 Sun 23:16]
:END:
#+begin_quote
Major mode for editing Idris code
[[https://github.com/idris-hackers/idris-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package idris-mode)
    (:file-match "\\.idr\\'"))
#+end_src
*** iedit                                                  :editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:51]
:END:
#+begin_quote
Edit multiple regions in the same way simultaneously.
#+end_quote

#+begin_src emacs-lisp
(setup (:package iedit))
#+end_src
*** indent-bars
:PROPERTIES:
:CREATED_TIME: [2023-07-30 Sun 09:16]
:END:
#+begin_quote
highlight indentation with bars
#+end_quote

#+begin_src emacs-lisp
(setup (:package indent-bars))
#+end_src
*** jinx
:PROPERTIES:
:CREATED_TIME: [2023-09-27 Wed 23:59]
:END:
#+begin_quote
Enchanted Spell Checker
#+end_quote

#+begin_src emacs-lisp
  (setup (:package jinx)
    (:hook-into markdown-mode
                ;; For org-mode, set up hooks in .dir-locals.el of individual
                ;; projects
                git-commit-mode-hook)
    (:bind "C-M-;" #'jinx-correct-nearest))
#+end_src
*** jq-mode
:PROPERTIES:
:CREATED_TIME: [2022-05-30 Mon 14:03]
:END:
#+begin_quote
Edit jq scripts.
#+end_quote

#+begin_src emacs-lisp
(setup (:package jq-mode))
#+end_src
*** COMMENT jsonian                                                            :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-06-28 Tue 23:59]
:END:
#+begin_quote
A major mode for editing JSON files
[[https://github.com/iwahbe/jsonian]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package jsonian)
    (:with-mode json-mode
      (:file-match "\\.json\\'" "\\.lock\\'"))
    (add-to-list 'major-mode-remap-alist '(json-mode . jsonian-mode))

    (with-eval-after-load "org-src"
      (add-to-list 'org-src-lang-modes
                   '("json" . jsonian))))
#+end_src
*** COMMENT json-mode                          :major__mode:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Major mode for editing JSON files.
[[https://github.com/joshwnj/json-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package json-mode)
    (:file-match "\\.json\\'" "\\.lock\\'"))
#+end_src
*** jtsx
:PROPERTIES:
:CREATED_TIME: [2023-11-27 Mon 20:10]
:END:
#+begin_quote
Extends default support for JSX/TSX
[[https://github.com/llemaitre19/jtsx]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package jtsx)
    (add-hook 'tsx-ts-mode-hook #'jtsx-tsx-mode))
#+end_src
*** just-mode
:PROPERTIES:
:CREATED_TIME: [2023-09-27 Wed 14:27]
:END:
#+begin_quote
Justfile editing mode
[[https://github.com/leon-barrett/just-mode.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package just-mode)
    (:file-match "/justfile\\'"))
#+end_src
*** COMMENT keycast                                                            :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-03-31 Fri 23:59]
:ID:       2c1614dd-a2e5-4815-96dd-10b090cddcf4
:END:
#+begin_quote
Show current command and its binding
#+end_quote

#+begin_src emacs-lisp
(setup (:package keycast))
#+end_src
*** kind-icon                                                   :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:22]
:END:
#+begin_quote
Completion kind icons
[[https://github.com/jdtsmith/kind-icon]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package kind-icon)
    (:set kind-icon-default-face 'corfu-default)

    (with-eval-after-load 'corfu
      (require 'kind-icon)
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src
*** language-detection
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 20:00]
:END:
#+begin_quote
Automatic language detection from code snippets
[[https://github.com/andreasjansson/language-detection.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package language-detection))
#+end_src
*** COMMENT lean4-mode                                            :Lean4:@extra:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-12-09 Fri 19:50]
:END:
#+begin_quote
A major mode for the Lean language
[[https://github.com/leanprover/lean4]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package lean4-mode)
    (:file-match "\\.lean\\'"))
#+end_src
*** license-templates                              :development:OSS:
:PROPERTIES:
:CREATED_TIME: [2022-02-06 Sun 14:30]
:END:
#+begin_quote
Create LICENSE using GitHub API
[[https://github.com/jcs-elpa/license-templates]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package license-templates))
#+end_src
*** link-hint                                                :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 17:39]
:END:
#+begin_quote
Use avy to open, copy, etc. visible links
[[https://github.com/noctuid/link-hint.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package link-hint)
    (:global "M-g f" #'link-hint-open-link)

    ;; Extra bindings for particular modes
    (:with-feature info
      (:when-loaded
        (:with-map Info-mode-map
          (:bind "f" #'link-hint-open-link)))))
#+end_src
*** lispy                          :Emacs__Lisp:structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:36]
:END:
#+begin_quote
vi-like Paredit.
[[https://github.com/abo-abo/lispy]]
#+end_quote

For Emacs Lisp, I use lispy.

#+begin_src emacs-lisp
  (setup (:package lispy)
    (:hook
     (defun akirak/lispy-invert-puni-mode ()
       "Turn off `puni-mode' when `lispy-mode' is on."
       (when (featurep 'puni)
         (puni-mode (not lispy-mode)))))

    ;; I have removed lispy-occur.el from the package, so disable the command.
    (fset 'lispy-occur #'ignore)
    ;; Undefine this command because I am not using it and it adds ace-window
    ;; dependency.
    (fset 'lispy-eval-other-window #'ignore)

    (advice-add 'lispy-kill :around
                (defun akirak/ad-around-lispy-kill (orig &rest args)
                  (save-restriction
                    (apply orig args))))

    ;; Don't override the default command with lispy-goto-symbol.
    ;; This is especially important to enable the dumb-jump integration.
    (:unbind "M-.")

    ;; Adoption of lispy is opinionated.
    (:status opinionated
      (:set lispy-key-theme '(special lispy))

      (:hook-into lisp-mode
                  dune-mode
                  emacs-lisp-mode
                  lisp-data-mode
                  lisp-interaction-mode
                  ielm-mode
                  eval-expression-minibuffer-setup)

      (:unbind "M-i")

      (:with-map lispy-mode-map-special
        (:unbind "p"                      ; lispy-eval-other-window
                 "y"                      ;lispy-occur
                 "O"))

      (:with-map lispy-mode-map-lispy
        ;; Prevent conflicts with other custom keybindings
        (:unbind "C-,"
                 "M-<left>"
                 "M-<right>"
                 "M-m"
                 "M-o"
                 "<C-return>"
                 "<M-return>"
                 "<M-RET>"))))
#+end_src

Lispy is not turned on by default.
Its configuration is about my habits, so it is put in [[file:compat.el::(setup lispy][compat.el]].
*** COMMENT lsp-bridge                                                         :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-09-27 Wed 23:59]
:END:
#+begin_quote
LSP bridge
[[https://github.com/manateelazycat/lsp-bridge]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package lsp-bridge)
    (:set lsp-bridge-complete-manually t
          ;; Check what function to use
          ;; lsp-bridge-find-def-fallback-function #'dumb-jump-go
          lsp-bridge-enable-search-words nil
          lsp-bridge-enable-auto-format-code nil
          lsp-bridge-symbols-enable-which-func t)

    (define-prefix-command 'akirak/lsp-bridge-prefix-map)
    (:bind akirak/mode-prefix-key akirak/lsp-bridge-prefix-map
           [remap xref-find-definitions] #'lsp-bridge-find-def
           [remap xref-find-definitions-other-window] #'lsp-bridge-find-def-other-window
           "C-x 4 g t" #'lsp-bridge-find-type-def-other-window
           "C-x 4 g i" #'lsp-bridge-find-impl-other-window
           [remap xref-go-back] #'lsp-bridge-find-def-return
           [remap previous-error] #'lsp-bridge-diagnostic-jump-prev
           [remap next-error] #'lsp-bridge-diagnostic-jump-next
           "M-' e" #'lsp-bridge-diagnostic-list
           ;; #'lsp-bridge-diagnostic-ignore
           "M-s M-i" #'lsp-bridge-workspace-list-symbols
           [remap consult-imenu-multi] #'lsp-bridge-workspace-list-symbols
           [remap completion-at-point] #'lsp-bridge-popup-complete-menu)

    (:with-map akirak/lsp-bridge-prefix-map
      (:bind "g t" #'lsp-bridge-find-type-def
             "g i" #'lsp-bridge-find-impl
             "g r" #'lsp-bridge-find-references
             "h" #'lsp-bridge-popup-documentation
             "a" #'lsp-bridge-code-action
             "r" #'lsp-bridge-rename
             "w" #'lsp-bridge-diagnostic-copy
             "R" #'lsp-bridge-restart-process)))
#+end_src
*** lsp-mode                                                   :@extra:lsp_mode:
:PROPERTIES:
:CREATED_TIME: [2023-01-11 Wed 19:03]
:END:
#+begin_quote
LSP mode
[[https://github.com/emacs-lsp/lsp-mode]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package lsp-mode))
#+end_src
*** lsp-mode (stub)
:PROPERTIES:
:CREATED_TIME: [2023-01-09 Mon 23:59]
:END:
#+begin_quote
LSP mode
[[https://github.com/emacs-lsp/lsp-mode]]
#+end_quote

#+begin_src emacs-lisp
  (put 'lsp-defun 'lisp-indent-function 'defun)
  (put 'lsp-with-current-buffer 'lisp-indent-function 1)
  (put 'lsp-save-restriction-and-excursion 'lisp-indent-function 0)
  (put 'lsp-define-conditional-key 'lisp-indent-function 'defun)
  (put 'lsp-with-filename 'lisp-indent-function 1)
#+end_src
*** COMMENT macrostep                                   :emacs_lisp:development:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:52]
:END:
#+begin_quote
interactive macro expander
[[https://github.com/emacsorphanage/macrostep]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package macrostep))
#+end_src

To use it, turn on =macrostep-mode=.

*** magit                                                      :git:
#+begin_quote
A Git porcelain inside Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit)
    (:nixpkgs git)

    (:set magit-save-repository-buffers 'dontask)

    ;; Twist allows me to get the git version of any package if necessary, so
    ;; there is no point in making this IO-intensive function run.
    (advice-add 'magit-version :override #'ignore)

    (:with-map magit-status-mode-map
      (:bind "^" (defun akirak/magit-dired-up ()
                   "Show the parent directory using dired."
                   (interactive)
                   (dired (thread-last
                            default-directory
                            (string-remove-suffix "/")
                            (file-name-directory))))))

    ;; Replace the binding to compose-message
    (define-key ctl-x-map "m" #'magit-dispatch)
    (define-key ctl-x-map "j" #'magit-status)
    (define-key ctl-x-x-map "e"
                (defun akirak/edit-source-file ()
                  "Visit a corresponding file in a Git repository."
                  (interactive)
                  (cond
                   ((and buffer-file-name
                         (file-in-directory-p buffer-file-name "/nix/store/"))
                    (call-interactively #'akirak-twist-find-git-source))
                   ((and (derived-mode-p 'org-mode)
                         (featurep 'org-transclusion)
                         (org-transclusion-within-transclusion-p))
                    (same-window-prefix)
                    (org-transclusion-open-source t))
                   (t
                    (magit-blob-visit-file)))))
    (define-key ctl-x-x-map "m" #'magit-file-dispatch)
    (define-key ctl-x-x-map "s"
                (defun akirak-magit-stage-file-and-commit ()
                  (interactive)
                  (unless (buffer-file-name)
                    (user-error "Not in a file buffer"))
                  (when (save-window-excursion
                          (magit-diff-buffer-file)
                          (yes-or-no-p "Stage all changes in this file?"))
                    (magit-stage-file (buffer-file-name))
                    (magit-commit))))

    (:status opinionated
      (:set magit-display-buffer-function
            ;; Based on 'magit-display-buffer-same-window-except-diff-v1
            (defun akirak/magit-display-buffer (buffer)
              (let ((action (with-current-buffer buffer
                              (cond
                               ((derived-mode-p 'magit-diff-mode)
                                '(nil (inhibit-same-window . t)))
                               ((and (derived-mode-p 'magit-process-mode)
                                     (fboundp 'akirak-window-display-buffer-prefer-other-pane))
                                '(akirak-window-display-buffer-prefer-other-pane))
                               (t
                                '(display-buffer-same-window))))))
                (prog1 (display-buffer buffer action)
                  (with-current-buffer buffer
                    (when (derived-mode-p 'magit-process-mode)
                      (goto-char (point-max))
                      (recenter-top-bottom -1))))))))

    (:status personal
      (:when-loaded
        (transient-remove-suffix 'magit-branch
          'magit-worktree-checkout)
        (transient-replace-suffix 'magit-branch
          'magit-worktree-branch
          '("w" "new worktree" akirak-magit-worktree-new-branch))
        (transient-append-suffix 'magit-worktree
          'magit-worktree-branch
          '("d" "worktree in default location" akirak-magit-worktree-checkout)))

      (:set magit-repository-directories '(("~/" . 1)
                                           ("~/.config" . 1)
                                           ("~/work" . 3)
                                           ("~/work2" . 3)
                                           ("~/archives/oss/" . 4)))

      (:when-loaded
        ;; Run the following commands to set up SSH_AUTH_SOCK environment
        ;; from GPG:
        ;;
        ;; gpg-connect-agent /bye
        ;; export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
        (unless (getenv "SSH_AUTH_SOCK")
          (condition-case-unless-debug err
              (progn
                (with-temp-buffer
                  (unless (= 0 (call-process "gpg-connect-agent"
                                             nil nil nil "/bye"))
                    (error "gpg-connect-agent failed")))
                (let ((sock (car (process-lines "gpgconf" "--list-dirs" "agent-ssh-socket"))))
                  (if (and sock (file-exists-p sock))
                      (progn
                        (setenv "SSH_AUTH_SOCK" sock)
                        (message "SSH_AUTH_SOCK set to %s" sock))
                    (error "Socket is nil or does not exist: %s" sock))))
            (error (message "Failed to initialize SSH_AUTH_SOCK: %s" err)))))))
#+end_src
**** Squash commits
#+begin_src emacs-lisp
  (setup squasher
    ;; https://github.com/akirak/squasher
    (:nixpkgs "squasher")

    (defun akirak/squasher-from-revision-at-point ()
      (interactive)
      (if-let (commit (magit-rev-parse
                       (magit-thing-at-point 'git-revision t)))
          (when (zerop (with-temp-buffer
                         (prog1 (call-process "squasher"
                                              nil t nil
                                              "--base" commit)
                           (message (buffer-string)))))
            (revert-buffer))
        (user-error "No commit at point"))))
#+end_src
*** magit-delta                                            :VC:diff:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 13:33]
:END:
#+begin_quote
Use Delta when displaying diffs in Magit
[[https://github.com/dandavison/magit-delta]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-delta)
    (:nixpkgs "delta")
    (:hook-into magit-mode-hook)

    (setq magit-delta-default-dark-theme "base16")

    (:when-loaded
      (unless (member "magit-delta" magit-delta-delta-args)
        (setq magit-delta-delta-args
              (append magit-delta-delta-args
                      '("--features" "magit-delta"))))))
#+end_src
*** magit-section
:PROPERTIES:
:CREATED_TIME: [2022-09-16 Fri 10:35]
:END:
#+begin_quote
Sections for read-only buffers
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-section)
    (:with-map magit-section-mode-map
      (:bind "C-c =" (defun akirak/magit-show-section-at-point ()
                       (interactive)
                       (let ((section (magit-current-section)))
                         (message "(%s) %s"
                                  (oref section type)
                                  (prin1-to-string (oref section value))))))
      ;; I don't want to override global bindings on these keys.
      (:unbind "M-1" "M-2" "M-3" "M-4"
               [C-tab] [M-tab])))
#+end_src
*** COMMENT magit-todos                                                     :VC:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Show source file TODOs in Magit
[[http://github.com/alphapapa/magit-todos]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-todos)
    (:set magit-todos-exclude-globs '("**/*.map")))
#+end_src

I won't turn on the mode by default, because it reduces the performance to some extent.
*** marginalia
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:49]
:END:
#+begin_quote
Enrich existing commands with completion annotations
#+end_quote

#+begin_src emacs-lisp
  (setup (:package marginalia)
    (:hook-into after-init-hook)

    (:with-map minibuffer-local-map
      (:bind "M-a" #'marginalia-cycle))

    (:when-loaded
      (add-to-list 'marginalia-annotator-registry
                   '(project-root akirak-project-root-annotator builtin none))
      (add-to-list 'marginalia-annotator-registry
                   '(directory marginalia-annotate-file builtin none))))
#+end_src
*** markdown-mode                                      :major__mode:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 14:12]
:END:
#+begin_quote
Major mode for Markdown-formatted text
[[https://jblevins.org/projects/markdown-mode/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package markdown-mode)
    (:file-match "\\.md\\'" "\\.markdown\\'"
                 "\\.livemd\\'")
    (:with-mode gfm-mode
      (:file-match "README.md\\'"))

    (:bind "C-c '" #'markdown-edit-code-block))
#+end_src
*** mastodon                                                            :social:
:PROPERTIES:
:CREATED_TIME: [2022-12-30 Fri 12:37]
:END:
#+begin_quote
Client for Mastodon, a federated social network
#+end_quote

#+begin_src emacs-lisp
(setup (:package mastodon))
#+end_src
*** mermaid-mode                                        :@extra:mermaid:
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 13:52]
:END:
#+begin_quote
major mode for working with mermaid graphs
[[https://github.com/abrochard/mermaid-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mermaid-mode)
    (:nixpkgs "mermaid-cli")

    (:file-match "\\.mmd\\'"))
#+end_src
*** mini-modeline                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-03-21 Mon 23:16]
:END:
#+begin_quote
Display modeline in minibuffer
[[https://github.com/kiennq/emacs-mini-modeline]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mini-modeline)
    (:set mini-modeline-enhance-visual nil
          mini-modeline-echo-duration 3
          ;; If this option is set to t, it seems to suppress header lines, so I
          ;; will set it to nil.
          mini-modeline-display-gui-line nil
          mini-modeline-l-format '((mode-line-modified mode-line-modified)
                                   (mode-line-mule-info mode-line-mule-info)
                                   " "
                                   (:eval (akirak-mode-line-directory))
                                   "%b"
                                   "%n %p (%l,%c) "
                                   (:eval (string-trim (format-mode-line mode-line-modes)))
                                   (vc-mode vc-mode))
          mini-modeline-r-format '("%e"
                                   (mode-line-process ("  " mode-line-process))
                                   (current-input-method-title
                                    (current-input-method-title " "))
                                   ;; I'll show mode-line-misc-info in the header line,
                                   ;; as it contains information for eglot, which-func, etc.
                                   ;; which are specific to buffers.
                                   ;; (mode-line-misc-info mode-line-misc-info)

                                   ;; However, global-mode-string, which is part
                                   ;; of mode-line-misc-info by default, should be
                                   ;; included here. See also bindings.
                                   (global-mode-string global-mode-string)
                                   (mode-line-client mode-line-client)
                                   (:eval (format-time-string " %b %d %a W%U %H:%M"))))
    (:hook-into emacs-startup-hook)

    (defvar-local akirak/mode-line-directory-memo nil
      "Cons cell of (TIME . DIR).")

    (defun akirak-mode-line-directory ()
      (let ((base (buffer-base-buffer)))
        (if-let (filename (buffer-file-name base))
            (if (and akirak/mode-line-directory-memo
                     (< (- (float-time) (car akirak/mode-line-directory-memo))
                        3))
                (cdr akirak/mode-line-directory-memo)
              (let* ((dir (abbreviate-file-name (file-name-directory filename)))
                     (value (concat (if-let (pr (when (require 'akirak-header-line nil t)
                                                  (akirak-header-line--project)))
                                        (let ((root (thread-last
                                                      (project-root pr)
                                                      (string-remove-suffix "/"))))
                                          (concat (file-name-directory root)
                                                  (propertize (file-name-nondirectory root)
                                                              'face 'font-lock-constant-face)
                                                  (propertize (string-remove-prefix root dir)
                                                              'face 'font-lock-string-face)))
                                      (propertize dir 'face 'font-lock-string-face))
                                    (if base
                                        (concat (file-name-nondirectory filename)
                                                " -> [indirect]")
                                      ""))))
                (setq akirak/mode-line-directory-memo (cons (float-time) value))
                value))
          ""))))
#+end_src
*** mlscroll                                         :aesthetics:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
A scroll bar for the modeline
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mlscroll)
    (:set mlscroll-in-color (face-attribute 'tool-bar :background nil t)
          mlscroll-out-color (face-attribute 'default :background nil t))
    (:with-mode mlscroll-mode
      (:hook-into after-init-hook)))
#+end_src
*** move-dup                                               :editing:
:PROPERTIES:
:CREATED_TIME: [2022-03-06 Sun 20:59]
:ID:       4aed6213-0bcf-4dc7-943e-a94ea8a1fbe3
:END:
#+begin_quote
Eclipse-like moving and duplicating lines or rectangles
[[https://github.com/wyuenho/move-dup]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package move-dup)
    (:bind "M-P" #'move-dup-move-lines-up
           "M-N" #'move-dup-move-lines-down)

    (add-hook 'prog-mode-hook #'move-dup-mode)
    (add-hook 'text-mode-hook
              (defun akirak/turn-on-move-dup-mode ()
                (unless (derived-mode-p 'org-mode 'markdown-mode)
                  (move-dup-mode 1)))))
#+end_src
*** mpv
:PROPERTIES:
:CREATED_TIME: [2023-07-21 Fri 23:59]
:END:
#+begin_quote
control mpv for easy note-taking
[[https://github.com/kljohann/mpv.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package mpv)
    (with-eval-after-load 'mailcap
      (add-to-list 'mailcap-user-mime-data
                   `((viewer . mpv-play)
                     (test . (or (getenv "DISPLAY")
                                 (getenv "WAYLAND_DISPLAY")))
                     (type . ,(rx (or "audio" "video")
                                  "/" (+ anything)))))))
#+end_src
*** nix3                                                           :Nix:project:
:PROPERTIES:
:CREATED_TIME: [2022-02-26 Sat 17:12]
:END:
#+begin_quote
Frontend to experimental commands of Nix
[[https://github.com/emacs-twist/nix3.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nix3)
    (:set nix3-flake-remote-wait 20
          nix3-registry-list-completion-options (list :add-to-registry t
                                                      :require-match nil))

    (defun akirak/nix3-flake-maybe-update-from-pins ()
      "Generate flake.lock from the pins."
      (when (not (file-exists-p "flake.lock"))
        (akirak/nix3-flake-update-from-pins)))

    (defun akirak/nix3-flake-update-from-pins ()
      (interactive)
      (if (file-exists-p "flake.nix")
          (make-process :buffer "*nix flake update*"
                        :name "nix-flake-update"
                        :command
                        (list "nix" "flake" "update" "."
                              "--commit-lock-file"
                              "--inputs-from" "github:akirak/flake-pins")
                        :sentinel
                        (lambda (proc event)
                          (if (string= event "finished\n")
                              (message "Successfully updated flake.lock")
                            (when (> (process-exit-status proc)
                                     0)
                              (message "Failed to update flake.lock: %s"
                                       (with-current-buffer "*nix flake update*"
                                         (buffer-string)))))))
        (user-error "There is no flake.nix in default-directory")))

    (:when-loaded
      (add-hook 'nix3-flake-new-hook #'akirak/nix3-flake-maybe-update-from-pins
                90)
      (add-hook 'nix3-flake-init-hook #'akirak/nix3-flake-maybe-update-from-pins
                90))

    (:global "C-c n" #'nix3-transient
             "M-g M-f" #'nix3-flake-edit
             "<f12> n l" #'nix3-registry-list
             "<f12> n n" #'nix3-flake-show-url))
#+end_src
**** magit-nix3
#+begin_quote
Nix3.el integration for Magit
[[https://github.com/emacs-twist/nix3.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package magit-nix3)
    (with-eval-after-load 'magit-diff
      (magit-nix3-flake-lock-mode t)))
#+end_src
*** nix-mode                                                               :Nix:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_quote
Major mode for editing .nix files
#+end_quote

#+begin_src emacs-lisp
  ;; Install nix-mode for nix-repl.
  (setup (:package nix-mode))

  ;; (setup (:package nix-mode)
  ;;   (:file-match "\\.nix\\'")
  ;;   (:mode-repl nix-repl)
  ;;   (:bind [remap devdocs-lookup] #'akirak-nix-manix)
  ;;   (:reformatters
  ;;    (alejandra :program "alejandra"))
  ;;   (:compilation-error
  ;;    ;; Unused argument `hsuper` at default.nix:9:24-15:6
  ;;    (nix-linter " at \\([^:]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:digit:]]+$"
  ;;                1 2 3)))
#+end_src
*** nix-update
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 15:44]
:END:
#+begin_quote
Update "fetch" blocks in .nix expressions
[[https://github.com/jwiegley/nix-update-el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package nix-update))
#+end_src
*** nov                                               :reading:EPUB:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Featureful EPUB reader mode
[[https://depp.brause.cc/nov.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package nov)
    ;; unzip is required for opening EPUB
    (:nixpkgs unzip)
    (:file-match "\\.epub\\'")
    (:set nov-text-width akirak/default-body-width)
    (:bind "i" #'imenu)

    (:hook (defun akirak/nov-setup ()
             (when (require 'olivetti nil t)
               (olivetti-mode 1)
               (setq-local nov-text-width nil)
               ;; Re-render as olivetti changes the window width.
               (add-hook 'olivetti-expand-hook
                         #'nov-render-document
                         nil t)))))
#+end_src
*** ob-async
:PROPERTIES:
:CREATED_TIME: [2023-05-20 Sat 18:46]
:END:
#+begin_quote
Asynchronous org-babel src block execution
#+end_quote

#+begin_src emacs-lisp
(setup (:package ob-async))
#+end_src
*** olivetti                                               :writing:
:PROPERTIES:
:CREATED_TIME: [2022-04-22 Fri 23:59]
:END:
#+begin_quote
Minor mode for a nice writing environment
[[https://github.com/rnkn/olivetti]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package olivetti)
    (:set olivetti-body-width akirak/default-body-width)

    ;; Also hooked into nov-mode. See the package setting
    (:hook-into org-mode-hook
                org-memento-timeline-mode-hook)

    ;; Implement `olivetti-set-width-hook' without tweaking the upstream code.
    (advice-add 'olivetti-expand
                :after
                (lambda (&rest _args)
                  (run-hooks 'olivetti-expand-hook))))
#+end_src
*** orderless                                           :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:14]
:END:
#+begin_quote
Completion style for matching regexps in any order
#+end_quote

#+begin_src emacs-lisp
  (setup (:package orderless)
    (:set completion-styles '(orderless)))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

It is also possible to use Helm as a completion style. See https://github.com/oantolin/orderless#ivy-and-helm. I will use orderless primarily because it is smaller than Helm.
*** orgit                                                    :links:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:28]
:END:
#+begin_quote
Support for Org links to Magit buffers
#+end_quote

#+begin_src emacs-lisp
(setup (:package orgit))
#+end_src
*** package-lint                                 :Emacs:development:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:06]
:END:
#+begin_quote
A linting library for elisp package authors
[[https://github.com/purcell/package-lint]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package package-lint))
#+end_src
*** page-break-lines                                        :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:37]
:END:
#+begin_quote
Display ^L page breaks as tidy horizontal lines
[[https://github.com/purcell/page-break-lines]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package page-break-lines)
    (:hook-into doc-mode-hook
                help-mode-hook
                magit-mode-hook
                compilation-mode-hook
                haskell-mode-hook))
#+end_src
*** pdf-tools
:PROPERTIES:
:CREATED_TIME: [2023-04-20 Thu 23:59]
:END:
#+begin_quote
Support library for PDF documents
[[http://github.com/vedang/pdf-tools/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package pdf-tools))

  (setup pdf-view
    ;; Workaround for missing autoload
    (autoload 'pdf-view-mode "pdf-view")
    (:file-match "\\.pdf\\'"))
#+end_src
*** pinyin                                                 :Chinese:
:PROPERTIES:
:CREATED_TIME: [2022-08-23 Tue 23:59]
:END:
#+begin_quote
Convert Hanzi to Pinyin (汉字转拼音)
#+end_quote

#+begin_src emacs-lisp
(setup (:package pinyin))
#+end_src
*** plz
:PROPERTIES:
:CREATED_TIME: [2022-08-08 Mon 15:15]
:END:
#+begin_quote
HTTP library
[[https://github.com/alphapapa/plz.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package plz)
    (:nixpkgs "curl"))
#+end_src
*** COMMENT pocket-reader                                              :reading:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-05 Tue 18:19]
:END:
#+begin_quote
Client for Pocket reading list
[[https://github.com/alphapapa/pocket-reader.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package pocket-reader))
#+end_src
*** COMMENT poly-astro                                     :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 12:37]
:END:
#+begin_quote
A polymode for astro files
[[https://github.com/pablo-abc/.emacs.d/tree/master/lisp/poly-astro]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package poly-astro)
    (:with-mode poly-astro
      (:file-match "\\.astro\\'")))
#+end_src
*** popper                                                 :windows:
:PROPERTIES:
:CREATED_TIME: [2022-02-01 Tue 23:59]
:END:
#+begin_quote
Summon and dismiss buffers as popups
[[https://github.com/karthink/popper]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package popper)
    (:set popper-window-height 0.2
          popper-display-function #'popper-select-popup-at-bottom
          akirak/display-popup-window-function popper-display-function
          ;; You may have to re-enable popper-mode after updating this variable
          popper-reference-buffers `("\\*Messages\\*$"
                                     "\\*Backtrace\\*"
                                     "^\\*Warnings\\*"
                                     "^\\*envrc\\*"
                                     "^\\*envrc-debug\\*"
                                     "\\*Org-Dog-Context\\*"
                                     "^\\*Org Note\\*"
                                     "^\\*Compile-Log\\*"
                                     "^\\*Scratch-Input-Method"
                                     "^ \\*Agenda Commands\\*"
                                     "^\\*Register Preview\\*"
                                     "^\\*Shell Command Output\\*"
                                     "^\\*edit string\\*"
                                     "^\\*bean-query"
                                     "^\\*scratch from selection\\*"
                                     "^\\*[[:word:]]+ errors\\*"
                                     ;; "^\\*eldoc"
                                     "^\\*Select Link\\*"
                                     "^\\*Flymake diagnostics"
                                     "^\\*hoogle\\*"
                                     inferior-haskell-mode))

    (:hook-into after-init-hook)
    (:hook popper-echo-mode)

    (advice-add 'popper-select-popup-at-bottom
                :before
                (defun akirak/popper-store-current-window (&rest _)
                  (setq akirak-window-last-non-popup-window (selected-window))))

    (defun akirak/popper-restart ()
      (interactive)
      (when (bound-and-true-p popper-mode)
        (popper-mode -1))
      (popper-mode))

    (add-hook 'popper-open-popup-hook
              (defun akirak/popper-recenter ()
                (goto-char (point-max))
                (recenter -1 t)))

    (:bind "M-\"" #'popper-cycle
           "M-' RET" #'popper-toggle-type
           "M-' M-'" #'popper-toggle
           "M-' e" #'flymake-show-buffer-diagnostics
           "M-' t" #'akirak-shell-for-project-other-window
           "M-' s" #'scratch-buffer
           "M-' w" (defun akirak/revisit-eww-buffer ()
                     (interactive)
                     (pop-to-buffer "*eww*"))
           "M-' c" (defun akirak/compilation-buffer (&optional arg)
                     (interactive "P")
                     (if-let (buffer (and (not arg)
                                          (get-buffer "*compilation*")))
                         (pop-to-buffer buffer)
                       (project-compile)))))
#+end_src
*** posframe                                            :UI:library:
:PROPERTIES:
:CREATED_TIME: [2022-03-25 Fri 10:57]
:END:
#+begin_quote
Pop a posframe (just a frame) at point
[[https://github.com/tumashu/posframe]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package posframe))
#+end_src
*** proof-general   
:PROPERTIES:
:CREATED_TIME: [2023-03-08 Wed 14:53]
:END:
#+begin_quote
A generic Emacs interface for proof assistants
[[https://proofgeneral.github.io/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package proof-general))
#+end_src
**** Coq                                                            :@extra:Coq:
#+begin_src elisp
  (setup coq
    (:nixpkgs "coq" "coq-lsp"))
#+end_src
*** puni                                       :structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:24]
:END:
#+begin_quote
Parentheses Universalistic
#+end_quote

[[https://github.com/AmaiKinono/puni][puni]] will replace smartparens, expand-region, and paredit (which I didn't adopt in favour of lispy).

#+begin_src emacs-lisp
  (setup (:package puni)
    (:hook-into nix-mode
                tuareg-mode
                svelte-mode
                web-mode
                sql-mode
                nxml-mode)

    (:unbind "C-M-a" "C-M-e" "C-w" "M-d" "C-M-f")

    ;; TODO: Bind commands
    ;;
    ;; Marking commands
    ;; Sexp manipulating commands
    (:bind))
#+end_src

The following types of commands don't have pre-defined keybindings in =puni-mode=, so I have to manually bind them:

- Marking commnads
- Sexp manipulating commands

For auto-pairing, you can use =electric-pair-mode= along with puni.

**** akirak-puni
#+begin_src emacs-lisp
  (setup akirak-puni
    (add-hook 'puni-mode-hook #'akirak-puni-mode-setup))
#+end_src

This contains workarounds for puni-mode, like mode-specific soft deletion.
*** rainbow-delimiters                                      :visual:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 18:07]
:END:
#+begin_quote
Highlight brackets according to their depth
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rainbow-delimiters)
    (:hook-into emacs-lisp-mode))
#+end_src
*** rainbow-mode                                            :colors:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
Colorize color names in buffers
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rainbow-mode)
    (:hook-into prog-mode))
#+end_src
*** reason-mode
:PROPERTIES:
:CREATED_TIME: [2024-01-30 Tue 23:11]
:END:
#+begin_quote
A major mode for editing ReasonML
[[https://github.com/reasonml-editor/reason-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package reason-mode)
    (:file-match "\\.re\\'"))
#+end_src
*** reformatter                                         :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Define commands which run reformatters on the current buffer
#+end_quote

#+begin_src emacs-lisp
  (setup (:package reformatter)
    (:reformatters
     ;; If you use prettier, you need to install its executable separately.
     (prettier
      :program "prettier"
      :args (list (concat "--plugin-search-dir="
                          (expand-file-name
                           (locate-dominating-file default-directory "package.json")))
                  "--stdin-filepath" (buffer-file-name)))
     (treefmt
      :program "treefmt"
      :args (list "--stdin" (buffer-file-name)))))
#+end_src
*** repl-toggle                                :windows:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:05]
:END:
#+begin_quote
Switch to/from repl buffer for current major-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package repl-toggle)
    (:set rtog/fullscreen nil
          rtog/goto-buffer-fun akirak/display-popup-window-function)

    ;; Unbind the default key
    (:unbind "C-c C-z")
    (:global "<C-return>" #'rtog/toggle-repl))
#+end_src

For configuration, see [[https://git.sr.ht/~tomterl/repl-toggle][~tomterl/repl-toggle - sourcehut git]].
*** restclient                                                 :web:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:58]
:END:
#+begin_quote
An interactive HTTP client for Emacs
#+end_quote

#+begin_src emacs-lisp
  (setup (:package restclient)
    (:file-match "\\.restclient\\'"))
#+end_src
*** riben                                                 :Japanese:
#+begin_quote
A dumb Japanese input method
[[https://github.com/akirak/emacs-dumb-japanese]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package riben)
    (:set riben-google-timeout 5)
    (:bind "C-j" #'riben-dispatch
           "C-S-j" #'riben-inc-counter
           "q" #'riben-mode-disable
           "@" #'riben-switch-to-english-mode
           "_" (defun akirak/insert-zero-width-space ()
                 (interactive)
                 ;; zero-width space
                 (insert "​")))

    (set-language-info "Japanese" 'input-method 'japanese-riben)

    ;; Workaround for commands in `org-mode-map' and other maps.
    (:when-loaded
      (dolist (key (mapcar #'car riben-decode-punctuation-alist))
        (define-key riben-mode-map (vector key) #'riben-self-insert-command))))
#+end_src
**** avy-riben
#+begin_quote
Jump to Japanese text using avy
[[https://github.com/akirak/emacs-dumb-japanese]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package avy-riben))
#+end_src
**** riben-english
#+begin_src emacs-lisp
  (setup riben-english
    (:bind "C-j" #'riben-english-to-japanese
           "C-S-j" #'riben-english-confirm))
#+end_src
*** rich-minority                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-03-21 Mon 23:27]
:END:
#+begin_quote
Clean-up and Beautify the list of minor-modes.
[[https://github.com/Malabarba/rich-minority]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package rich-minority)
    (:set rm-whitelist (rx symbol-start
                           (or "envrc"
                               "TSit"
                               "OClk"
                               "Flymake"
                               "Memento"
                               "Copilot"
                               "ga"
                               "LSPB"
                               "Treefmt")
                           symbol-end))
    (:hook-into after-init-hook))
#+end_src
*** COMMENT ruby-end                                                           :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-04-29 Fri 23:59]
:END:
#+begin_quote
Automatic insertion of end blocks for Ruby
[[http://github.com/rejeep/ruby-end]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ruby-end)
    (:hook-into elixir-mode)

    ;; Based on https://github.com/elixir-editors/emacs-elixir#pairing
    (add-hook 'elixir-mode-hook
              (defun akirak/elixir-setup-ruby-end ()
                (setq-local ruby-end-expand-keywords-before-re "\\(?:^\\|\\s-+\\)\\(?:do\\)"
                            ruby-end-check-statement-modifiers nil))))
#+end_src
*** separedit
:PROPERTIES:
:CREATED_TIME: [2022-06-21 Tue 15:12]
:END:
#+begin_quote
Edit comment/string/docstring/code block in separate buffer
[[https://github.com/twlz0ne/separedit.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package separedit)
    (:set separedit-default-mode 'markdown-mode)
    (:global "C-c '" #'separedit))
#+end_src
*** shfmt
#+begin_quote
Reformat shell scripts using shfmt
[[https://github.com/purcell/emacs-shfmt]]
#+end_quote

#+begin_src elisp
  (setup (:package shfmt)
    (:nixpkgs "shfmt")
    ;; My default preferences for formatting bash. Can be overridden for
    ;; individual projects that are not owned by me. For details, see "shfmt
    ;; --help".
    (:set shfmt-arguments '("-i" "2"
                            "--case-indent"
                            "--binary-next-line")))
#+end_src
*** shr-tag-pre-highlight
:PROPERTIES:
:CREATED_TIME: [2022-09-10 Sat 19:48]
:END:
#+begin_quote
Syntax highlighting code block in HTML
[[https://github.com/xuchunyang/shr-tag-pre-highlight.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package shr-tag-pre-highlight)
    (:when-loaded
      (:set shr-tag-pre-highlight-lang-modes
            (append '(("elixir" . elixir))
                    shr-tag-pre-highlight-lang-modes)))
    (with-eval-after-load 'shr
      (add-to-list 'shr-external-rendering-functions
                   '(pre . shr-tag-pre-highlight))))
#+end_src
*** sqlformat
:PROPERTIES:
:CREATED_TIME: [2023-02-21 Tue 17:18]
:END:
#+begin_quote
Reformat SQL using sqlformat or pgformatter
[[https://github.com/purcell/sqlformat]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package sqlformat)
    (:nixpkgs "pgformatter")
    ;; Override the formatter settings when necessary
    (:set sqlformat-command 'pgformatter
          sqlformat-args '("-s2" "-g"))
    (:with-feature sql
      (:with-mode sql-mode
        (:bind "C-c C-f" #'sqlformat-buffer))))
#+end_src
*** string-inflection                                      :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 14:07]
:END:
#+begin_quote
underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names
#+end_quote

#+begin_src emacs-lisp
(setup (:package string-inflection))
#+end_src
*** COMMENT suggest           :Emacs__Lisp:development:help:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 18:10]
:END:

#+begin_src emacs-lisp
(setup (:package suggest))
#+end_src
*** super-save                                                  :IO:
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:
#+begin_quote
Auto-save buffers, based on your activity.
[[https://github.com/bbatsov/super-save]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package super-save)
    (:hook-into emacs-startup-hook)
    (:set super-save-auto-save-when-idle t
          super-save-idle-duration 120
          super-save-remote-files nil
          super-save-triggers '(consult-buffer
                                tab-next
                                tab-previous
                                tab-new
                                tab-close
                                find-file
                                org-dog-find-file
                                akirak-consult-project-file
                                akirak-consult-dir))
    (:when-loaded
      (add-hook 'super-save-predicates
                (defun akirak/super-save-not-org-crypt-p ()
                  (and (boundp 'org-crypt-key)
                       (buffer-local-value 'org-crypt-key (current-buffer)))))))
#+end_src

=super-save-mode= can be annoying when you use org-crypt.
Follow an instruction at [[https://github.com/bbatsov/super-save/issues/10][super-save disable when file header is present. · Issue #10 · bbatsov/super-save · GitHub]]
*** svelte-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 20:31]
:END:
#+begin_quote
Emacs major mode for Svelte
#+end_quote

#+begin_src emacs-lisp
  (setup (:package svelte-mode)
    (:file-match "\\.svelte\\'")
    (:set svelte-display-submode-name t)
    (:auto-insert
     ("\\.svelte\\'"
      . (> "<script lang=\"ts\">\n</script>\n\n"
           _ "\n\n<style>\n\n</style>\n"))))
#+end_src
*** svg-lib                                       :library:graphics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:30]
:END:
#+begin_quote
SVG tags, progress bars & icons
[[https://github.com/rougier/svg-lib]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package svg-lib))
#+end_src
*** COMMENT svg-tag-mode            :visual:nano:aesthetics:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:26]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-tag-mode)
    (autoload #'svg-tag-mode "svg-tag-mode.el")
    (:hook-into after-init-hook))
#+end_src
*** symbol-overlay                                         :editing:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 20:24]
:END:
#+begin_quote
Highlight symbols with keymap-enabled overlays
[[https://github.com/wolray/symbol-overlay/]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package symbol-overlay)
    (:global "C-c s" #'symbol-overlay-put
             "M-g s" #'akirak-symbol-overlay-goto)

    (add-hook 'symbol-overlay-jump-hook
              (defun akirak/symbol-overlay-org-show-entry ()
                (when (derived-mode-p 'org-mode)
                  (org-show-entry)))))
#+end_src

=embark= can substitute for most of the functionalities of the package, but I am used to this package.
*** systemd
:PROPERTIES:
:CREATED_TIME: [2023-07-17 Mon 22:03]
:END:
#+begin_quote
Major mode for editing systemd units
#+end_quote

#+begin_src emacs-lisp
  (setup (:package systemd)
    (defun akirak/systemd-suspend ()
      "Suspend the system via systemd."
      (interactive)
      (if (and (eq system-type 'gnu/linux)
               (executable-find "systemctl")
               (not (akirak/wsl-p)))
          (progn
            (akirak/system-leave-hook)
            (call-process "systemctl" nil nil nil "suspend"))
        (user-error "This system doesn’t support session control using systemd"))))
#+end_src
*** tagedit                                                    :web:
:PROPERTIES:
:CREATED_TIME: [2022-04-08 Fri 21:12]
:END:
#+begin_quote
Some paredit-like features for html-mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tagedit)
    ;; The upstream lacks this autoload
    (autoload 'tagedit-mode "tagedit"))
#+end_src
*** taxy                                                   :library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:
#+begin_quote
Programmable taxonomical grouping for arbitrary objects
[[https://github.com/alphapapa/taxy.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package taxy))
#+end_src
*** taxy-magit-section                                  :UI:library:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 23:18]
:END:
#+begin_quote
View Taxy structs in a Magit Section buffer
[[https://github.com/alphapapa/taxy.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package taxy-magit-section))
#+end_src
*** titlecase                                              :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 17:13]
:END:
#+begin_quote
Title-case phrases
[[https://codeberg.org/acdw/titlecase.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package titlecase))
#+end_src

The [[https://github.com/duckwork/titlecase.el][readme]] of this package contains helpful links on capitalization.
*** COMMENT trashed                                                            :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-07-09 Sat 23:59]
:END:
#+begin_quote
Viewing/editing system trash can
[[https://github.com/shingo256/trashed]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package trashed))
#+end_src
*** COMMENT tree-sitter                                     :syntax:tree_sitter:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:36]
:END:
#+begin_quote
Incremental parsing system
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tree-sitter)
    (:hook tree-sitter-hl-mode)

    (:when-loaded
      ;; Based on https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-849355222
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(typescript-tsx-mode . tsx))))
#+end_src

- =tree-sitter-hl-mode= overrides highlighting provided by =font-lock-mode=.
**** tree-sitter-langs
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:37]
:END:
#+begin_quote
Grammar bundle for tree-sitter
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tree-sitter-langs)
    (:with-mode tree-sitter-mode
      (:hook-into typescript-mode-hook
                  typescript-tsx-mode-hook)))
#+end_src
*** COMMENT triples                                                            :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-03-25 Sat 18:13]
:END:
#+begin_quote
A flexible triple-based database for use in apps
#+end_quote

#+begin_src emacs-lisp
(setup (:package triples))
#+end_src
*** tuareg                                                  :OCaml:@extra:fstar:
:PROPERTIES:
:CREATED_TIME: [2023-01-10 Tue 16:51]
:END:
#+begin_quote
OCaml mode
#+end_quote

#+begin_src emacs-lisp
  (setup (:package tuareg)
    ;; (:nixpkgs "opam")
    (:mode-repl akirak/utop-project)
    (:file-match "\\.ml\\(?:\\.[^z-a]+\\)?\\'")

    (:reformatters
     (ocamlformat :program "ocamlformat"
                  :args (list "--name" (buffer-file-name) "-")))

    (:bind [remap devdocs-lookup]
           (defun akirak/ocaml-doc-index ()
             (interactive)
             (pcase-exhaustive (process-lines (or (executable-find "odig")
                                                  (user-error "odig is not found"))
                                              "doc" "-f")
               (`nil
                (error "No response returned"))
               (`(,file . ,_)
                (eww (concat "file://" file)))))

           [remap apropos-command]
           (defun akirak/ocaml-sherlodoc ()
             (interactive)
             (pop-to-buffer
              (eat-make (format "sherlodoc-%s"
                                (project-name (or (project-current)
                                                  (user-error "Not in a project"))))
                        "opam" nil
                        "exec" "--" "sherlodoc" "search")))))
#+end_src
*** COMMENT turbo-log                                    :development:debugging:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:55]
:END:
#+begin_quote
The simple package for fast log selected region
[[https://github.com/Artawower/turbo-log]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package turbo-log))
#+end_src
*** COMMENT twist                                        :configuration:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-02 Wed 14:12]
:END:
#+begin_quote
Frontend to Twist configuration
[[https://github.com/akirak/twist.el]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package twist))
#+end_src
*** twist
:PROPERTIES:
:CREATED_TIME: [2023-04-10 Mon 23:59]
:END:
#+begin_quote
Hot-reload packages with twist
[[https://github.com/emacs-twist/twist.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package twist)
    (add-hook 'emacs-startup-hook #'twist-watch-mode)
    (:global "<f12> e R" #'twist-update))
#+end_src
*** COMMENT unmodified-buffer                              :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:58]
:END:

#+begin_src emacs-lisp
  (setup (:package unmodified-buffer)
    (:hook-into after-init-hook))
#+end_src
*** use-package
:PROPERTIES:
:CREATED_TIME: [2022-03-14 Mon 14:04]
:END:
I don't use use-package, but I only need indentation:

#+begin_src emacs-lisp
  (put 'use-package 'lisp-indent-function 1)
#+end_src
*** COMMENT utop                                                  :@extra:OCaml:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2023-01-14 Sat 17:17]
:END:
#+begin_quote
Universal toplevel for OCaml
[[https://github.com/ocaml-community/utop]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package utop)
    ;; (:nixpkgs "ocamlPackages.utop")
    (:set utop-edit-command nil))
#+end_src
*** valign
:PROPERTIES:
:CREATED_TIME: [2022-11-04 Fri 23:59]
:END:
#+begin_quote
Visually align tables
[[https://github.com/casouri/valign]]
#+end_quote

#+begin_quote
This package provides visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters and images. 
#+end_quote

#+begin_src emacs-lisp
  (setup (:package valign)
    (:hook-into org-mode))
#+end_src
*** vertico                                  :minibuffer:completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 16:59]
:END:
#+begin_quote
VERTical Interactive COmpletion
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vertico)
    (:hook-into after-init-hook)
    (:set vertico-resize t)
    (:with-map vertico-map
      (:bind "C-r" #'previous-matching-history-element
             "C-s" #'next-matching-history-element
             "C-o" #'vertico-next-group
             "C-S-o" #'vertico-previous-group)))
#+end_src

For more tips, see [[https://github.com/minad/vertico/wiki][Home · minad/vertico Wiki · GitHub]].

An alternative is icomplete (or icomplete-vertical).
See the following [[https://github.com/minad/vertico][comment]] for differences:

#+begin_quote
In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum.
#+end_quote
*** visual-fill-column
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:
#+begin_quote
fill-column for visual-line-mode
[[https://codeberg.org/joostkremers/visual-fill-column]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package visual-fill-column)
    (:set visual-fill-column-center-text t
          visual-fill-column-width 100))
#+end_src
*** COMMENT vterm                                             :terminal:process:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 16:50]
:END:
#+begin_quote
Fully-featured terminal emulator
[[https://github.com/akermu/emacs-libvterm]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vterm)
    (:unbind "M-1" "M-2" "M-3" "M-4" "M-5" "M-6" "M-7" "M-8" "M-9" "M-0"
             "M-:" "M-g" "M-s" "C-z"
             "<f1>" "<f2>" "<f3>" "<f4>" "<f5>" "<f6>"
             "<f7>" "<f8>" "<f9>" "<f10>" "<f11>" "<f12>")
    (:bind "<f8>" #'vterm-send-next-key))
#+end_src
*** vue-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-11 Thu 12:11]
:END:
#+begin_quote
Major mode for vue component based on mmm-mode
[[https://github.com/AdamNiederer/vue-mode]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package vue-mode)
    (:file-match "\\.vue\\'"))
#+end_src
*** web-mode
:PROPERTIES:
:CREATED_TIME: [2022-04-28 Thu 18:37]
:END:
#+begin_quote
major mode for editing web templates
[[https://web-mode.org]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package web-mode)
    (:set web-mode-enable-front-matter-block t)
    (:org-src-lang "html")
    (:file-match "\\.mdx\\'"
                 "\\.html?\\'"
                 "\\.html\\.h?eex\\'"
                 "\\.astro\\'"
                 "\\.sface\\'")

    (:bind "C-c /" #'akirak-web-mode-surround
           [remap end-of-defun] #'web-mode-forward-sexp
           [remap down-list] #'web-mode-element-child
           [remap backward-up-list] #'web-mode-element-parent
           [remap forward-sexp] (defun akirak/web-mode-forward-tag-or-sexp ()
                                  (interactive)
                                  (if-let (tag-end (and (looking-at "<")
                                                        (web-mode-tag-end-position)))
                                      (goto-char (1+ tag-end))
                                    (forward-sexp))))

    (:auto-insert
     ("\\.astro\\'" . (> "---\n" _ "\n---\n"))))
#+end_src
*** which-key                                :usability:keybindings:
#+begin_quote
Display available keybindings in popup
[[https://github.com/justbur/emacs-which-key]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package which-key)
    (:hook-into after-init-hook)
    (:hook which-key-setup-side-window-bottom))
#+end_src
*** whole-line-or-region
:PROPERTIES:
:CREATED_TIME: [2022-05-04 Wed 09:17]
:END:
#+begin_quote
Operate on current line if region undefined
#+end_quote

#+begin_src emacs-lisp
  (setup (:package whole-line-or-region)
    (:global "C-c r"
             (defun akirak/anzu-query-replace-on-line (arg)
               (interactive "P")
               (require 'anzu)
               (require 'whole-line-or-region)
               (whole-line-or-region-wrap-modified-region #'anzu-query-replace-regexp
                                                          (if (numberp arg)
                                                              arg
                                                            1)
                                                          arg)))

    ;; whole-line-or-region version of indent-rigidly. Useful for editing YAML.
    (defun akirak/indent-rigidly-line-or-region (&optional arg)
      (interactive "P")
      (require 'whole-line-or-region)
      (whole-line-or-region-wrap-beg-end #'indent-rigidly
                                         1
                                         (if (numberp arg)
                                             arg
                                           tab-width)))
    (defun akirak/indent-rigidly-left-line-or-region (arg)
      (interactive "P")
      (require 'whole-line-or-region)
      (whole-line-or-region-wrap-beg-end #'indent-rigidly
                                         1
                                         (if (numberp arg)
                                             (- arg)
                                           (- tab-width))))

    (defvar akirak/indent-rigidly-map
      (make-sparse-keymap))
    (put 'akirak/indent-rigidly-line-or-region 'repeat-map 'akirak/indent-rigidly-map)
    (put 'akirak/indent-rigidly-left-line-or-region 'repeat-map 'akirak/indent-rigidly-map)
    (global-set-key (kbd "C-x TAB") #'akirak/indent-rigidly-line-or-region)
    (global-set-key (kbd "C-x <backtab>") #'akirak/indent-rigidly-left-line-or-region)
    (define-key akirak/indent-rigidly-map (kbd "TAB")
                #'akirak/indent-rigidly-line-or-region)
    (define-key akirak/indent-rigidly-map (kbd "<backtab>")
                #'akirak/indent-rigidly-left-line-or-region))
#+end_src
*** COMMENT windswap                                       :windows:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-02-24 Thu 13:52]
:END:
#+begin_quote
Like windmove, but swaps buffers while moving point
#+end_quote

#+begin_src emacs-lisp
  (setup (:package windswap)
    (:status opinionated
      (:global "<C-S-left>" #'windswap-left
               "<C-S-right>" #'windswap-right
               "<C-S-up>" #'windswap-up
               "<C-S-down>" #'windswap-down

               ;; There are corresponding keybindings for windmove.
               "C-c {" #'windswap-left
               "C-c }" #'windswap-right)

      ;; These keys are bound by default in org-mode, so unbind them.
      (:with-feature org
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))
      (:with-feature org-agenda
        (:when-loaded
          (:unbind
           "<C-S-left>"
           "<C-S-right>"
           "<C-S-up>"
           "<C-S-down>")))))
#+end_src
*** workbox                                                            :project:
:PROPERTIES:
:CREATED_TIME: [2022-02-16 Wed 15:16]
:END:
#+begin_quote
Compilation helpers
[[https://github.com/akirak/workbox.el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package workbox)
    (:global "C-c SPC" #'workbox-transient)
    (with-eval-after-load 'project
      (define-key project-prefix-map "m" #'workbox-run-some-package-manager))

    (:set workbox-mix-command-runner #'eshell-command))
#+end_src
*** ws-butler                                           :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 19:16]
:END:
#+begin_quote
Unobtrusively remove trailing whitespace.
[[https://github.com/lewang/ws-butler]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package ws-butler)
    (:hook-into prog-mode-hook))
#+end_src
*** xterm-color
:PROPERTIES:
:CREATED_TIME: [2022-03-04 Fri 19:00]
:END:
#+begin_quote
ANSI, XTERM 256 and Truecolor support
[[https://github.com/atomontage/xterm-color]]
#+end_quote

#+begin_src emacs-lisp
(setup (:package xterm-color))
#+end_src

This package is required by the configuration for buttercup now.
*** z3-mode
:PROPERTIES:
:CREATED_TIME: [2023-01-09 Mon 23:59]
:END:
#+begin_quote
A z3/SMTLIBv2 interactive development environment
#+end_quote

#+begin_src emacs-lisp
(setup (:package z3-mode))
#+end_src
*** zig-mode
:PROPERTIES:
:CREATED_TIME: [2022-08-17 Wed 14:14]
:END:
#+begin_quote
A major mode for the Zig programming language
#+end_quote

#+begin_src emacs-lisp
  (setup (:package zig-mode)
    (:file-match "\\.zig\\'"))
#+end_src
** Workarounds
*** Package management
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 12:54]
:SORTING_TYPE: a
:END:
**** Haskell
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 13:00]
:END:
#+begin_src elisp
  (setup hpack
    (:package-files "package.yaml"))
#+end_src
**** Mix (Elixir)
#+begin_src elisp
  (setup mix
    (:package-files "mix.exs"))
#+end_src
**** Node.js and Bun
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 12:59]
:END:
#+begin_src elisp
  (setup npm
    (:package-files "package.json"))
#+end_src
**** OCaml (opam and dune)
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 12:54]
:END:
#+begin_src elisp
  (setup dune
    (:package-files "dune" "dune-project")

    (defun akirak/dune-browse-doc ()
      "Browse package documentation for the project."
      (interactive)
      (let ((root (locate-dominating-file default-directory "dune-project")))
        (if root
            (akirak-open-file-externally
             (expand-file-name "_build/default/_doc/_html/index.html" root))
          (user-error "dune-project is not found"))))

    (defun akirak/utop-project ()
      (interactive)
      (let* ((root (locate-dominating-file default-directory "dune-project"))
             (pr (project-current))
             (name (if pr
                       (format "utop-%s" (project-name pr))
                     "utop")))
        (pop-to-buffer (apply #'eat-make name
                              (if root
                                  (list "opam" nil
                                        "exec" "--" "dune" "utop"
                                        (shell-quote-argument (file-relative-name root)))
                                (cond
                                 ((executable-find "utop")
                                  '("utop"))
                                 ((executable-find "opam")
                                  '("opam" nil "exec" "--" "utop"))
                                 (t
                                  (user-error "Neither utop nor opam is available")))))))))
#+end_src
*** Org mode
Define how Org entries are displayed by certain commands.
#+begin_src emacs-lisp
  (add-hook 'org-follow-link-hook
            (defun akirak/org-follow-link-reveal ()
              (when-let* ((buffer (window-buffer (selected-window)))
                          (marker (and (eq 'org-mode (buffer-local-value 'major-mode buffer))
                                       (or (looking-at org-heading-regexp)
                                           (when-let (uri (cadr (get-char-property (point) 'htmlize-link)))
                                             (string-match-p "^id:" uri)))
                                       (not (and (thing-at-point-looking-at org-link-any-re)
                                                 (match-string 1)))
                                       (point-marker)))
                          (indirect-buffer (and (fboundp 'org-dog-indirect-buffer)
                                                (org-with-point-at marker
                                                  (org-dog-indirect-buffer)))))
                (set-window-configuration org-window-config-before-follow-link)
                (let ((switch-to-buffer-obey-display-actions nil))
                  (switch-to-buffer indirect-buffer nil t))
                (with-current-buffer indirect-buffer
                  (goto-char marker)
                  (when org-dog-new-indirect-buffer-p
                    (org-show-context)
                    (org-show-entry)
                    (org-show-children))))))

  (add-hook 'org-agenda-after-show-hook
            (defun akirak/org-agenda-show-entry ()
              (let ((switch-to-buffer-obey-display-actions nil))
                (switch-to-buffer (org-dog-indirect-buffer) nil t))))

  (defun akirak/org-goto-indirect-hook ()
    (when (fboundp 'org-dog-indirect-buffer)
      (let ((buffer (org-dog-indirect-buffer))
            (switch-to-buffer-obey-display-actions nil))
        (switch-to-buffer buffer nil t)
        (when org-dog-new-indirect-buffer-p
          (with-current-buffer buffer
            (org-show-context)
            (org-show-entry)
            (org-show-children)
            (akirak/org-recenter-toplevel-at-top))))))

  (add-hook 'org-pivot-search-entry-display-hook
            (defun akirak/org-pivot-search-after-display ()
              (org-show-context)
              (org-show-entry)
              (org-show-children)
              (if (buffer-narrowed-p)
                  (akirak/org-recenter-toplevel-at-top)
                (recenter))))
  (setq org-placeholder-find-hook #'akirak/org-goto-indirect-hook)

  (defun akirak/org-recenter-toplevel-at-top ()
    (unless (org-before-first-heading-p)
      ;; (save-excursion
      ;;   (let ((regexp (rx bol "*" blank)))
      ;;     (when (or (looking-at regexp)
      ;;               (re-search-backward regexp nil t))
      ;;       (recenter-top-bottom 0))))
      (recenter-top-bottom 0)))

  (setq akirak-org-clock-open-hook '(org-show-entry
                                     org-show-children))

  (setq akirak-org-log-week-entry-hook
        '(org-fold-hide-subtree
          org-fold-show-children
          (lambda () (org-fold-show-entry t))))
#+end_src
**** Advices and el-patches
Org frequently calls =delete-other-windows=, some of which I find annoying.
They are built into big functions in the library, so I use =el-patch= to remove them.

#+begin_src emacs-lisp
  ;; A function advice to prevent the default behavior which run
  ;; `delete-other-windows' to show a completion window.
  (setup window
    (:status opinionated
      (advice-add 'delete-other-windows
                  :before-while
                  (defun akirak/org-allow-delete-other-windows-p (&rest _args)
                    (not (memq this-command '(org-todo
                                              org-agenda-todo
                                              org-agenda)))))))

  (setup org
    (:status opinionated
      (:el-patch
        (el-patch-defun org-fast-todo-selection (&optional current-state)
          "Fast TODO keyword selection with single keys.
  Returns the new TODO keyword, or nil if no state change should occur.
  When CURRENT-STATE is given and selection letters are not unique globally,
  prefer a state in the current sequence over on in another sequence."
          (let* ((fulltable org-todo-key-alist)
                 (head (org-get-todo-sequence-head current-state))
                 (done-keywords org-done-keywords) ;; needed for the faces.
                 (maxlen (apply 'max (mapcar
                                      (lambda (x)
                                        (if (stringp (car x)) (string-width (car x)) 0))
                                      fulltable)))
                 (expert (equal org-use-fast-todo-selection 'expert))
                 (prompt "")
                 (fwidth (+ maxlen 3 1 3))
                 (ncol (/ (- (window-width) 4) fwidth))
                 tg cnt e c tbl subtable
                 groups ingroup in-current-sequence)
            (save-excursion
              (save-window-excursion
                (if expert
                    (set-buffer (get-buffer-create " *Org todo*"))
                  (el-patch-remove (delete-other-windows))
                  (set-window-buffer (split-window-vertically) (get-buffer-create " *Org todo*"))
                  (org-switch-to-buffer-other-window " *Org todo*")
                  (el-patch-add (fit-window-to-buffer)))
                (erase-buffer)
                (setq-local org-done-keywords done-keywords)
                (setq tbl fulltable cnt 0)
                (while (setq e (pop tbl))
                  (cond
                   ((equal e '(:startgroup))
                    (push '() groups) (setq ingroup t)
                    (unless (= cnt 0)
                      (setq cnt 0)
                      (insert "\n"))
                    (setq prompt (concat prompt "{"))
                    (insert "{ "))
                   ((equal e '(:endgroup))
                    (setq ingroup nil cnt 0 in-current-sequence nil)
                    (setq prompt (concat prompt "}"))
                    (insert "}\n"))
                   ((equal e '(:newline))
                    (unless (= cnt 0)
                      (setq cnt 0)
                      (insert "\n")
                      (setq e (car tbl))
                      (while (equal (car tbl) '(:newline))
                        (insert "\n")
                        (setq tbl (cdr tbl)))))
                   (t
                    (setq tg (car e) c (cdr e))
                    (if (equal tg head) (setq in-current-sequence t))
                    (when ingroup (push tg (car groups)))
                    (when in-current-sequence (push e subtable))
                    (setq tg (org-add-props tg nil 'face
                                            (org-get-todo-face tg)))
                    (when (and (= cnt 0) (not ingroup)) (insert "  "))
                    (setq prompt (concat prompt "[" (char-to-string c) "] " tg " "))
                    (insert "[" c "] " tg (make-string
                                           (- fwidth 4 (length tg)) ?\ ))
                    (when (and (= (setq cnt (1+ cnt)) ncol)
                               ;; Avoid lines with just a closing delimiter.
                               (not (equal (car tbl) '(:endgroup))))
                      (insert "\n")
                      (when ingroup (insert "  "))
                      (setq cnt 0)))))
                (insert "\n")
                (goto-char (point-min))
                (unless expert (org-fit-window-to-buffer))
                (message (concat "[a-z..]:Set [SPC]:clear"
                                 (if expert (concat "\n" prompt) "")))
                (setq c (let ((inhibit-quit t)) (read-char-exclusive)))
                (setq subtable (nreverse subtable))
                (cond
                 ((or (= c ?\C-g)
                      (and (= c ?q) (not (rassoc c fulltable))))
                  (setq quit-flag t))
                 ((= c ?\ ) nil)
                 ((setq e (or (rassoc c subtable) (rassoc c fulltable))
                        tg (car e))
                  tg)
                 (t (setq quit-flag t)))))))

        (el-patch-defun org-add-log-note (&optional _purpose)
          "Pop up a window for taking a note, and add this note later."
          (remove-hook 'post-command-hook 'org-add-log-note)
          (setq org-log-setup nil)
          (setq org-log-note-window-configuration (current-window-configuration))
          (el-patch-remove (delete-other-windows))
          (move-marker org-log-note-return-to (point))
          (pop-to-buffer-same-window (marker-buffer org-log-note-marker))
          (goto-char org-log-note-marker)
          (org-switch-to-buffer-other-window "*Org Note*")
          (erase-buffer)
          (if (memq org-log-note-how '(time state))
              (org-store-log-note)
            (let ((org-inhibit-startup t)) (org-mode))
            (insert (format "# Insert note for %s.
  # Finish with C-c C-c, or cancel with C-c C-k.\n\n"
                            (cl-case org-log-note-purpose
                              (clock-out "stopped clock")
                              (done "closed todo item")
                              (reschedule "rescheduling")
                              (delschedule "no longer scheduled")
                              (redeadline "changing deadline")
                              (deldeadline "removing deadline")
                              (refile "refiling")
                              (note "this entry")
                              (state
                               (format "state change from \"%s\" to \"%s\""
                                       (or org-log-note-previous-state "")
                                       (or org-log-note-state "")))
                              (t (error "This should not happen")))))
            (when org-log-note-extra (insert org-log-note-extra))
            (setq-local org-finish-function 'org-store-log-note)
            (run-hooks 'org-log-buffer-setup-hook)))

        (el-patch-defun org-offer-links-in-entry (buffer marker &optional nth zero)
          "Offer links in the current entry and return the selected link.
  If there is only one link, return it.
  If NTH is an integer, return the NTH link found.
  If ZERO is a string, check also this string for a link, and if
  there is one, return it."
          (with-current-buffer buffer
            (org-with-wide-buffer
             (goto-char marker)
             (let ((cnt ?0)
                   have-zero end links link c)
               (when (and (stringp zero) (string-match org-link-bracket-re zero))
                 (push (match-string 0 zero) links)
                 (setq cnt (1- cnt) have-zero t))
               (save-excursion
                 (org-back-to-heading t)
                 (setq end (save-excursion (outline-next-heading) (point)))
                 (while (re-search-forward org-link-any-re end t)
                   ;; Only consider valid links or links openable via
                   ;; `org-open-at-point'.
                   (when (memq (org-element-type (org-element-context)) '(link comment comment-block node-property keyword))
                     (push (match-string 0) links)))
                 (setq links (org-uniquify (reverse links)))
                 (el-patch-add (narrow-to-region (org-entry-beginning-position)
                                                 (org-entry-end-position))))
               (cond
                ((null links)
                 (message "No links"))
                ((equal (length links) 1)
                 (setq link (car links)))
                ((and (integerp nth) (>= (length links) (if have-zero (1+ nth) nth)))
                 (setq link (nth (if have-zero nth (1- nth)) links)))
                (t                        ; we have to select a link
                 (save-excursion
                   (save-window-excursion
                     (el-patch-remove (delete-other-windows))
                     (with-output-to-temp-buffer "*Select Link*"
                       (dolist (l links)
                         (cond
                          ((not (string-match org-link-bracket-re l))
                           (princ (format "[%c]  %s\n" (cl-incf cnt)
                                          (org-unbracket-string "<" ">" l))))
                          ((match-end 2)
                           (princ (format "[%c]  %s (%s)\n" (cl-incf cnt)
                                          (match-string 2 l) (match-string 1 l))))
                          (t (princ (format "[%c]  %s\n" (cl-incf cnt)
                                            (match-string 1 l)))))))
                     (org-fit-window-to-buffer (get-buffer-window "*Select Link*"))
                     (message "Select link to open, RET to open all:")
                     (setq c (read-char-exclusive))
                     (and (get-buffer "*Select Link*") (kill-buffer "*Select Link*"))))
                 (when (equal c ?q) (user-error "Abort"))
                 (if (equal c ?\C-m)
                     (setq link links)
                   (setq nth (- c ?0))
                   (when have-zero (setq nth (1+ nth)))
                   (unless (and (integerp nth) (>= (length links) nth))
                     (user-error "Invalid link selection"))
                   (setq link (nth (1- nth) links)))))
               (cons link end))))))))

  (setup org
    (:status opinionated
      (defun akirak/ad-reuse-mode-window (&rest _)
        ;; Assume `switch-to-buffer-obey-display-actions' is t.
        (unless (car-safe display-buffer-overriding-action)
          (display-buffer-override-next-command
           (lambda (buffer alist)
             (let ((alist (append '((inhibit-same-window . t)) alist))
                   window type)
               (if (setq window (display-buffer-reuse-mode-window
                                 buffer alist))
                   (setq type 'reuse)
                 (setq window (display-buffer-use-some-window buffer alist)
                       type 'reuse))
               (cons window type))))))

      (advice-add 'org-agenda-goto
                  :before #'akirak/ad-reuse-mode-window)
      (advice-add 'org-memento-timeline-open-entry
                  :before #'akirak/ad-reuse-mode-window)))

  (setup org-capture
    (:status opinionated
      (:el-patch
        (el-patch-defun org-capture-place-template (&optional inhibit-wconf-store)
          "Insert the template at the target location, and display the buffer.
  When INHIBIT-WCONF-STORE is non-nil, don't store the window configuration, as it
  may have been stored before."
          (unless inhibit-wconf-store
            (org-capture-put :return-to-wconf (current-window-configuration)))
          (el-patch-remove (delete-other-windows))
          (org-switch-to-buffer-other-window
           (org-capture-get-indirect-buffer (org-capture-get :buffer) "CAPTURE"))
          (widen)
          (org-show-all)
          (goto-char (org-capture-get :pos))
          (setq-local outline-level 'org-outline-level)
          (pcase (org-capture-get :type)
            ((or `nil `entry) (org-capture-place-entry))
            (`table-line (org-capture-place-table-line))
            (`plain (org-capture-place-plain-text))
            (`item (org-capture-place-item))
            (`checkitem (org-capture-place-item)))
          (setq-local org-capture-current-plist org-capture-plist)
          (org-capture-mode 1)))))
#+end_src
** Post init
Load my personal settings after all the things.

#+begin_src emacs-lisp
  (setup init
    (:status personal
      (let ((file "~/org/config.el"))
        (when (file-readable-p file)
          (load-file file)))

      (when (and custom-file (file-readable-p custom-file))
        (load custom-file))))
#+end_src
** Notes                                                      :@note:
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:CUSTOM_ID: develop-org-configuration
:END:
This configuration is maintained in Org.

1. Use =org-capture= to add an entry to the configuration file. It should contain a source block with a package name.
2. Add further configuration for the package. Optionally set tags on the heading.
3. When the buffer is saved, Org entries are automatically sorted by package name. This feature depends on the pre-commit hook of this repository.
*** Tag statistics
The following source block generates a list of tags in this document.
If you have [[https://github.com/alphapapa/org-ql/][org-ql]] installed, you can browse matching entries by pressing =C-c C-o= on a link in the table.

#+name: tag-statistics
#+begin_src emacs-lisp :tangle no
  (->> (org-ql-select (current-buffer)
         '(and (level > 2)
               (not (tags "ARCHIVE"))
               (not (tags "noexport")))
         :action '(org-get-tags))
       (--filter (not (member "@note" it)))
       (-flatten-n 1)
       (-group-by #'identity)
       (-map (pcase-lambda (`(,tag . ,items))
               (cons tag (length items))))
       (-sort (-on #'> #'cdr))
       (-map (pcase-lambda (`(,tag . ,count))
               (list (format "[[org-ql-search:tags:%s][%s]]" tag tag)
                     count))))
#+end_src

#+RESULTS: tag-statistics
| [[org-ql-search:tags:packages][packages]]            | 212 |
| [[org-ql-search:tags:visual][visual]]              |  14 |
| [[org-ql-search:tags:UI][UI]]                  |  13 |
| [[org-ql-search:tags:formatting][formatting]]          |  11 |
| [[org-ql-search:tags:@extra][@extra]]              |   9 |
| [[org-ql-search:tags:development][development]]         |   8 |
| [[org-ql-search:tags:library][library]]             |   8 |
| [[org-ql-search:tags:editing][editing]]             |   7 |
| [[org-ql-search:tags:Emacs][Emacs]]               |   6 |
| [[org-ql-search:tags:VC][VC]]                  |   6 |
| [[org-ql-search:tags:completion][completion]]          |   6 |
| [[org-ql-search:tags:major__mode][major__mode]]         |   5 |
| [[org-ql-search:tags:dired][dired]]               |   4 |
| [[org-ql-search:tags:Emacs__Lisp][Emacs__Lisp]]         |   4 |
| [[org-ql-search:tags:files][files]]               |   4 |
| [[org-ql-search:tags:history][history]]             |   4 |
| [[org-ql-search:tags:writing][writing]]             |   4 |
| [[org-ql-search:tags:windows][windows]]             |   4 |
| [[org-ql-search:tags:IO][IO]]                  |   3 |
| [[org-ql-search:tags:process][process]]             |   3 |
| [[org-ql-search:tags:parentheses][parentheses]]         |   3 |
| [[org-ql-search:tags:keybindings][keybindings]]         |   3 |
| [[org-ql-search:tags:minibuffer][minibuffer]]          |   3 |
| [[org-ql-search:tags:navigation][navigation]]          |   3 |
| [[org-ql-search:tags:fstar][fstar]]               |   3 |
| [[org-ql-search:tags:web][web]]                 |   3 |
| [[org-ql-search:tags:structured__editing][structured__editing]] |   3 |
| [[org-ql-search:tags:Nix][Nix]]                 |   3 |
| [[org-ql-search:tags:project][project]]             |   3 |
| [[org-ql-search:tags:Japanese][Japanese]]            |   3 |
| [[org-ql-search:tags:expansion][expansion]]           |   2 |
| [[org-ql-search:tags:diff][diff]]                |   2 |
| [[org-ql-search:tags:Prolog][Prolog]]              |   2 |
| [[org-ql-search:tags:regexp][regexp]]              |   2 |
| [[org-ql-search:tags:major_mode][major_mode]]          |   2 |
| [[org-ql-search:tags:OCaml][OCaml]]               |   2 |
| [[org-ql-search:tags:lsp_mode][lsp_mode]]            |   2 |
| [[org-ql-search:tags:links][links]]               |   2 |
| [[org-ql-search:tags:git][git]]                 |   2 |
| [[org-ql-search:tags:performance][performance]]         |   1 |
| [[org-ql-search:tags:help][help]]                |   1 |
| [[org-ql-search:tags:prog_mode][prog_mode]]           |   1 |
| [[org-ql-search:tags:text_mode][text_mode]]           |   1 |
| [[org-ql-search:tags:text][text]]                |   1 |
| [[org-ql-search:tags:profiling][profiling]]           |   1 |
| [[org-ql-search:tags:capture][capture]]             |   1 |
| [[org-ql-search:tags:documentation][documentation]]       |   1 |
| [[org-ql-search:tags:secrets][secrets]]             |   1 |
| [[org-ql-search:tags:clipboard][clipboard]]           |   1 |
| [[org-ql-search:tags:screenshot][screenshot]]          |   1 |
| [[org-ql-search:tags:Elixir][Elixir]]              |   1 |
| [[org-ql-search:tags:beancount][beancount]]           |   1 |
| [[org-ql-search:tags:testing][testing]]             |   1 |
| [[org-ql-search:tags:copilot][copilot]]             |   1 |
| [[org-ql-search:tags:grep][grep]]                |   1 |
| [[org-ql-search:tags:reference][reference]]           |   1 |
| [[org-ql-search:tags:search][search]]              |   1 |
| [[org-ql-search:tags:LSP][LSP]]                 |   1 |
| [[org-ql-search:tags:direnv][direnv]]              |   1 |
| [[org-ql-search:tags:dictionary][dictionary]]          |   1 |
| [[org-ql-search:tags:window][window]]              |   1 |
| [[org-ql-search:tags:translation][translation]]         |   1 |
| [[org-ql-search:tags:Terraform][Terraform]]           |   1 |
| [[org-ql-search:tags:OSS][OSS]]                 |   1 |
| [[org-ql-search:tags:social][social]]              |   1 |
| [[org-ql-search:tags:mermaid][mermaid]]             |   1 |
| [[org-ql-search:tags:aesthetics][aesthetics]]          |   1 |
| [[org-ql-search:tags:reading][reading]]             |   1 |
| [[org-ql-search:tags:EPUB][EPUB]]                |   1 |
| [[org-ql-search:tags:Chinese][Chinese]]             |   1 |
| [[org-ql-search:tags:Coq][Coq]]                 |   1 |
| [[org-ql-search:tags:colors][colors]]              |   1 |
| [[org-ql-search:tags:graphics][graphics]]            |   1 |
| [[org-ql-search:tags:usability][usability]]           |   1 |

Note that the table above is invisible on GitHub.
There is a table right before paragraph.
*** Web development
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:59]
:END:

The following packages (tagged =web=) are related to web development:

#+BEGIN: org-ql :query "tags:web" :columns (heading todo)
| Heading      | Todo |
|--------------+------|
| [[graphql-mode][graphql-mode]] |      |
| [[restclient][restclient]]   |      |
| [[tagedit][tagedit]]      |      |
#+END:

- You will want to test web APIs from inside Emacs. You can choose either [[https://github.com/pashky/restclient.el][restclient]] or [[https://github.com/federicotdn/verb][verb]] for this purpose.
- I am not sure if Indium or skewer-mode is suitable for modern web development. I have never used any of them.

*** Syntax support
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:20]
:END:

There are some packages for structured editing:

#+BEGIN: org-ql :query "tags:structured__editing" :columns (heading todo)
| Heading     | Todo |
|-------------+------|
| [[lispy][lispy]]       |      |
| [[puni][puni]]        |      |
| [[akirak-puni][akirak-puni]] |      |
#+END:

I like the idea of [[https://github.com/mickeynp/combobulate][combobulate]], but it looks immature at present.
I will consider it in the future.
*** Readability
I want to care about readability in the following modes:

- [ ] nov
- [ ] info
- [ ] helpful

See examples in [[https://depp.brause.cc/nov.el/][nov.el: Major mode for reading EPUBs in Emacs]].
*** Extra dependencies
=@extra= tag is used to denote packages that requires large dependencies.
To use these features, they need to be turned on at build time.

#+BEGIN: org-ql :query "tags:@extra" :columns (heading todo)
| Heading      | Todo |
|--------------+------|
| [[beancount][beancount]]    |      |
| [[copilot][copilot]]      |      |
| [[dune][dune]]         |      |
| [[flycheck][flycheck]]     |      |
| [[fstar-mode][fstar-mode]]   |      |
| [[lean4-mode][lean4-mode]]   |      |
| [[lsp-mode][lsp-mode]]     |      |
| [[mermaid-mode][mermaid-mode]] |      |
| [[Coq][Coq]]          |      |
| [[tuareg][tuareg]]       |      |
| [[utop][utop]]         |      |
#+END:
*** Links
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 18:27]
:END:
#+BEGIN: org-ql :query "tags:links" :columns (heading todo)
| Heading   | Todo |
|-----------+------|
| [[orglink][orglink]]   |      |
| [[link-hint][link-hint]] |      |
| [[orgit][orgit]]     |      |
#+END:
*** Window management
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:07]
:END:
#+BEGIN: org-ql :query "tags:windows" :columns (heading todo)
| Heading       | Todo |
|---------------+------|
| [[fullframe][fullframe]]     |      |
| [[windmove][windmove]]      |      |
| [[winner][winner]]        |      |
| [[akirak-window][akirak-window]] |      |
| [[popper][popper]]        |      |
| [[repl-toggle][repl-toggle]]   |      |
| [[windswap][windswap]]      |      |
#+END:
*** Annotating
:PROPERTIES:
:CREATED_TIME: [2022-02-17 Thu 23:59]
:END:
You can use org-remark to annotate texts in file buffers.

To annotate EPUB files in nov.el, you can use org-noter. It also supports PDF files (via =pdf-tools= package), but I won't use pdf-tools package.
*** Natural languages
#+BEGIN: org-ql :query "tags:dictionary" :columns (heading todo)
| Heading | Todo |
|---------+------|
| [[fanyi][fanyi]]   |      |
#+END:
*** Grep
[[https://github.com/minad/affe][affe]] doesn't look mature enough, but I will re-evaluate it later.
*** Sh-emulation keybindings
I rebind the following keys in some keymaps to emulate a typical UNIX shell:
C-a, C-e, C-u, C-w, C-h.
