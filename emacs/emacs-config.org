* An Optimist's Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#built-ins][Built-ins]]
- [[#basic-appearances][Basic appearances]]
- [[#custom-conventions][Custom conventions]]
- [[#org][Org]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
:END:
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :compilation-error
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :compilation-error (&rest alist)
      "Add entries to the compilation error regexp alist."
      `(with-eval-after-load 'compile
         (dolist (entry (quote ,alist))
           (if (stringp (car entry))
               (add-to-list 'compilation-error-regexp-alist entry)
             (add-to-list 'compilation-error-regexp-alist (car entry))
             (add-to-list 'compilation-error-regexp-alist-alist entry))))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
** Performance                                                    :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                               :profiling:initialization:
#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                                      :performance:
#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:option gcmh-verbose t))
#+end_src
** Built-ins
:PROPERTIES:
:SORTING_TYPE: a
:END:
# Note: These should never fail.
*** autorevert                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup autorevert
    (:with-mode global-auto-revert-mode
      (:hook-into after-init-hook)))
#+end_src
*** buffer.c                                        :formatting:visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:
#+begin_src emacs-lisp
  (setup buffer
    (:option buffer-file-coding-system 'utf-8
             fill-column 80
             indicate-empty-lines t
             truncate-lines t))
#+end_src
*** callproc.c                                                    :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup callproc
    (:only-if (eq system-type 'windows-nt))
    (:option shell-file-name (executable-find "bash")))
#+end_src
*** compile                                                       :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup compile
    (:option compilation-auto-jump-to-first-error t
             compilation-scroll-output t)

    (:compilation-error
     (eslint "^\\(\\(?:ERROR\\|WARNING\\)\\) in \\([^z-a]*?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
             2 3 4 (1 . 1))

     (eslint-fix "^\\(/home/.+\\)\n[[:space:]]+\\([[:digit:]]+\\):\\([[:digit:]]+\\)[[:space:]]+\\(\\(?:WARNING\\|error\\)\\)"
                 1 2 3 (4 . 4))

     (prettier "^\\[\\(\\(?:WARNING\\|error\\)\\)] \\([^z-a]*?\\): [^z-a]+(\\([[:digit:]]+\\):\\([[:digit:]]+\\))"
               2 3 4 (1 . 1))

     ;; Unused argument `hsuper` at default.nix:9:24-15:6
     (nix-linter " at \\([^:]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:digit:]]+$"
                 1 2 3)

     ;; path:67:23-45:
     (hlint "^\\([/[:alnum:]][./[:alnum:]]*\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)-[[:digit:]]+:[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
            1 2 3 (4 . 4))

     ;; unknown
     ("^\\([/[:alnum:]][./[:alnum:]]*\\):(\\([[:digit:]]+\\),\\([[:digit:]]+\\))-([[:digit:]]+,[[:digit:]]+):[[:space:]]*\\(\\(?:Suggestion\\|Warning\\|error\\|warning\\)\\):[[:space:]].+"
      1 2 3 (4 . 4))

     ;; Emacs checkdoc/byte-compile, GHC, etc.
     ;; path:line:col: error:
     (emacs-lisp "\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*\\(?:Error\\|error\\|warning\\):"
                 1 2 3 (4 . 4))

     ;; ** (SyntaxError) xxx/xxx/xxx.ex:97:29: syntax error before: '{'
     (iex "^\\*+([^z-a]+)\\([^:[:space:]]+\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\):[[:space:]]*"
          1 2 3 (4 . 4))))
#+end_src
*** ediff-wind                                                       :diff:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup ediff-wind
    (:option ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
*** elec-pair                             :prog_mode:text_mode:parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup elec-pair
    (:with-mode electric-pair-mode
      (:hook-into after-init-hook)))
#+end_src

While the mode is generally useful, the exception is =lispy-mode=, which overrides =self-insert-command= and conflicts with the features of the package.
*** electric                                                       :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

The built-in =electric= package provides the following modes:

- [ ] =electric-indent-mode= :: Use major-mode specific indentation functions instead?
- [ ] =electric-layout-mode= :: It may be useful in some programming modes
- [ ] =electric-quote-mode= :: Maybe I'll turn it on in some specific projects

#+begin_src emacs-lisp
  (setup electric)
#+end_src
*** fileio.c                                                        :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fileio
    (:option delete-by-moving-to-trash t))
#+end_src
*** filelock.c                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup filelock
    ;; lock files will kill `npm start'
    (:option create-lockfiles nil))
#+end_src
*** files                                                           :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup files
    (:option backup-by-copying t
             delete-old-versions t
             version-control t
             view-read-only t
             auto-mode-case-fold nil))
#+end_src
*** fns.c and xfns.c                                                   :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fns
    (:option use-dialog-box nil))

  (setup xfns
    (:option x-gtk-use-system-tooltips nil))
#+end_src
*** frame                                                          :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup frame
    (blink-cursor-mode -1))
#+end_src
*** hl-line                                                        :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup hl-line
    (:with-mode hl-line-mode
      (:hook-into prog-mode-hook
                  text-mode-hook)))
#+end_src
*** indent
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:08]
:END:

#+begin_src emacs-lisp
  (setup indent
    (:option tab-always-indent 'complete))
#+end_src
*** indent.c                                                   :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup indent
    (defun akirak/turn-on-indent-tabs-mode ()
      (interactive)
      (setq indent-tabs-mode 1))

    (dolist (mode-hook '(makefile-mode-hook))
      (add-hook mode-hook 'akirak/turn-on-indent-tabs-mode)))
#+end_src
*** minibuf.c                                                  :minibuffer:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:06]
:END:

Use the recommended settings for vertico.

#+begin_src emacs-lisp
  (setup minibuf.c
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

*** mule
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    (set-language-environment "UTF-8"))
#+end_src
*** paragraphs                                                       :text:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paragraphs
    (:option sentence-end-double-space nil))
#+end_src
*** paren                                                     :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paren
    (:with-mode show-paren-mode
      (:hook-into after-init-hook)))
#+end_src
*** pixel-scroll
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 17:27]
:END:

#+begin_src emacs-lisp
  (setup pixel-scroll
    (:only-if (version<= "29" emacs-version)
              (:with-mode pixel-scroll-precision-mode
                ;; TODO: Find a better way to hook the minor mode
                (:hook-into find-file-hook
                            eww-mode-hook
                            help-mode-hook))))
#+end_src
*** process.c                                                     :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup process
    ;; Expand read-process-output-max for lsp-mode
    (:option read-process-output-max (* 1024 1024)))
#+end_src
*** recentf                                                 :history:files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup recentf
    (:hook-into after-init-hook)
    (:option recentf-max-saved-items 200))
#+end_src
*** register
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:05]
:END:

#+begin_src emacs-lisp
  (setup register
    ;; Show the register preview immediately
    (:option register-preview-delay 0))
#+end_src
*** savehist                                                      :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:08]
:END:

#+begin_src emacs-lisp
  (setup savehist
    (:hook-into after-init-hook))
#+end_src

This is a recommended setting for use with vertico. See https://github.com/minad/vertico#configuration.
*** saveplace                                                     :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup saveplace
    (:with-mode save-place-mode
      (:hook-into after-init-hook)))
#+end_src
*** simple                                             :formatting:writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup simple
    (:global [remap count-words-region] #'count-words
             [remap delete-horizontal-space] #'cycle-spacing))
#+end_src
*** startup
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 19:45]
:END:
#+begin_src emacs-lisp
  (setup startup
    (:option inihibit-startup-screen t
             initial-buffer-choice t
             initial-scratch-message nil
             initial-major-mode 'fundamental-mode))
#+end_src

=*scratch*= buffer is shown at startup.
You can set =initial-buffer-choice= to a function or a buffer name depending on the context.
**** Initialization time
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collections"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
*** subr                                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup subr
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src
*** terminal.c                                                         :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup terminal
    (:option ring-bell-function 'ignore))
#+end_src
*** tooltip                                                            :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup tooltip
    (tooltip-mode -1))
#+end_src
*** vc-hooks                                                           :VC:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup vc-hooks
    (:option vc-follow-symlinks t
             vc-make-backup-files t))
#+end_src
*** view                                                       :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup view
    (:option view-inhibit-help-message t)

    (:with-map view-mode-map
      (:bind
       [remap scroll-up-command] #'View-scroll-half-page-forward
       [remap scroll-down-command] #'View-scroll-half-page-backward)))
#+end_src
*** whitespace                                          :visual:formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup whitespace
    (:option whitespace-style '(face trailing empty tabs)
             whitespace-line-column 80)
    (:hook-into prog-mode
                text-mode
                sgml-mode))
#+end_src
*** window                                                     :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup window
    (:option recenter-positions '(top middle bottom))

    (defun akirak/scroll-half-height (&optional window)
      (/ (1- (window-height (or window (selected-window)))) 2))

    (:global
     ;; TODO: scroll-other-window and scroll-other-window-down
     [remap scroll-up-command]
     (defun akirak/scroll-half-page-forward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-up arg)
         (scroll-up (akirak/scroll-half-height))))
     [remap scroll-down-command]
     (defun akirak/scroll-half-page-backward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-down arg)
         (scroll-down (akirak/scroll-half-height))))))
#+end_src
*** winner                                                        :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup winner
    (:hook-into after-init-hook))
#+end_src
*** xdisp.c
:PROPERTIES:
:CREATED_TIME: [2022-01-09 Sun 23:22]
:END:

#+begin_src emacs-lisp
  (setup xdisp
    ;; I have never encountered a situation where I need to deal with R-L
    ;; direction so far
    (:option bidi-inhibit-bpa t
             bidi-display-reordering 'left-to-right
             bidi-paragraph-direction 'left-to-right))
#+end_src
** Basic appearances                                                :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.

The following theme packages are bundled with configuration:

#+begin_src emacs-lisp
  (setup (:package doom-themes))

  (setup (:package nano-theme))

  (setup (:package poet-theme))
#+end_src

No theme is set by default.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(when init-file-user (require 'doom-themes) (load-theme 'doom-tomorrow-night t))"
#+end_src
*** Font families
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/base-face-family-alist
    '((default . "Cascadia Code")
      (fixed-pitch . "Cascadia Code")
      (variable-pitch . "Merriweather"))
    "Alist of font families for faces."
    :type '(alist :key-type symbol
                  :value-type string)
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face . ,family) value)
                 (if (member family families)
                     (set-face-attribute face nil :family family)
                   (message "Font family %s is not installed" family)))))))
#+end_src
** Custom conventions
*** Prefix for mode-specific commands
#+begin_src emacs-lisp
  (defcustom akirak/mode-prefix-key "C-,"
    "Prefix for mode-specific keybindings."
    :type 'string)
#+end_src
** Org                                                            :packages:
Embrace Org as a common document format for Emacs.
*** org-dynamic-bullets                                        :aesthetics:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-dynamic-bullets)
    (:hook-into org-mode-hook))
#+end_src
*** orglink
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:28]
:END:

=orglink-mode= lets you open links as in Org mode.

#+begin_src emacs-lisp
(setup (:package orglink))
#+end_src
*** org-visual-indent                                          :aesthetics:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package org-visual-indent)
    (:hook-into org-mode-hook))
#+end_src
** Packages                                                       :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** academic-phrases                                              :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:28]
:END:

#+begin_src emacs-lisp
(setup (:package academic-phrases))
#+end_src
*** ace-window                                                :keybindings:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:
#+begin_src emacs-lisp
  (setup (:package ace-window)
    (:option aw-keys (string-to-list "qwertyui")
             aw-background nil
             aw-ignore-on t
             aw-ignored-buffers '(" *LV*"
                                  minibuffer-mode
                                  "*Calc Trail*")
             aw-scope 'visible
             aw-dispatch-always t))
#+end_src
*** all-the-icons                                                      :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:28]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons))
#+end_src
**** all-the-icons-completion
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:29]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-completion)
    (with-eval-after-load 'marginalia
      (all-the-icons-completion-mode t)
      (add-hook 'marginalia-mode
                #'all-the-icons-completion-marginalia-setup)))
#+end_src
**** all-the-icons-dired
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:30]
:END:

#+begin_src emacs-lisp
  (setup (:package all-the-icons-dired)
    (:hook-into dired-mode))
#+end_src
*** bufler                                                        :ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 22:51]
:END:

#+begin_src emacs-lisp
  (setup (:package bufler)
    (bufler-mode t)
    ;; Use it as a replacement for ibuffer
    (:global "C-x C-b" #'bufler))
#+end_src
*** cape                                                       :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:17]
:END:

#+begin_src emacs-lisp
(setup (:package cape))
#+end_src
*** consult                                                    :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:33]
:END:

#+begin_src emacs-lisp
  (setup (:package consult)
    (:with-mode consult-preview-at-point-mode
      (:hook completion-list-mode))

    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    (:option consult-narrow-key "<"
             consult-project-root-function (defun akirak/consult-project-root ()
                                             (when-let (project (project-current))
                                               (project-root project))))

    (:global [remap switch-to-buffer] #'consult-buffer
             [remap bookmark-jump] #'consult-bookmark
             [remap yank-pop] #'consult-yank-pop
             "C-c k" #'consult-kmacro
             [remap goto-line] #'consult-goto-line
             "M-s m" #'consult-mark
             "M-s M-m" #'consult-global-mark
             "M-s o" #'consult-outline
             [remap isearch-forward] #'consult-line
             [remap isearch-backward] #'consult-isearch
             "C-S-s" #'consult-line-multi
             "C-c f" #'consult-focus-lines
             "C-x /" #'consult-ripgrep
             "M-s x" #'consult-complex-command
             "M-s M-x" #'consult-mode-command)

    (setup consult-imenu
      (:global "M-s i" #'consult-imenu
               "M-s M-i" #'consult-imenu-multi))

    (setup consult-compile
      (:global "M-s e" #'consult-compile-error))

    (setup consult-flymake
      (:global "M-s f" #'consult-flymake))

    (setup consult-xref
      (:option xref-show-xrefs-function #'consult-xref
               xref-show-definitions-function #'consult-xref)))
#+end_src
*** consult-dir
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:40]
:END:

#+begin_src emacs-lisp
  (setup (:package consult-dir)
    (:global "C-x d" #'consult-dir))
#+end_src
*** corfu                                                   :completion:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:19]
:END:

#+begin_src emacs-lisp
  (setup (:package corfu)
    (:with-mode (prog-mode text-mode)
      (:hook corfu-mode fancy-dabbrev-mode)
      (:bind "M-/" #'completion-at-point)))
#+end_src
*** electric-operator                                          :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package electric-operator)
    (:hook-into python-mode
                sql-mode
                js-mode
                c-mode
                java-mode
                rust-mode))
#+end_src
*** embark
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:53]
:END:

#+begin_src emacs-lisp
  (setup (:package embark)
    ;; MAYBE: Bind "C-;" or something to embark-dwim
    (:global "C-." #'embark-act))
#+end_src

Some notes:

- =embark-next/previous-symbol= could replace =symbol-overlay= package.
- =embark-export= can be a useful alternative to =tabulated-list=.
- Binding =sudo-find-file= command may be useful, but I haven't done it yet.

The following resources are useful:

- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]
*** embark-consult
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 18:02]
:END:

#+begin_src emacs-lisp
  (setup (:package embark-consult)

    ;; TODO: Use a macro
    (with-eval-after-load 'embark
      (with-eval-after-load 'consult
        (require 'embark-consult)))

    (:with-mode embark-collect-mode
      (:hook consult-preview-at-point-mode)))
#+end_src
*** fancy-dabbrev                                              :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 20:24]
:END:

#+begin_src emacs-lisp
  (setup (:package fancy-dabbrev)
    ;; For activation, see corfu
    (:global "TAB" #'fancy-dabbrev-expand-or-indent))
#+end_src
*** git-modes                                               :VC:major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package git-modes)
    (:with-mode gitattributes-mode)
    (:with-mode gitconfig-mode)
    (:with-mode gitignore-mode
      (:file-match "/\\.dockerignore\\'")))
#+end_src
*** iedit                                                         :editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:51]
:END:

#+begin_src emacs-lisp
(setup (:package iedit))
#+end_src
*** kind-icon                                                          :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 21:22]
:END:

#+begin_src emacs-lisp
  (setup (:package kind-icon)
    (:option kind-icon-default-face 'corfu-default)

    (with-eval-after-load 'corfu
      (require 'kind-icon)
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src
*** leetcode                                                    :exercises:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 11:27]
:END:

#+begin_src emacs-lisp
(setup (:package leetcode))
#+end_src
*** lispy                                 :Emacs__Lisp:structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:36]
:END:

For Emacs Lisp, I use lispy.

#+begin_src emacs-lisp
  (setup (:package lispy)

    (:hook
     (defun akirak/lispy-invert-puni-mode ()
       "Turn off `puni-mode' when `lispy-mode' is on."
       (when (featurep 'puni)
         (puni-mode (not lispy-mode))))))
#+end_src

Lispy is not turned on by default.
Its configuration is about my habits, so it is put in [[file:compat.el::(setup lispy][compat.el]].
*** macrostep                                      :emacs_lisp:development:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:52]
:END:

#+begin_src emacs-lisp
(setup (:package macrostep))
#+end_src

To use it, turn on =macrostep-mode=.

*** magit                                                             :git:
#+begin_src emacs-lisp
  (setup (:package magit)
    (:nixpkgs git))
#+end_src
*** marginalia
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:49]
:END:

#+begin_src emacs-lisp
  (setup (:package marginalia)
    (:hook-into after-init-hook)

    (:with-map minibuffer-local-map
      (:bind "M-A" #'marginalia-cycle)))
#+end_src
*** MAYBE nano-bell                                         :noexport:nano:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:20]
:END:

[[https://github.com/rougier/nano-bell][GitHub - rougier/nano-bell: Visual bell for GNU Emacs]]
*** MAYBE nano-sidebar                                      :noexport:nano:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:19]
:END:

[[https://github.com/rougier/nano-sidebar][GitHub - rougier/nano-sidebar: Emacs package to have configurable sidebars on a per frame basis.]]
*** mlscroll                                                :aesthetics:UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package mlscroll)
    (:option mlscroll-in-color "#888888"
             mlscroll-out-color (face-attribute 'region :background nil t))
    (:with-mode mlscroll-mode
      (:hook-into after-init-hook)))
#+end_src
*** nano-modeline                       :visual:aesthetics:UI:nano:ARCHIVE:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 14:46]
:END:

#+begin_src emacs-lisp
  (setup (:package nano-modeline)
    (nano-modeline-mode t))
#+end_src
*** nix-mode                                                          :Nix:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package nix-mode)
    (:file-match "\\.nix\\'"))
#+end_src
*** nov                                                      :reading:EPUB:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package nov)
    ;; unzip is required for opening EPUB
    (:nixpkgs unzip)

    (:with-mode nov-mode
      (:file-match "\\.epub\\'")

      (:local-set line-spacing 0.4)

      (:hook visual-line-mode
             visual-fill-column-mode)))
#+end_src
*** orderless                                                  :completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 17:14]
:END:

#+begin_src emacs-lisp
  (setup (:package orderless)
    (:option completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration

It is also possible to use Helm as a completion style. See https://github.com/oantolin/orderless#ivy-and-helm. I will use orderless primarily because it is smaller than Helm.
*** puni                                              :structured__editing:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:24]
:END:

[[https://github.com/AmaiKinono/puni][puni]] will replace smartparens, expand-region, and paredit (which I didn't adopt in favour of lispy).

#+begin_src emacs-lisp
  (setup (:package puni)
    (:hook-into prog-mode
                sgml-mode
                nxml-mode)

    ;; TODO: Bind commands
    ;;
    ;; Marking commands
    ;; Sexp manipulating commands
    (:bind))
#+end_src

The following types of commands don't have pre-defined keybindings in =puni-mode=, so I have to manually bind them:

- Marking commnads
- Sexp manipulating commands

For auto-pairing, you can use =electric-pair-mode= along with puni.

Limitations:

- puni doesn't handle JSX in typescript-mode with tree-sitter.

*** rainbow-mode                                                   :colors:
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package rainbow-mode)
    (:hook-into prog-mode))
#+end_src
*** restclient                                                        :web:
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:58]
:END:

#+begin_src emacs-lisp
(setup (:package restclient))
#+end_src
*** svg-lib                                              :library:graphics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:30]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-lib))
#+end_src
*** svg-tag-mode                                   :visual:nano:aesthetics:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 15:26]
:END:

#+begin_src emacs-lisp
  (setup (:package svg-tag-mode)
    (autoload #'svg-tag-mode "svg-tag-mode.el")
    (:hook-into org-mode prog-mode))
#+end_src
*** titlecase                                                     :writing:
:PROPERTIES:
:CREATED_TIME: [2022-01-18 Tue 17:13]
:END:

#+begin_src emacs-lisp
(setup (:package titlecase))
#+end_src

The [[https://github.com/duckwork/titlecase.el][readme]] of this package contains helpful links on capitalization.
*** tree-sitter                                        :syntax:tree_sitter:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:36]
:END:

#+begin_src emacs-lisp
  (setup (:package tree-sitter)
    (:hook tree-sitter-hl-mode))
#+end_src

- =tree-sitter-hl-mode= overrides highlighting provided by =font-lock-mode=.
**** tree-sitter-langs
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 14:37]
:END:

#+begin_src emacs-lisp
  (setup (:package tree-sitter-langs)
    (:with-mode tree-sitter-mode
      (:hook-into typescript-mode)))
#+end_src
*** turbo-log                                       :development:debugging:
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:55]
:END:

#+begin_src emacs-lisp
(setup (:package turbo-log))
#+end_src
*** typescript-mode                                            :major_mode:
:PROPERTIES:
:CREATED_TIME: [2022-01-06 Thu 18:39]
:END:

#+begin_src emacs-lisp
  (setup (:package typescript-mode)
    (:file-match "\\.tsx?\\'"))
#+end_src
*** unmodified-buffer
:PROPERTIES:
:CREATED_TIME: [2022-01-17 Mon 15:58]
:END:

#+begin_src emacs-lisp
  (setup (:package unmodified-buffer)
    (:hook-into after-init-hook))
#+end_src
*** vertico                                         :minibuffer:completion:
:PROPERTIES:
:CREATED_TIME: [2022-01-05 Wed 16:59]
:END:

#+begin_src emacs-lisp
  (setup (:package vertico)
    (:hook-into after-init-hook)
    (:option vertico-resize t))
#+end_src

For more tips, see [[https://github.com/minad/vertico/wiki][Home · minad/vertico Wiki · GitHub]].

An alternative is icomplete (or icomplete-vertical).
See the following [[https://github.com/minad/vertico][comment]] for differences:

#+begin_quote
In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum.
#+end_quote
*** visual-fill-column
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (setup (:package visual-fill-column)
    (:option visual-fill-column-center-text t
             visual-fill-column-width 80))
#+end_src
*** vterm                                                :terminal:process:
:PROPERTIES:
:CREATED_TIME: [2022-01-04 Tue 16:50]
:END:

#+begin_src emacs-lisp
  (setup (:package vterm))
#+end_src
*** which-key                                       :usability:keybindings:
#+begin_src emacs-lisp
  (setup (:package which-key)
    (:hook-into after-init-hook)
    (:hook which-key-setup-side-window-bottom))
#+end_src
** Notes                                                             :@note:
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:CUSTOM_ID: develop-org-configuration
:END:
This configuration is maintained in Org, and [[file:.org-config.el][.org-config.el]] contains the configuration for the Org file. It uses [[https://github.com/akirak/org-starter][org-starter]], which is my package for maintaining file-specific Org configuration.

The workflow is as follows:

1. Use =org-capture= to add an entry to the configuration file. It should contain a source block with a package name.
2. Add further configuration for the package. Optionally set tags on the heading.
3. When the buffer is saved, Org entries are automatically sorted by package name. This feature depends on the pre-commit hook of this repository.
*** Tag statistics
The following source block generates a list of tags in this document.
If you have [[https://github.com/alphapapa/org-ql/][org-ql]] installed, you can browse matching entries by pressing =C-c C-o= on a link in the table.

#+name: tag-statistics
#+begin_src emacs-lisp :tangle no
  (->> (org-ql-select (current-buffer)
         '(and (level > 2)
               (not (tags "ARCHIVE"))
               (not (tags "noexport")))
         :action '(org-get-tags))
       (--filter (not (member "@note" it)))
       (-flatten-n 1)
       (-group-by #'identity)
       (-map (pcase-lambda (`(,tag . ,items))
               (cons tag (length items))))
       (-sort (-on #'> #'cdr))
       (-map (pcase-lambda (`(,tag . ,count))
               (list (format "[[org-ql-search:tags:%s][%s]]" tag tag)
                     count))))
#+end_src

#+RESULTS: tag-statistics
| [[org-ql-search:tags:packages][packages]]            | 42 |
| [[org-ql-search:tags:UI][UI]]                  |  9 |
| [[org-ql-search:tags:visual][visual]]              |  7 |
| [[org-ql-search:tags:formatting][formatting]]          |  6 |
| [[org-ql-search:tags:completion][completion]]          |  6 |
| [[org-ql-search:tags:process][process]]             |  4 |
| [[org-ql-search:tags:history][history]]             |  4 |
| [[org-ql-search:tags:files][files]]               |  3 |
| [[org-ql-search:tags:writing][writing]]             |  3 |
| [[org-ql-search:tags:aesthetics][aesthetics]]          |  3 |
| [[org-ql-search:tags:IO][IO]]                  |  2 |
| [[org-ql-search:tags:parentheses][parentheses]]         |  2 |
| [[org-ql-search:tags:minibuffer][minibuffer]]          |  2 |
| [[org-ql-search:tags:VC][VC]]                  |  2 |
| [[org-ql-search:tags:navigation][navigation]]          |  2 |
| [[org-ql-search:tags:keybindings][keybindings]]         |  2 |
| [[org-ql-search:tags:major_mode][major_mode]]          |  2 |
| [[org-ql-search:tags:structured__editing][structured__editing]] |  2 |
| [[org-ql-search:tags:development][development]]         |  2 |
| [[org-ql-search:tags:syntax][syntax]]              |  2 |
| [[org-ql-search:tags:tree_sitter][tree_sitter]]         |  2 |
| [[org-ql-search:tags:profiling][profiling]]           |  1 |
| [[org-ql-search:tags:initialization][initialization]]      |  1 |
| [[org-ql-search:tags:performance][performance]]         |  1 |
| [[org-ql-search:tags:diff][diff]]                |  1 |
| [[org-ql-search:tags:prog_mode][prog_mode]]           |  1 |
| [[org-ql-search:tags:text_mode][text_mode]]           |  1 |
| [[org-ql-search:tags:text][text]]                |  1 |
| [[org-ql-search:tags:editing][editing]]             |  1 |
| [[org-ql-search:tags:exercises][exercises]]           |  1 |
| [[org-ql-search:tags:Emacs__Lisp][Emacs__Lisp]]         |  1 |
| [[org-ql-search:tags:emacs_lisp][emacs_lisp]]          |  1 |
| [[org-ql-search:tags:git][git]]                 |  1 |
| [[org-ql-search:tags:Nix][Nix]]                 |  1 |
| [[org-ql-search:tags:web][web]]                 |  1 |
| [[org-ql-search:tags:library][library]]             |  1 |
| [[org-ql-search:tags:graphics][graphics]]            |  1 |
| [[org-ql-search:tags:nano][nano]]                |  1 |
| [[org-ql-search:tags:debugging][debugging]]           |  1 |
| [[org-ql-search:tags:terminal][terminal]]            |  1 |
| [[org-ql-search:tags:usability][usability]]           |  1 |

Note that the table above is invisible on GitHub.
There is a table right before paragraph.
*** Web development
:PROPERTIES:
:CREATED_TIME: [2022-01-07 Fri 10:59]
:END:

The following packages (tagged =web=) are related to web development:

#+BEGIN: org-ql :query "tags:web" :columns (heading todo)
| Heading    | Todo |
|------------+------|
| [[restclient][restclient]] |      |
#+END:

- You will want to test web APIs from inside Emacs. You can choose either [[https://github.com/pashky/restclient.el][restclient]] or [[https://github.com/federicotdn/verb][verb]] for this purpose.
- I am not sure if Indium or skewer-mode is suitable for modern web development. I have never used any of them.

*** Syntax support
:PROPERTIES:
:CREATED_TIME: [2022-01-21 Fri 16:20]
:END:

Use tree-sitter wherever possible.
There are some companion packages:

#+BEGIN: org-ql :query "tags:tree_sitter" :columns (heading todo)
| Heading           | Todo |
|-------------------+------|
| [[tree-sitter][tree-sitter]]       |      |
| [[tree-sitter-langs][tree-sitter-langs]] |      |
#+END:

There are some packages for structured editing:

#+BEGIN: org-ql :query "tags:structured__editing" :columns (heading todo)
| Heading | Todo |
|---------+------|
| [[lispy][lispy]]   |      |
| [[puni][puni]]    |      |
#+END:

I like the idea of [[https://github.com/mickeynp/combobulate][combobulate]], but it looks immature at present.
I will consider it in the future.
*** Readability
See examples in [[https://depp.brause.cc/nov.el/][nov.el: Major mode for reading EPUBs in Emacs]].
** Footer                                                         :noexport:
# Local Variables:
# org-complete-tags-always-offer-all-agenda-tags: nil
# End:
