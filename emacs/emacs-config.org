* Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

:CONTENTS:
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#built-ins][Built-ins]]
- [[#basic-appearances][Basic appearances]]
- [[#custom-conventions][Custom conventions]]
- [[#org][Org]]
- [[#packages][Packages]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
:END:
** Setup.el
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interesting to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)
  
    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))
  
    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
** Performance                                                    :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                               :profiling:initialization:
#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                                      :performance:
#+begin_src emacs-lisp
  (setup (:package gcmh)
    (gcmh-mode t))
#+end_src
*** Measuring init time                                    :initialization:
Display initialization time concisely at startup:

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (defun akirak/show-init-time ()
              (message "Emacs initialized in %.3f sec with %d garbage collections"
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))
#+end_src
** Built-ins
:PROPERTIES:
:SORTING_TYPE: a
:END:
# Note: These should never fail.

#+begin_src emacs-lisp
  (setup emacs
    (:option register-preview-delay 0)
  
    ;; Add an indicator if mutiple strings are read
    (advice-add #'completing-read-multiple
                :filter-args
                (defun crm-indicator (args)
                  (cons (concat "[CRM] " (car args)) (cdr args))))
  
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  
    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)
  
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

Resources:

- https://github.com/minad/vertico#configuration
*** autorevert                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup autorevert
    (global-auto-revert-mode t))
#+end_src
*** buffer.c                                        :formatting:visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:
#+begin_src emacs-lisp
  (setup buffer
    (:option buffer-file-coding-system 'utf-8
             fill-column 80
             indicate-empty-lines t
             truncate-lines t))
#+end_src
*** callproc.c                                                    :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup callproc
    (:only-if (eq system-type 'windows-nt))
    (:option shell-file-name (executable-find "bash")))
#+end_src
*** compile                                                       :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup compile
    (:option
     compilation-auto-jump-to-first-error t
     compilation-scroll-output t
     compilation-error-regexp-alist
     (list
      ;; eslint
      (list (rx bol (group (or "ERROR" "WARNING"))
                " in "
                (group (*? anything))
                ":" (group (+ digit))
                ":" (group (+ digit)))
            2 3 4 '(1 . 1))
      ;; eslint --fix
      (list (rx bol (group "/home/" (+ nonl)) "\n"
                (+ space) (group (+ digit)) ":" (group (+ digit))
                (+ space) (group (or "error" "WARNING")))
            1 2 3 '(4 . 4))
      ;; prettier
      (list (rx bol "[" (group (or "error" "WARNING")) "] "
                (group (*? anything))
                ": "
                (+ anything)
                "(" (group (+ digit)) ":" (group (+ digit)) ")")
            2 3 4 '(1 . 1))
      ;; nix-linter
      ;; Unused argument `hsuper` at default.nix:9:24-15:6
      (list (rx " at " (group (+ (not (any ":"))))
                ":" (group (+ digit)) ":" (group (+ digit))
                "-" (+ digit) ":" (+ digit) eol)
            1 2 3)
      ;; hlint
      ;; path:67:23-45:
      (list (rx bol (group (any "/" alnum)
                           (* (any "./" alnum)))
                ":"
                (group (+ digit)) ":" (group (+ digit))
                "-"
                (+ digit)
                ":" (* space)
                (group (or "Warning" "Suggestion"
                           "warning" "error"))
                ":" space (+ nonl))
            1 2 3 '(4 . 4))
      (list (rx bol (group (any "/" alnum)
                           (* (any "./" alnum)))
                ":"
                "(" (group (+ digit)) "," (group (+ digit)) ")"
                "-"
                "(" (+ digit) "," (+ digit) ")"
                ":" (* space)
                (group (or "Warning" "Suggestion"
                           "warning" "error"))
                ":" space (+ nonl))
            1 2 3 '(4 . 4))
      ;; Emacs checkdoc/byte-compile, GHC, etc.
      ;; path:line:col: error:
      (list (rx (group (+ (not (any space ":")))) ":"
                (group (+ digit)) ":" (group (+ digit))
                ":" (* space)
                (or "Error" "error" "warning") ":")
            1 2 3 '(4 . 4))
  
      ;; Elixir iex
      ;; ** (SyntaxError) xxx/xxx/xxx.ex:97:29: syntax error before: '{'
      (list (rx bol (+ "*") "(" (+ anything) ")"
                (group (+ (not (any space ":")))) ":"
                (group (+ digit)) ":" (group (+ digit))
                ":" (* space))
            1 2 3 '(4 . 4))))
    )
#+end_src
*** ediff-wind                                                       :diff:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup ediff-wind
    (:option ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
*** fileio.c                                                        :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fileio
    (:option delete-by-moving-to-trash t))
#+end_src
*** filelock.c                                                         :IO:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup filelock
    ;; lock files will kill `npm start'
    (:option create-lockfiles nil))
#+end_src
*** files                                                           :files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup files
    (:option backup-by-copying t
             delete-old-versions t
             version-control t
             view-read-only t))
#+end_src
*** fns.c and xfns.c                                                   :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup fns
    (:option use-dialog-box nil))
  
  (setup xfns
    (:option x-gtk-use-system-tooltips nil))
#+end_src
*** frame                                                          :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup frame
    (blink-cursor-mode -1))
#+end_src
*** hl-line                                                        :visual:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup hl-line
    (:with-mode hl-line-mode
      (:hook-into prog-mode-hook
                  text-mode-hook)))
#+end_src
*** indent.c                                                   :formatting:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup indent
    (defun akirak/turn-on-indent-tabs-mode ()
      (interactive)
      (setq indent-tabs-mode 1))
  
    (dolist (mode-hook '(makefile-mode-hook))
      (add-hook mode-hook 'akirak/turn-on-indent-tabs-mode)))
#+end_src
*** mule
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup mule-cmds
    (set-language-environment "UTF-8"))
#+end_src
*** paragraphs                                                       :text:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paragraphs
    (:option sentence-end-double-space nil))
#+end_src
*** paren                                                     :parentheses:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup paren
    (show-paren-mode 1))
#+end_src
*** process.c                                                     :process:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup process
    ;; Expand read-process-output-max for lsp-mode
    (:option read-process-output-max (* 1024 1024)))
#+end_src
*** recentf                                                 :history:files:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup recentf
    (recentf-mode 1)
    (:option recentf-max-saved-items 200))
#+end_src
*** saveplace                                                     :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup saveplace
    (save-place-mode 1))
#+end_src
*** subr                                                               :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup subr
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src
*** terminal.c                                                         :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup terminal
    (:option ring-bell-function 'ignore))
#+end_src
*** tooltip                                                            :UI:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup tooltip
    (tooltip-mode -1))
#+end_src
*** vc-hooks                                                           :VC:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup vc-hooks
    (:option vc-follow-symlinks t
             vc-make-backup-files t))
#+end_src
*** view                                                       :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup view
    (:option view-inhibit-help-message t)
  
    (:with-map View-mode-map
      (:bind
       [remap scroll-up-command] #'View-scroll-half-page-forward
       [remap scroll-down-command] #'View-scroll-half-page-backward)))
#+end_src
*** window                                                     :navigation:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup window
    (:option recenter-positions '(top middle bottom))
  
    (defun akirak/scroll-half-height (&optional window)
      (/ (1- (window-height (or window (selected-window)))) 2))
  
    (:global
     ;; TODO: scroll-other-window and scroll-other-window-down
     [remap scroll-up-command]
     (defun akirak/scroll-half-page-forward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-up arg)
         (scroll-up (akirak/scroll-half-height))))
     [remap scroll-down-command]
     (defun akirak/scroll-half-page-backward (&optional arg)
       (interactive "P")
       (if (numberp arg)
           (scroll-down arg)
         (scroll-down (akirak/scroll-half-height))))))
#+end_src
*** winner                                                        :history:
:PROPERTIES:
:CREATED_TIME: [2022-01-03 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (setup winner
    (winner-mode 1))
#+end_src
** Basic appearances                                                :visual:
*** Theme packages                                        :packages:
# Note: Theme packages don't depend on other packages, so they can be loaded earlier than others.
# I want a separate section for themes to add this comment.

The following theme packages are bundled with configuration:

#+begin_src emacs-lisp
  (setup (:package doom-themes))
  
  (setup (:package poet-theme))
#+end_src

No theme is set by default.
You can load a theme on startup by adding command line arguments to Emacs, e.g.

#+begin_src sh
  emacs --eval "(when init-file-user (require 'doom-themes) (load-theme 'doom-tomorrow-night t))"
#+end_src
*** Font families
You need to install the font separately.

#+begin_src emacs-lisp
  (defcustom akirak/base-face-family-alist
    '((default . "Cascadia Code"))
    "Alist of font families for faces."
    :type '(alist :key-type symbol
                  :value-type string)
    :set (lambda (symbol value)
           (set symbol value)
           (when window-system
             (let ((families (font-family-list)))
               (pcase-dolist (`(,face . ,family) value)
                 (if (member family families)
                     (set-face-attribute face nil :family family)
                   (message "Font family %s is not installed" family)))))))
#+end_src
** Custom conventions
*** Prefix for mode-specific commands
#+begin_src emacs-lisp
  (defcustom akirak/mode-prefix-key "C-,"
    "Prefix for mode-specific keybindings."
    :type 'string)
#+end_src
** Org                                                            :packages:
Embrace Org as a common document format for Emacs.
** Packages                                                       :packages:
:PROPERTIES:
:SORTING_TYPE: a
:END:
A bunch of useful packages are configured here.
*** bufler
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 22:51]
:END:

#+begin_src emacs-lisp
  (setup (:package bufler)
    (bufler-mode t)
    ;; Use it as a replacement for ibuffer
    (:global "C-x C-b" #'bufler))
#+end_src
*** magit                                                             :git:
#+begin_src emacs-lisp
  (setup (:package magit))
#+end_src
*** which-key                                       :usability:keybindings:
#+begin_src emacs-lisp
  (setup (:package which-key)
    (which-key-mode t)
    (which-key-setup-side-window-bottom))
#+end_src
** Notes                                                             :@note:
:PROPERTIES:
:TOC:      :depth 2
:END:
*** How to develop this configuration
:PROPERTIES:
:CREATED_TIME: [2022-01-02 Sun 14:52]
:CUSTOM_ID: develop-org-configuration
:END:
This configuration is maintained in Org, and [[file:.org-config.el][.org-config.el]] contains the configuration for the Org file. It uses [[https://github.com/akirak/org-starter][org-starter]], which is my package for maintaining file-specific Org configuration.

The workflow is as follows:

1. Use =org-capture= to add an entry with a source block to the configuration file.
2. Add further configuration for the package using =setup= and set tags on the heading.
3. Org entries are automatically sorted by package name when the buffer is saved.
*** Tag statistics
If you have [[https://github.com/alphapapa/org-ql/][org-ql]] installed, you can browse entries matching a tag by pressing =C-c C-o= on a link below:

#+name: tag-statistics
#+begin_src emacs-lisp :tangle no
  (->> (org-ql-select (current-buffer)
         '(and (level > 2)
               (not (tags "ARCHIVE")))
         :action '(org-get-tags))
       (--filter (not (member "@note" it)))
       (-flatten-n 1)
       (-group-by #'identity)
       (-map (pcase-lambda (`(,tag . ,items))
               (cons tag (length items))))
       (-sort (-on #'> #'cdr))
       (-map (pcase-lambda (`(,tag . ,count))
               (list (format "[[org-ql-search:tags:%s][%s]]" tag tag)
                     count))))
#+end_src

#+RESULTS: tag-statistics
| [[org-ql-search:tags:packages][packages]]       | 7 |
| [[org-ql-search:tags:visual][visual]]         | 5 |
| [[org-ql-search:tags:UI][UI]]             | 4 |
| [[org-ql-search:tags:process][process]]        | 3 |
| [[org-ql-search:tags:files][files]]          | 3 |
| [[org-ql-search:tags:history][history]]        | 3 |
| [[org-ql-search:tags:initialization][initialization]] | 2 |
| [[org-ql-search:tags:IO][IO]]             | 2 |
| [[org-ql-search:tags:formatting][formatting]]     | 2 |
| [[org-ql-search:tags:navigation][navigation]]     | 2 |
| [[org-ql-search:tags:profiling][profiling]]      | 1 |
| [[org-ql-search:tags:performance][performance]]    | 1 |
| [[org-ql-search:tags:diff][diff]]           | 1 |
| [[org-ql-search:tags:text][text]]           | 1 |
| [[org-ql-search:tags:parentheses][parentheses]]    | 1 |
| [[org-ql-search:tags:VC][VC]]             | 1 |
| [[org-ql-search:tags:git][git]]            | 1 |
| [[org-ql-search:tags:usability][usability]]      | 1 |
| [[org-ql-search:tags:keybindings][keybindings]]    | 1 |

*** Profiling (org-ql dblock example)                    :noexport:ARCHIVE:

#+BEGIN: org-ql :query "tags: profiling" :columns (heading)

#+END:
